From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: fgei <fgei@gmail.com>
Date: Sun, 12 Nov 2023 04:26:12 +0000
Subject: [PATCH] Derive high entropy client hints with reduced user agent by
 default

This patchset adds support to disable high entropy client hints or to
populate some of it with information derived from reduced user agent in
Android.
---
 .../embedder_support/user_agent_utils.cc      | 29 +++++++++++++++++++
 content/browser/client_hints/client_hints.cc  | 14 +++++++++
 third_party/blink/common/features.cc          | 10 +++++++
 third_party/blink/public/common/features.h    |  3 ++
 4 files changed, 56 insertions(+)

diff --git a/components/embedder_support/user_agent_utils.cc b/components/embedder_support/user_agent_utils.cc
index 5f791fa68439e..a74503956ab04 100644
--- a/components/embedder_support/user_agent_utils.cc
+++ b/components/embedder_support/user_agent_utils.cc
@@ -492,6 +492,35 @@ blink::UserAgentMetadata GetUserAgentMetadata(const PrefService* pref_service,
                : metadata;
   }
 
+  if (base::FeatureList::IsEnabled(
+          blink::features::kClientHintsLowEntropyOnly)) {
+    return metadata;
+  }
+
+  if (base::FeatureList::IsEnabled(
+          blink::features::kClientHintsFromReducedUA)) {
+    // Values reflected from reduced user agent obtained from
+    // GetReducedUserAgent from //content/common/user_agent.cc
+    std::string reduced_version_number =
+        base::StrCat({version_info::GetMajorVersionNumber(), ".0.",
+                      blink::features::kUserAgentFrozenBuildVersion.Get(), ".0"});
+    // See GetFormFactorsForClientHints. Do not include XR Form Factor.
+    // By default, use "Mobile" or "Desktop" depending on the `mobile` bit.
+    std::vector<std::string> form_factors = {
+        metadata.mobile ? blink::kMobileFormFactor : blink::kDesktopFormFactor};
+    metadata.brand_full_version_list =
+        GetUserAgentBrandList(version_info::GetMajorVersionNumber(),
+                              enable_updated_grease_by_policy,
+                              reduced_version_number,
+                              blink::UserAgentBrandVersionType::kFullVersion);
+    // Only based on low-entropy client hints for mobile, keep the same logic.
+    metadata.form_factors = form_factors;
+    metadata.model = "K";
+    metadata.platform_version = "10.0.0";
+    metadata.full_version = reduced_version_number;
+    return metadata;
+  }
+
   if (only_low_entropy_ch) {
     return metadata;
   }
diff --git a/content/browser/client_hints/client_hints.cc b/content/browser/client_hints/client_hints.cc
index 5a6e4ff06e6a7..22b5abfeed61a 100644
--- a/content/browser/client_hints/client_hints.cc
+++ b/content/browser/client_hints/client_hints.cc
@@ -867,6 +867,20 @@ void AddRequestClientHintsHeaders(
 
   GURL url = origin.GetURL();
 
+  if (base::FeatureList::IsEnabled(
+          blink::features::kClientHintsLowEntropyOnly)) {
+    return;
+  }
+
+  if (base::FeatureList::IsEnabled(
+          blink::features::kClientHintsFromReducedUA)) {
+    UpdateNavigationRequestClientUaHeadersImpl(
+        delegate, is_ua_override_on, frame_tree_node,
+        ClientUaHeaderCallType::kDuringCreation, headers, container_policy,
+        request_url, data);
+    return;
+  }
+
   // Add Headers
   if (ShouldAddClientHint(data, WebClientHintsType::kDeviceMemory_DEPRECATED)) {
     AddDeviceMemoryHeader(headers, /*use_deprecated_version*/ true);
diff --git a/third_party/blink/common/features.cc b/third_party/blink/common/features.cc
index 4c1af1fd6adeb..00e6306c771a9 100644
--- a/third_party/blink/common/features.cc
+++ b/third_party/blink/common/features.cc
@@ -507,6 +507,16 @@ BASE_FEATURE(kCheckHTMLParserBudgetLessOften,
              "CheckHTMLParserBudgetLessOften",
              base::FEATURE_DISABLED_BY_DEFAULT);
 
+// Enable low-entropy client hints only.
+BASE_FEATURE(kClientHintsLowEntropyOnly,
+             "ClientHintsLowEntropyOnly",
+             base::FEATURE_DISABLED_BY_DEFAULT);
+
+// Use information from reduced user agent for high entropy client hints.
+BASE_FEATURE(kClientHintsFromReducedUA,
+            "ClientHintsFromReducedUA",
+            base::FEATURE_ENABLED_BY_DEFAULT);
+
 // Enable legacy `dpr` client hint.
 BASE_FEATURE(kClientHintsDPR_DEPRECATED,
              "ClientHintsDPR_DEPRECATED",
diff --git a/third_party/blink/public/common/features.h b/third_party/blink/public/common/features.h
index 1babe5b230878..1a6b7c902d7ed 100644
--- a/third_party/blink/public/common/features.h
+++ b/third_party/blink/public/common/features.h
@@ -282,6 +282,9 @@ BLINK_COMMON_EXPORT BASE_DECLARE_FEATURE(kCaptureJSExecutionLocation);
 // is a no-op if kTimedHTMLParserBudget is disabled.
 BLINK_COMMON_EXPORT BASE_DECLARE_FEATURE(kCheckHTMLParserBudgetLessOften);
 
+BLINK_COMMON_EXPORT BASE_DECLARE_FEATURE(kClientHintsLowEntropyOnly);
+BLINK_COMMON_EXPORT BASE_DECLARE_FEATURE(kClientHintsFromReducedUA);
+
 // We do intend to deprecate these when possible, do not remove the feature
 // until they can be disabled by default.
 BLINK_COMMON_EXPORT BASE_DECLARE_FEATURE(kClientHintsDeviceMemory_DEPRECATED);
