From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: Darren Shen <shend@chromium.org>
Date: Tue, 15 Oct 2024 04:04:37 +0000
Subject: [PATCH] upstream-backport: Guard CheckSpelling mojom method at
 compile time with build flags.

When use_browser_spellchecker && !enable_spelling_service,
SpellcheckHost::CheckSpelling will trigger a NOTREACHED.

Guard the mojom declaration of the method with the same build
flags so that it's impossible to hit the NOTREACHED.

Bug: 367216585
Change-Id: I840ebf66e371c6968b8cc2195bed3cccfa55fcea
Reviewed-on: https://chromium-review.googlesource.com/c/chromium/src/+/5923299
Reviewed-by: Sam McNally <sammc@chromium.org>
Reviewed-by: Michael Cui <mlcui@google.com>
Auto-Submit: Darren Shen <shend@chromium.org>
Commit-Queue: Darren Shen <shend@chromium.org>
Cr-Commit-Position: refs/heads/main@{#1368587}
---
 .../spellcheck/browser/spell_check_host_impl.cc   | 15 ---------------
 .../spellcheck/browser/spell_check_host_impl.h    |  5 -----
 components/spellcheck/common/BUILD.gn             |  3 +++
 components/spellcheck/common/spellcheck.mojom     |  4 ++--
 .../renderer/platform_spelling_engine.cc          | 11 +++++++++++
 .../renderer/spellcheck_provider_test.cc          |  2 ++
 .../renderer/spellcheck_provider_test.h           |  2 ++
 components/spellcheck/renderer/spelling_engine.h  |  3 +++
 8 files changed, 23 insertions(+), 22 deletions(-)

diff --git a/components/spellcheck/browser/spell_check_host_impl.cc b/components/spellcheck/browser/spell_check_host_impl.cc
index c77bff349b65d..6b0af413e546c 100644
--- a/components/spellcheck/browser/spell_check_host_impl.cc
+++ b/components/spellcheck/browser/spell_check_host_impl.cc
@@ -48,21 +48,6 @@ void SpellCheckHostImpl::RequestTextCheck(const std::u16string& text,
   session_bridge_.RequestTextCheck(text, std::move(callback));
 }
 
-void SpellCheckHostImpl::CheckSpelling(const std::u16string& word,
-                                       CheckSpellingCallback callback) {
-  DCHECK_CURRENTLY_ON(content::BrowserThread::UI);
-  NOTREACHED_IN_MIGRATION();
-  std::move(callback).Run(false);
-}
-
-void SpellCheckHostImpl::FillSuggestionList(
-    const std::u16string& word,
-    FillSuggestionListCallback callback) {
-  DCHECK_CURRENTLY_ON(content::BrowserThread::UI);
-  NOTREACHED_IN_MIGRATION();
-  std::move(callback).Run({});
-}
-
 #if BUILDFLAG(IS_WIN)
 void SpellCheckHostImpl::InitializeDictionaries(
     InitializeDictionariesCallback callback) {
diff --git a/components/spellcheck/browser/spell_check_host_impl.h b/components/spellcheck/browser/spell_check_host_impl.h
index fa79c682478a2..4998ceda29776 100644
--- a/components/spellcheck/browser/spell_check_host_impl.h
+++ b/components/spellcheck/browser/spell_check_host_impl.h
@@ -45,11 +45,6 @@ class SpellCheckHostImpl : public spellcheck::mojom::SpellCheckHost {
   void RequestTextCheck(const std::u16string& text,
                         RequestTextCheckCallback callback) override;
 
-  void CheckSpelling(const std::u16string& word,
-                     CheckSpellingCallback callback) override;
-  void FillSuggestionList(const std::u16string& word,
-                          FillSuggestionListCallback callback) override;
-
 #if BUILDFLAG(IS_WIN)
   void InitializeDictionaries(InitializeDictionariesCallback callback) override;
 #endif  // BUILDFLAG(IS_WIN)
diff --git a/components/spellcheck/common/BUILD.gn b/components/spellcheck/common/BUILD.gn
index 8d4bdec6868d8..65e62a176bebe 100644
--- a/components/spellcheck/common/BUILD.gn
+++ b/components/spellcheck/common/BUILD.gn
@@ -48,6 +48,9 @@ mojom("interfaces") {
 
   enabled_features = []
   if (use_browser_spellchecker) {
+    if (enable_spelling_service) {
+      enabled_features += [ "USE_BROWSER_SPELLCHECKER_AND_SPELLING_SERVICE" ]
+    }
     enabled_features += [ "USE_BROWSER_SPELLCHECKER" ]
   }
 
diff --git a/components/spellcheck/common/spellcheck.mojom b/components/spellcheck/common/spellcheck.mojom
index 3ae350e2a1ca6..275bdc4d1f8c7 100644
--- a/components/spellcheck/common/spellcheck.mojom
+++ b/components/spellcheck/common/spellcheck.mojom
@@ -66,13 +66,13 @@ interface SpellCheckHost {
 
   // Checks the correctness of a word with a platform-specific spell checker.
   // TODO(groby): This needs to originate from SpellcheckProvider.
-  [EnableIf=USE_BROWSER_SPELLCHECKER, Sync]
+  [EnableIf=USE_BROWSER_SPELLCHECKER_AND_SPELLING_SERVICE, Sync]
   CheckSpelling(mojo_base.mojom.String16 word)
       => (bool correct);
 
   // Returns a list of suggestions for a given word with a platform-specific
   // spell checker.
-  [EnableIf=USE_BROWSER_SPELLCHECKER, Sync]
+  [EnableIf=USE_BROWSER_SPELLCHECKER_AND_SPELLING_SERVICE, Sync]
   FillSuggestionList(mojo_base.mojom.String16 word) =>
       (array<mojo_base.mojom.String16> suggestions);
 
diff --git a/components/spellcheck/renderer/platform_spelling_engine.cc b/components/spellcheck/renderer/platform_spelling_engine.cc
index b0d30fd559af4..1e8abc5211491 100644
--- a/components/spellcheck/renderer/platform_spelling_engine.cc
+++ b/components/spellcheck/renderer/platform_spelling_engine.cc
@@ -4,6 +4,7 @@
 
 #include "components/spellcheck/renderer/platform_spelling_engine.h"
 
+#include "components/spellcheck/spellcheck_buildflags.h"
 #include "content/public/renderer/render_thread.h"
 #include "services/service_manager/public/cpp/local_interface_provider.h"
 
@@ -31,9 +32,14 @@ bool PlatformSpellingEngine::IsEnabled() {
 bool PlatformSpellingEngine::CheckSpelling(
     const std::u16string& word_to_check,
     spellcheck::mojom::SpellCheckHost& host) {
+#if BUILDFLAG(USE_BROWSER_SPELLCHECKER) && !BUILDFLAG(ENABLE_SPELLING_SERVICE)
+  return false;
+#else
   bool word_correct = false;
   host.CheckSpelling(word_to_check, &word_correct);
   return word_correct;
+#endif  // BUILDFLAG(USE_BROWSER_SPELLCHECKER) &&
+        // !BUILDFLAG(ENABLE_SPELLING_SERVICE)
 }
 
 // Synchronously query against the platform's spellchecker.
@@ -43,5 +49,10 @@ void PlatformSpellingEngine::FillSuggestionList(
     const std::u16string& wrong_word,
     spellcheck::mojom::SpellCheckHost& host,
     std::vector<std::u16string>* optional_suggestions) {
+#if BUILDFLAG(USE_BROWSER_SPELLCHECKER) && !BUILDFLAG(ENABLE_SPELLING_SERVICE)
+  optional_suggestions->clear();
+#else
   host.FillSuggestionList(wrong_word, optional_suggestions);
+#endif  // BUILDFLAG(USE_BROWSER_SPELLCHECKER) &&
+        // !BUILDFLAG(ENABLE_SPELLING_SERVICE)
 }
diff --git a/components/spellcheck/renderer/spellcheck_provider_test.cc b/components/spellcheck/renderer/spellcheck_provider_test.cc
index 1e389bb31354c..e85ec2a2055de 100644
--- a/components/spellcheck/renderer/spellcheck_provider_test.cc
+++ b/components/spellcheck/renderer/spellcheck_provider_test.cc
@@ -173,6 +173,7 @@ void TestingSpellCheckProvider::RequestTextCheck(
   text_check_requests_.push_back(std::make_pair(text, std::move(callback)));
 }
 
+#if BUILDFLAG(ENABLE_SPELLING_SERVICE)
 void TestingSpellCheckProvider::CheckSpelling(const std::u16string&,
                                               CheckSpellingCallback) {
   NOTREACHED_IN_MIGRATION();
@@ -182,6 +183,7 @@ void TestingSpellCheckProvider::FillSuggestionList(const std::u16string&,
                                                    FillSuggestionListCallback) {
   NOTREACHED_IN_MIGRATION();
 }
+#endif  // BUILDFLAG(ENABLE_SPELLING_SERVICE)
 
 #if BUILDFLAG(IS_WIN)
 void TestingSpellCheckProvider::InitializeDictionaries(
diff --git a/components/spellcheck/renderer/spellcheck_provider_test.h b/components/spellcheck/renderer/spellcheck_provider_test.h
index 65f70952d9d7f..1117e33acb3cc 100644
--- a/components/spellcheck/renderer/spellcheck_provider_test.h
+++ b/components/spellcheck/renderer/spellcheck_provider_test.h
@@ -139,11 +139,13 @@ class TestingSpellCheckProvider : public SpellCheckProvider,
 #if BUILDFLAG(USE_BROWSER_SPELLCHECKER)
   void RequestTextCheck(const std::u16string&,
                         RequestTextCheckCallback) override;
+#if BUILDFLAG(ENABLE_SPELLING_SERVICE)
   using SpellCheckProvider::CheckSpelling;
   void CheckSpelling(const std::u16string&,
                      CheckSpellingCallback) override;
   void FillSuggestionList(const std::u16string&,
                           FillSuggestionListCallback) override;
+#endif  // BUILDFLAG(ENABLE_SPELLING_SERVICE)
 #if BUILDFLAG(IS_WIN)
   void InitializeDictionaries(InitializeDictionariesCallback callback) override;
 #endif  // BUILDFLAG(IS_WIN)
diff --git a/components/spellcheck/renderer/spelling_engine.h b/components/spellcheck/renderer/spelling_engine.h
index 0300d965196c6..f56973289085a 100644
--- a/components/spellcheck/renderer/spelling_engine.h
+++ b/components/spellcheck/renderer/spelling_engine.h
@@ -35,6 +35,9 @@ class SpellingEngine {
 
   // Synchronously check spelling. `host` is only valid for the duration of the
   // method call and should not be stored.
+  // TODO(https://crbug.com/367216585): Replace this method with an asynchronous
+  // API, since not all platforms (e.g. Android) supports synchronous
+  // spellchecking.
   virtual bool CheckSpelling(const std::u16string& word_to_check,
                              spellcheck::mojom::SpellCheckHost& host) = 0;
 
