From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: quh4gko8 <88831734+quh4gko8@users.noreply.github.com>
Date: Sun, 14 Sep 2025 16:03:24 +0000
Subject: [PATCH] Restore support of login database backend for Android

---
 .../password_store_backend_factory.cc         | 15 ++++--
 .../core/browser/password_store/BUILD.gn      | 54 +++++++++----------
 .../browser/password_store/login_database.cc  |  2 +-
 .../password_store/login_database_posix.cc    | 10 ++--
 .../browser/password_store_factory_util.cc    | 14 ++---
 .../browser/password_store_factory_util.h     | 10 ++--
 6 files changed, 57 insertions(+), 48 deletions(-)

diff --git a/chrome/browser/password_manager/factories/password_store_backend_factory.cc b/chrome/browser/password_manager/factories/password_store_backend_factory.cc
index f6c2a0314e60b..10fa1a686b653 100644
--- a/chrome/browser/password_manager/factories/password_store_backend_factory.cc
+++ b/chrome/browser/password_manager/factories/password_store_backend_factory.cc
@@ -11,16 +11,19 @@
 #include "components/password_manager/core/browser/password_store_factory_util.h"
 #include "components/sync/model/wipe_model_upon_sync_disabled_behavior.h"
 
+#include "components/password_manager/core/browser/password_manager_buildflags.h"
+
 #if BUILDFLAG(IS_ANDROID)
 #include "chrome/browser/password_manager/android/password_manager_android_util.h"
 #include "chrome/browser/password_manager/android/password_manager_util_bridge.h"
 #include "chrome/browser/password_manager/android/password_store_android_account_backend.h"
 #include "chrome/browser/password_manager/android/password_store_android_local_backend.h"
 #include "chrome/browser/password_manager/android/password_store_empty_backend.h"
-#else  // BUILDFLAG(IS_ANDROID)
+#endif  // BUILDFLAG(IS_ANDROID)
+#if !BUILDFLAG(IS_ANDROID) || BUILDFLAG(USE_LOGIN_DATABASE_AS_BACKEND)
 #include "components/password_manager/core/browser/password_store/login_database.h"
 #include "components/password_manager/core/browser/password_store/password_store_built_in_backend.h"
-#endif  // BUILDFLAG(IS_ANDROID)
+#endif  // !BUILDFLAG(IS_ANDROID) || BUILDFLAG(USE_LOGIN_DATABASE_AS_BACKEND)
 
 #if BUILDFLAG(IS_WIN) || BUILDFLAG(IS_MAC)
 #include "chrome/browser/policy/policy_path_parser.h"  // nogncheck
@@ -51,7 +54,7 @@ CreatePasswordStoreBackend(password_manager::IsAccountStore is_account_store,
                                 ? "AccountPasswordStoreBackendCreation"
                                 : "ProfilePasswordStoreBackendCreation");
 
-#if BUILDFLAG(IS_ANDROID)
+#if BUILDFLAG(IS_ANDROID) && !BUILDFLAG(USE_LOGIN_DATABASE_AS_BACKEND)
   using password_manager_android_util::PasswordManagerUtilBridge;
   if (!password_manager_android_util::IsPasswordManagerAvailable(
           std::make_unique<PasswordManagerUtilBridge>())) {
@@ -62,15 +65,17 @@ CreatePasswordStoreBackend(password_manager::IsAccountStore is_account_store,
         password_manager::PasswordStoreAndroidAccountBackend>();
   }
   return std::make_unique<password_manager::PasswordStoreAndroidLocalBackend>();
-#else   //  BUILDFLAG(IS_ANDROID)
+#else   //  BUILDFLAG(IS_ANDROID) && !BUILDFLAG(USE_LOGIN_DATABASE_AS_BACKEND)
   std::unique_ptr<password_manager::LoginDatabase> login_db(
       password_manager::CreateLoginDatabase(is_account_store,
                                             login_db_directory, prefs));
+#if !BUILDFLAG(IS_ANDROID)
   SetIsUserDataDirPolicySet(login_db.get());
+#endif // !BUILDFLAG(IS_ANDROID)
   auto behavior = is_account_store
                       ? syncer::WipeModelUponSyncDisabledBehavior::kAlways
                       : syncer::WipeModelUponSyncDisabledBehavior::kNever;
   return std::make_unique<password_manager::PasswordStoreBuiltInBackend>(
       std::move(login_db), behavior, prefs, os_crypt_async);
-#endif  // BUILDFLAG(IS_ANDROID)
+#endif  // BUILDFLAG(IS_ANDROID) && !BUILDFLAG(USE_LOGIN_DATABASE_AS_BACKEND)
 }
diff --git a/components/password_manager/core/browser/password_store/BUILD.gn b/components/password_manager/core/browser/password_store/BUILD.gn
index 555f5737e4e0b..623b5cd9f371a 100644
--- a/components/password_manager/core/browser/password_store/BUILD.gn
+++ b/components/password_manager/core/browser/password_store/BUILD.gn
@@ -80,33 +80,33 @@ source_set("password_store_impl") {
       "//components/sync/base",
       "//components/sync/service",
     ]
-  } else {
-    sources += [
-      "insecure_credentials_table.cc",
-      "insecure_credentials_table.h",
-      "login_database.cc",
-      "login_database.h",
-      "login_database_async_helper.cc",
-      "login_database_async_helper.h",
-      "password_notes_table.cc",
-      "password_notes_table.h",
-      "password_store_built_in_backend.cc",
-      "password_store_built_in_backend.h",
-      "statistics_table.cc",
-      "statistics_table.h",
-    ]
-    if ((is_posix && !is_apple) || is_fuchsia) {
-      sources += [ "login_database_posix.cc" ]
-    }
-    if (is_mac) {
-      sources += [ "login_database_mac.cc" ]
-    }
-    if (is_ios) {
-      sources += [ "login_database_ios.cc" ]
-    }
-    if (is_win) {
-      sources += [ "login_database_win.cc" ]
-    }
+  }
+
+  sources += [
+    "insecure_credentials_table.cc",
+    "insecure_credentials_table.h",
+    "login_database.cc",
+    "login_database.h",
+    "login_database_async_helper.cc",
+    "login_database_async_helper.h",
+    "password_notes_table.cc",
+    "password_notes_table.h",
+    "password_store_built_in_backend.cc",
+    "password_store_built_in_backend.h",
+    "statistics_table.cc",
+    "statistics_table.h",
+  ]
+  if ((is_posix && !is_apple) || is_fuchsia) {
+    sources += [ "login_database_posix.cc" ]
+  }
+  if (is_mac) {
+    sources += [ "login_database_mac.cc" ]
+  }
+  if (is_ios) {
+    sources += [ "login_database_ios.cc" ]
+  }
+  if (is_win) {
+    sources += [ "login_database_win.cc" ]
   }
   configs += [ "//build/config/compiler:wexit_time_destructors" ]
 }
diff --git a/components/password_manager/core/browser/password_store/login_database.cc b/components/password_manager/core/browser/password_store/login_database.cc
index 2c603e3c51bf2..86ea29e594e71 100644
--- a/components/password_manager/core/browser/password_store/login_database.cc
+++ b/components/password_manager/core/browser/password_store/login_database.cc
@@ -1298,7 +1298,7 @@ bool LoginDatabase::Init(
 }
 
 void LoginDatabase::ReportBubbleSuppressionMetrics() {
-#if !BUILDFLAG(IS_IOS)
+#if !BUILDFLAG(IS_IOS) && !BUILDFLAG(IS_ANDROID)
   base::UmaHistogramCustomCounts(
       "PasswordManager.BubbleSuppression.AccountsInStatisticsTable2",
       stats_table_.GetNumAccounts(), 0, 1000, 100);
diff --git a/components/password_manager/core/browser/password_store/login_database_posix.cc b/components/password_manager/core/browser/password_store/login_database_posix.cc
index 993acc2244de2..7bef4e90c9b20 100644
--- a/components/password_manager/core/browser/password_store/login_database_posix.cc
+++ b/components/password_manager/core/browser/password_store/login_database_posix.cc
@@ -44,16 +44,16 @@ EncryptionResult LoginDatabase::DecryptedString(
     const std::string& cipher_text,
     std::u16string* plain_text) const {
 #if !BUILDFLAG(IS_FUCHSIA)
-#if BUILDFLAG(IS_CHROMEOS)
+#if BUILDFLAG(IS_ANDROID) || BUILDFLAG(IS_CHROMEOS)
   // On ChromeOS, we have a mix of obfuscated and plain-text
   // passwords. Obfuscated passwords always start with "v10", therefore anything
   // else is plain-text.
   // TODO(crbug.com/41457193): Remove this when there isn't a mix of plain-text
   // and obfuscated passwords.
   bool use_encryption = base::StartsWith(cipher_text, "v10") || encryptor_;
-#else   // BUILDFLAG(IS_CHROMEOS)
+#else   // BUILDFLAG(IS_ANDROID) || BUILDFLAG(IS_CHROMEOS)
   bool use_encryption = true;
-#endif  // BUILDFLAG(IS_CHROMEOS)
+#endif  // BUILDFLAG(IS_ANDROID) || BUILDFLAG(IS_CHROMEOS)
 
   if (!use_encryption) {
     *plain_text = base::UTF8ToUTF16(cipher_text);
@@ -66,7 +66,7 @@ EncryptionResult LoginDatabase::DecryptedString(
   bool decryption_success =
       encryptor_ ? encryptor_->DecryptString16(cipher_text, plain_text)
                  : OSCrypt::DecryptString16(cipher_text, plain_text);
-#if BUILDFLAG(IS_CHROMEOS)
+#if BUILDFLAG(IS_ANDROID) || BUILDFLAG(IS_CHROMEOS)
   // If decryption failed, we assume it was because the value was actually a
   // plain-text password which started with "v10".
   // TODO(crbug.com/41457193): Remove this when there isn't a mix of plain-text
@@ -77,7 +77,7 @@ EncryptionResult LoginDatabase::DecryptedString(
         PasswordDecryptionResult::kSucceededByIgnoringFailure);
     return EncryptionResult::kSuccess;
   }
-#endif  // BUILDFLAG(IS_CHROMEOS)
+#endif  // BUILDFLAG(IS_ANDROID) || BUILDFLAG(IS_CHROMEOS)
   RecordPasswordDecryptionResult(decryption_success
                                      ? PasswordDecryptionResult::kSucceeded
                                      : PasswordDecryptionResult::kFailed);
diff --git a/components/password_manager/core/browser/password_store_factory_util.cc b/components/password_manager/core/browser/password_store_factory_util.cc
index 3dc7064967e4f..7aa4b63a33ea5 100644
--- a/components/password_manager/core/browser/password_store_factory_util.cc
+++ b/components/password_manager/core/browser/password_store_factory_util.cc
@@ -21,15 +21,17 @@
 #include "components/password_manager/core/common/password_manager_pref_names.h"
 #include "components/prefs/pref_service.h"
 
-#if !BUILDFLAG(IS_ANDROID)
+#include "components/password_manager/core/browser/password_manager_buildflags.h"
+
+#if !BUILDFLAG(IS_ANDROID) || BUILDFLAG(USE_LOGIN_DATABASE_AS_BACKEND)
 #include "components/password_manager/core/browser/password_store/login_database.h"
-#endif  // !BUILDFLAG(IS_ANDROID)
+#endif  // !BUILDFLAG(IS_ANDROID) || BUILDFLAG(USE_LOGIN_DATABASE_AS_BACKEND)
 
 namespace password_manager {
 
 namespace {
 
-#if !BUILDFLAG(IS_ANDROID)
+#if !BUILDFLAG(IS_ANDROID) || BUILDFLAG(USE_LOGIN_DATABASE_AS_BACKEND)
 LoginDatabase::DeletingUndecryptablePasswordsEnabled GetPolicyFromPrefs(
     PrefService* prefs) {
 #if BUILDFLAG(IS_WIN) || BUILDFLAG(IS_MAC) || BUILDFLAG(IS_LINUX) || \
@@ -40,11 +42,11 @@ LoginDatabase::DeletingUndecryptablePasswordsEnabled GetPolicyFromPrefs(
   return LoginDatabase::DeletingUndecryptablePasswordsEnabled(true);
 #endif
 }
-#endif  // !BUILDFLAG(IS_ANDROID)
+#endif  // !BUILDFLAG(IS_ANDROID) || BUILDFLAG(USE_LOGIN_DATABASE_AS_BACKEND)
 
 }  // namespace
 
-#if !BUILDFLAG(IS_ANDROID)
+#if !BUILDFLAG(IS_ANDROID) || BUILDFLAG(USE_LOGIN_DATABASE_AS_BACKEND)
 std::unique_ptr<LoginDatabase> CreateLoginDatabase(
     password_manager::IsAccountStore is_account_store,
     const base::FilePath& db_directory,
@@ -55,7 +57,7 @@ std::unique_ptr<LoginDatabase> CreateLoginDatabase(
   return std::make_unique<LoginDatabase>(login_db_file_path, is_account_store,
                                          GetPolicyFromPrefs(prefs));
 }
-#endif  // !BUILDFLAG(IS_ANDROID)
+#endif  // !BUILDFLAG(IS_ANDROID) || BUILDFLAG(USE_LOGIN_DATABASE_AS_BACKEND)
 
 // TODO(http://crbug.com/890318): Add unitests to check cleaners are correctly
 // created.
diff --git a/components/password_manager/core/browser/password_store_factory_util.h b/components/password_manager/core/browser/password_store_factory_util.h
index 25290d3bb3750..833c249077c72 100644
--- a/components/password_manager/core/browser/password_store_factory_util.h
+++ b/components/password_manager/core/browser/password_store_factory_util.h
@@ -13,9 +13,11 @@
 #include "build/build_config.h"
 #include "components/password_manager/core/browser/password_store/password_store_interface.h"
 
-#if !BUILDFLAG(IS_ANDROID)
+#include "components/password_manager/core/browser/password_manager_buildflags.h"
+
+#if !BUILDFLAG(IS_ANDROID) || BUILDFLAG(USE_LOGIN_DATABASE_AS_BACKEND)
 #include "components/password_manager/core/browser/password_store/login_database.h"
-#endif  // !BUILDFLAG(IS_ANDROID)
+#endif  // !BUILDFLAG(IS_ANDROID) || BUILDFLAG(USE_LOGIN_DATABASE_AS_BACKEND)
 
 namespace network::mojom {
 class NetworkContext;
@@ -27,7 +29,7 @@ namespace password_manager {
 
 class CredentialsCleanerRunner;
 
-#if !BUILDFLAG(IS_ANDROID)
+#if !BUILDFLAG(IS_ANDROID) || BUILDFLAG(USE_LOGIN_DATABASE_AS_BACKEND)
 // Creates a LoginDatabase. Looks in |db_directory| for the database file.
 // Does not call LoginDatabase::Init() -- to avoid UI jank, that needs to be
 // called by PasswordStore::Init() on the background thread.
@@ -35,7 +37,7 @@ std::unique_ptr<LoginDatabase> CreateLoginDatabase(
     password_manager::IsAccountStore is_account_store,
     const base::FilePath& db_directory,
     PrefService* prefs);
-#endif  // !BUILDFLAG(IS_ANDROID)
+#endif  // !BUILDFLAG(IS_ANDROID) || BUILDFLAG(USE_LOGIN_DATABASE_AS_BACKEND)
 
 // This function handles the following clean-ups of credentials:
 // (1) Removing blocklisted duplicates: if two blocklisted credentials have the
