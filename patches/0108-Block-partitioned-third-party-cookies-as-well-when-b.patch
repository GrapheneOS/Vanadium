From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: fgei <fgei@gmail.com>
Date: Sat, 15 Apr 2023 04:04:47 +0000
Subject: [PATCH] Block partitioned third party cookies as well when blocking
 third party cookies

---
 services/network/cookie_settings.cc | 18 ++++++++++++++++--
 1 file changed, 16 insertions(+), 2 deletions(-)

diff --git a/services/network/cookie_settings.cc b/services/network/cookie_settings.cc
index 23c2e35ccc4e9..37456a26ab564 100644
--- a/services/network/cookie_settings.cc
+++ b/services/network/cookie_settings.cc
@@ -30,6 +30,11 @@
 namespace network {
 namespace {
 
+bool IsThirdPartyAllowed(const ContentSettingPatternSource& setting) {
+  return setting.primary_pattern.MatchesAllHosts() &&
+         !setting.secondary_pattern.MatchesAllHosts();
+}
+
 const ContentSettingPatternSource* FindMatchingSetting(
     const GURL& primary_url,
     const GURL& secondary_url,
@@ -189,7 +194,8 @@ CookieSettings::GetThirdPartyBlockingScope(const GURL& first_party_url) const {
   // partitioned cross-site cookies.
   if (const ContentSettingPatternSource* match = FindMatchingSetting(
           first_party_url, first_party_url, content_settings_);
-      !match || match->GetContentSetting() == CONTENT_SETTING_ALLOW) {
+      match && IsThirdPartyAllowed(*match) &&
+      match->GetContentSetting() == CONTENT_SETTING_ALLOW) {
     return ThirdPartyBlockingScope::kUnpartitionedOnly;
   }
   return ThirdPartyBlockingScope::kUnpartitionedAndPartitioned;
@@ -201,9 +207,17 @@ CookieSettings::GetCookieSettingWithMetadata(
     const net::SiteForCookies& site_for_cookies,
     const url::Origin* top_frame_origin,
     net::CookieSettingOverrides overrides) const {
-  return GetCookieSettingInternal(
+  CookieSettingWithMetadata orig_setting_with_metadata = GetCookieSettingInternal(
       url, GetFirstPartyURL(site_for_cookies, top_frame_origin),
       IsThirdPartyRequest(url, site_for_cookies), overrides, nullptr);
+  const GURL& first_party_url = GetFirstPartyURL(site_for_cookies, top_frame_origin);
+  bool is_third_party_request = IsThirdPartyRequest(url, site_for_cookies);
+  ContentSetting orig_cookie_setting = orig_setting_with_metadata.cookie_setting();
+  if (orig_cookie_setting == CONTENT_SETTING_BLOCK && is_third_party_request) {
+    return {orig_cookie_setting, GetThirdPartyBlockingScope(first_party_url),
+        orig_setting_with_metadata.is_explicit_setting()};
+  }
+  return orig_setting_with_metadata;
 }
 
 bool CookieSettings::AnnotateAndMoveUserBlockedCookies(
