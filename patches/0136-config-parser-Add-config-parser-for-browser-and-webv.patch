From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: fgei <fgei@gmail.com>
Date: Fri, 29 Dec 2023 05:21:43 +0000
Subject: [PATCH] config-parser: Add config parser for browser and webview

---
 vanadium/android_config/proto/BUILD.gn        |  10 +
 .../vanadium/config/VanadiumConfParser.java   | 534 ++++++++++++++++++
 2 files changed, 544 insertions(+)
 create mode 100644 vanadium/android_config/proto/java/src/app/vanadium/config/VanadiumConfParser.java

diff --git a/vanadium/android_config/proto/BUILD.gn b/vanadium/android_config/proto/BUILD.gn
index e3cf1229f8920..ae2627740c4e0 100644
--- a/vanadium/android_config/proto/BUILD.gn
+++ b/vanadium/android_config/proto/BUILD.gn
@@ -51,3 +51,13 @@ action("config_generation") {
     ":config_generator_java",
   ]
 }
+
+android_library("browser_config_parser_java") {
+  sources = [
+    "java/src/app/vanadium/config/VanadiumConfParser.java",
+  ]
+  deps = [
+    ":config_proto_java",
+    "//vanadium/android_config:configinfo_java",
+  ]
+}
diff --git a/vanadium/android_config/proto/java/src/app/vanadium/config/VanadiumConfParser.java b/vanadium/android_config/proto/java/src/app/vanadium/config/VanadiumConfParser.java
new file mode 100644
index 0000000000000..c056faacb11c4
--- /dev/null
+++ b/vanadium/android_config/proto/java/src/app/vanadium/config/VanadiumConfParser.java
@@ -0,0 +1,534 @@
+package app.vanadium.config;
+
+import android.content.BroadcastReceiver;
+import android.content.Context;
+import android.content.Intent;
+import android.content.IntentFilter;
+import android.content.pm.PackageInfo;
+import android.content.pm.PackageManager;
+import android.os.Build;
+import android.os.PatternMatcher;
+import android.os.Process;
+import android.util.ArrayMap;
+import android.util.Log;
+import android.util.SparseArray;
+
+import com.google.protobuf.ByteString;
+
+import java.io.IOException;
+import java.io.InputStream;
+import java.util.HashSet;
+import java.util.List;
+import java.util.Map;
+import java.util.Set;
+import java.util.concurrent.ExecutionException;
+import java.util.concurrent.ExecutorService;
+import java.util.concurrent.Executors;
+import java.util.concurrent.Future;
+import java.util.function.Consumer;
+import java.util.zip.ZipEntry;
+import java.util.zip.ZipFile;
+
+import app.vanadium.config.proto.VanadiumConfigProto.Component;
+import app.vanadium.config.proto.VanadiumConfigProto.Component.ComponentApkSpec;
+import app.vanadium.config.proto.VanadiumConfigProto.Component.ComponentType;
+import app.vanadium.config.proto.VanadiumConfigProto.Config;
+import app.vanadium.config.proto.VanadiumConfigProto.Configs;
+import app.vanadium.config.proto.VanadiumConfigProto.Flag;
+import app.vanadium.config.proto.VanadiumConfigProto.Flag.FlagType;
+import app.vanadium.config.proto.VanadiumConfigProto.Spec;
+import app.vanadium.config.proto.VanadiumConfigProto.Spec.SpecType;
+
+public final class VanadiumConfParser {
+
+    private static final String TAG = "cr_VanadiumConfParser";
+
+    private static final ExecutorService executor = Executors.newSingleThreadExecutor();
+
+    private static final class ParsedConfigs {
+
+        private final SparseArray<ParsedFlagSet> flags;
+        private final SparseArray<ParsedComponent> components;
+        private final long configVersionCode;
+        private final String configApkFilePath;
+        private final boolean hasOtherComponentApks;
+
+        ParsedConfigs(SparseArray<ParsedFlagSet> flags, SparseArray<ParsedComponent> components,
+                      long configVersionCode, String configApkFilePath, boolean hasOtherComponentApks) {
+            this.flags = flags;
+            this.components = components;
+            this.configVersionCode = configVersionCode;
+            this.configApkFilePath = configApkFilePath;
+            this.hasOtherComponentApks = hasOtherComponentApks;
+        }
+
+        private ParsedFlagSet getFlagSetOrDefault(FlagType flagType) {
+            return flags.get(flagType.getNumber(), ParsedFlagSet.EMPTY);
+        }
+
+        private ParsedComponent getComponentOrDefault(ComponentType componentType) {
+            return components.get(componentType.getNumber(), ParsedComponent.EMPTY);
+        }
+
+        private static final ParsedConfigs EMPTY = new ParsedConfigs(
+                new SparseArray<>(0), new SparseArray<>(0),
+                -1L, null, false);
+    }
+
+    private static final class ParsedComponent {
+        private final ComponentType componentType;
+        private final long componentVersionCode;
+        private final String componentFileName;
+        private final String componentApkPkgName;
+        private final String componentApkFilePath;
+
+        private volatile Future<byte[]> componentByteArray;
+        private volatile byte[] cachedComponentByteArray;
+
+        private ParsedComponent(Component component, String apkFilePath) {
+            this.componentType = component.getComponentType();
+            this.componentVersionCode = component.getVersionCode();
+            this.componentFileName = component.getComponentFileName();
+            this.componentApkPkgName = component.getApkSpec().getPkgName();
+            this.componentApkFilePath = apkFilePath;
+            this.componentByteArray = executor.submit(this::getByteArrayForComponentInternal);
+        }
+
+        private static final ParsedComponent EMPTY = new ParsedComponent(Component.getDefaultInstance(), null);
+
+        private byte[] getByteArrayForComponentInternal() {
+            if (componentFileName == null) {
+                Log.e(TAG, "component file name not provided");
+                return null;
+            }
+
+            if (componentApkFilePath == null) {
+                Log.d(TAG, "No file path provided");
+                return null;
+            }
+
+            try (ZipFile f = new ZipFile(componentApkFilePath)) {
+                ZipEntry e = f.getEntry(componentFileName);
+                if (e == null) {
+                    Log.e(TAG, "Component file not found inside the component apk");
+                    return null;
+                }
+
+                try (InputStream inputStream = f.getInputStream(e)) {
+                    if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.TIRAMISU) {
+                        return inputStream.readAllBytes();
+                    }
+
+                    return ByteString.readFrom(inputStream).toByteArray();
+                }
+            } catch (IOException ignored) {
+                Log.e(TAG, "unable to read zip file");
+                return null;
+            }
+        }
+
+        private byte[] getComponentByteArray() {
+            byte[] curComponentByteArray = cachedComponentByteArray;
+            if (curComponentByteArray != null) {
+                if (ConfigInfo.IS_DEBUG) {
+                    Log.i(TAG, "value has been cached for " + componentType.toString());
+                }
+                return curComponentByteArray;
+            }
+
+            try {
+                curComponentByteArray = this.componentByteArray.get();
+                if (componentByteArray.isCancelled()) {
+                    componentByteArray = executor.submit(this::getByteArrayForComponentInternal);
+                }
+                cachedComponentByteArray = curComponentByteArray;
+                return curComponentByteArray;
+            } catch (ExecutionException e) {
+                Log.e(TAG, "unexpected error from value retrieval", e);
+                return null;
+            } catch (InterruptedException e) {
+                Log.e(TAG, "thread interrupted", e);
+                return null;
+            }
+        }
+    }
+
+    private static final class ParsedFlagSet {
+        private final FlagType flagType;
+        private final ArrayMap<String, Set<String>> flagSet;
+        private ParsedFlagSet(FlagType flagType, ArrayMap<String, Set<String>> flagSet) {
+            this.flagType = flagType;
+            this.flagSet = flagSet;
+        }
+
+        private static final ParsedFlagSet EMPTY = new ParsedFlagSet(FlagType.UNKNOWN, new ArrayMap<>());
+    }
+
+    private static volatile Future<ParsedConfigs> futureParsedConfigs;
+    private static volatile ParsedConfigs parsedConfigs;
+
+    public static Map<String, Set<String>> getFlagsFor(FlagType flagType) {
+        if (!isInitialized()) {
+            Log.e(TAG, "No parsed config found, parsing not initialized");
+            return Map.of();
+        }
+
+        ParsedFlagSet parsedFlagSet = getParsedConfigs().getFlagSetOrDefault(flagType);
+        if (parsedFlagSet.flagType != flagType) {
+            Log.e(TAG, "", new IllegalStateException("Mismatched flag type"));
+            return Map.of();
+        }
+
+        return parsedFlagSet.flagSet;
+    }
+
+    public static byte[] getByteArrayForComponent(ComponentType componentType) {
+        if (!isInitialized()) {
+            Log.e(TAG, "No parsed config found, parsing not initialized");
+            return null;
+        }
+
+        ParsedComponent parsedComponent = getParsedConfigs().getComponentOrDefault(componentType);
+        if (parsedComponent.componentType != componentType) {
+            Log.e(TAG, "", new IllegalStateException("Mismatched component type"));
+            return null;
+        }
+
+        return parsedComponent.getComponentByteArray();
+    }
+
+    public static long getVersionCodeForComponent(ComponentType componentType) {
+        if (!isInitialized()) {
+            Log.e(TAG, "No parsed config found, parsing not initialized");
+            return -1L;
+        }
+
+        ParsedComponent parsedComponent = getParsedConfigs().components.get(componentType.getNumber(), ParsedComponent.EMPTY);
+        if (parsedComponent.componentType != componentType) {
+            Log.e(TAG, "", new IllegalStateException("Mismatched component type"));
+            return -1L;
+        }
+
+        return parsedComponent.componentVersionCode;
+    }
+
+    public static void initForBrowser(Context ctx) {
+        init(ctx, SpecType.BROWSER);
+    }
+
+    public static void initForWebView(Context ctx) {
+        init(ctx, SpecType.WEBVIEW);
+    }
+
+    public static boolean isInitialized() {
+        if (!isEligible()) {
+            return false;
+        }
+
+        if (Process.isIsolated()) {
+            return false;
+        }
+
+        return getParsedConfigs() != null;
+    }
+
+    private static void init(Context ctx, SpecType specType) {
+        if (!isEligible()) {
+            Log.d(TAG, "config packages feature is unsupported on current process or OS version");
+            return;
+        }
+
+        if (!verifyConfigPackage(ctx)) {
+            Log.w(TAG, "not initializing parsing with unverified config package");
+            return;
+        }
+
+        if (isInitialized()) {
+            Log.w(TAG, "Not reinitializing on already parsed config package");
+            return;
+        }
+
+        parseInBackground(ctx, specType);
+
+        ParsedConfigs curConfigs = getParsedConfigs();
+        if (curConfigs != null && curConfigs.hasOtherComponentApks
+                && curConfigs.components.size() > 0
+                && Build.VERSION.SDK_INT >= Build.VERSION_CODES.TIRAMISU) {
+            IntentFilter filter = new IntentFilter();
+            filter.addAction(Intent.ACTION_PACKAGE_REPLACED);
+            filter.addDataScheme("package");
+            filter.addDataSchemeSpecificPart(ConfigInfo.CONFIG_APK_PACKAGE, PatternMatcher.PATTERN_LITERAL);
+
+            int numComponents = curConfigs.components.size();
+            for (int i = 0; i < numComponents; i++) {
+                ParsedComponent parsedComponent = curConfigs.components.valueAt(i);
+                if (parsedComponent == null || parsedComponent == ParsedComponent.EMPTY) {
+                    continue;
+                }
+
+                if (parsedComponent.componentApkPkgName.isEmpty()) {
+                    continue;
+                }
+
+                filter.addDataSchemeSpecificPart(
+                        parsedComponent.componentApkPkgName, PatternMatcher.PATTERN_LITERAL);
+            }
+
+            ctx.registerReceiver(new BroadcastReceiver() {
+                @Override
+                public void onReceive(Context context, Intent intent) {
+                    parseInBackground(ctx, specType);
+                }
+            }, filter, Context.RECEIVER_NOT_EXPORTED);
+        }
+    }
+
+    private static boolean verifyConfigPackage(Context ctx) {
+        return verifyPackage(ctx, ConfigInfo.CONFIG_APK_PACKAGE, ConfigInfo.CONFIG_APK_SHA256_CERTDIGEST);
+    }
+
+    private static boolean verifyPackage(Context ctx, String pkgName, byte[] sha256CertDigestBytes) {
+        if (!isEligible()) {
+            return false;
+        }
+
+        return ctx.getPackageManager().hasSigningCertificate(
+                pkgName, sha256CertDigestBytes, PackageManager.CERT_INPUT_SHA256);
+    }
+
+    private static ParsedConfigs getParsedConfigs() {
+        if (futureParsedConfigs == null) {
+            if (ConfigInfo.IS_DEBUG) {
+                Log.i(TAG, "config has " + ((parsedConfigs == null) ? "not yet " : "") + "been parsed");
+            }
+
+            return parsedConfigs;
+        }
+
+        try {
+            Future<ParsedConfigs> curFutureParsedConfigs = futureParsedConfigs;
+            parsedConfigs = curFutureParsedConfigs.get();
+            futureParsedConfigs = null;
+        } catch (ExecutionException e) {
+            Log.e(TAG, "Config app failed to be parsed", e);
+        } catch (InterruptedException e) {
+            Log.e(TAG, "Thread has been interrupted for config parsing", e);
+        }
+
+        return parsedConfigs;
+    }
+
+    private static void parseInBackground(Context ctx, SpecType specType) {
+        futureParsedConfigs = executor.submit(() -> {
+            parsedConfigs = parse(ctx, specType);
+            return parsedConfigs;
+        });
+    }
+
+    private static ParsedConfigs parse(Context ctx, SpecType specType) {
+        if (!isEligible()) {
+            Log.d(TAG, "Config apk feature is unsupported below android 13");
+            return null;
+        }
+
+        PackageInfo unverifiedConfigPkgInfo = getPackageInfoOrNull(
+                ctx, ConfigInfo.CONFIG_APK_PACKAGE, PackageManager.MATCH_DISABLED_COMPONENTS);
+        if (unverifiedConfigPkgInfo == null) {
+            Log.e(TAG, "unverified config package not found", new IllegalStateException());
+            return null;
+        }
+
+        if (!verifyConfigPackage(ctx)) {
+            Log.w(TAG, "not parsing config with unverified config package");
+            return ParsedConfigs.EMPTY;
+        }
+
+        PackageInfo selfPkgInfo = getPackageInfoOrNull(ctx, ctx.getPackageName(), 0);
+        if (selfPkgInfo == null) {
+            Log.wtf(TAG, "", new IllegalStateException("must be able to find own package"));
+            return ParsedConfigs.EMPTY;
+        }
+
+        PackageInfo configPkgInfo = getPackageInfoOrNull(
+                ctx, ConfigInfo.CONFIG_APK_PACKAGE, PackageManager.MATCH_DISABLED_COMPONENTS);
+        if (configPkgInfo == null) {
+            Log.e(TAG, "config package not found", new IllegalStateException("must be able to find config package once verified"));
+            return ParsedConfigs.EMPTY;
+        }
+
+        final long configVersionCode = configPkgInfo.getLongVersionCode();
+
+        if (parsedConfigs != null) {
+            if (configVersionCode <= parsedConfigs.configVersionCode) {
+                if (!parsedConfigs.hasOtherComponentApks) {
+                    Log.w(TAG, "Only update to newer versions are allowed to update parsed config," +
+                            " returning the previously parsed config");
+                    return parsedConfigs;
+                }
+            }
+        }
+
+        String configApkFilePath = configPkgInfo.applicationInfo.publicSourceDir;
+        Configs configs;
+        try (ZipFile f = new ZipFile(configApkFilePath)) {
+            ZipEntry e = f.getEntry("proto_config.pb2");
+            if (e == null) {
+                Log.e(TAG, "missing config for runtime flag changes");
+                return ParsedConfigs.EMPTY;
+            }
+            try (InputStream inputStream = f.getInputStream(e)) {
+                configs = Configs.parseFrom(inputStream);
+            }
+        } catch (IOException ignored) {
+            Log.e(TAG, "unable to read zip file");
+            return ParsedConfigs.EMPTY;
+        }
+
+        {
+            boolean hasOtherComponentApks = false;
+            final SparseArray<ParsedFlagSet> pendingFlags = new SparseArray<>();
+            final SparseArray<ParsedComponent> pendingComponents = new SparseArray<>();
+
+            final ArrayMap<String, Set<String>> enabledFeatureFlags = new ArrayMap<>();
+            final ArrayMap<String, Set<String>> disabledFeatureFlags = new ArrayMap<>();
+            final ArrayMap<String, Set<String>> enabledSwitchFlags = new ArrayMap<>();
+            final ArrayMap<String, Set<String>> disabledSwitchFlags = new ArrayMap<>();
+
+            for (Config config : configs.getConfigsList()) {
+                Spec spec = config.getSpec();
+                final long minVersionCode = spec.getMinVersion();
+                final long maxVersionCode = spec.getMaxVersion();
+                final long curVersionCode = selfPkgInfo.getLongVersionCode();
+
+                if (minVersionCode != 0 && minVersionCode > curVersionCode) {
+                    continue;
+                } else if (maxVersionCode != 0 && maxVersionCode < curVersionCode) {
+                    continue;
+                } else if ((spec.getSpecTypes() & (1L << specType.getNumber())) == 0) {
+                    continue;
+                }
+
+                Consumer<List<Flag>> appendFlagsToTypes = flagList -> {
+                    for (Flag flag : flagList) {
+                        final String flagName = flag.getFlagName();
+                        final Set<String> flagValues = new HashSet<>(flag.getFlagValueList());
+                        final FlagType flagType = flag.getFlagType();
+                        if (flagType == FlagType.ENABLED_FEATURE) {
+                            enabledFeatureFlags.put(flagName, flagValues);
+                        } else if (flagType == FlagType.DISABLED_FEATURE) {
+                            disabledFeatureFlags.put(flagName, flagValues);
+                        } else if (flagType == FlagType.ENABLED_SWITCH) {
+                            enabledSwitchFlags.put(flagName, flagValues);
+                        } else if (flagType == FlagType.DISABLED_SWITCH) {
+                            disabledSwitchFlags.put(flagName, flagValues);
+                        } else {
+                            throw new IllegalStateException();
+                        }
+                    }
+                };
+
+                appendFlagsToTypes.accept(config.getFlagsList());
+
+                for (Component component : config.getComponentsList()) {
+                    int componentType = component.getComponentType().getNumber();
+                    String componentApkFilePath = configApkFilePath;
+                    if (ComponentType.forNumber(componentType) == null) {
+                        continue;
+                    }
+
+                    // If there is a specified ComponentApkSpec, check if it has non-empty, non-default values.
+                    if (component.hasApkSpec()) {
+                        ComponentApkSpec componentApkSpec = component.getApkSpec();
+                        String componentPkgName = componentApkSpec.getPkgName();
+                        List<ByteString> sha256Certs = componentApkSpec.getSha256CertsList();
+                        // No need to verify the config app again, default instance implies it has the component file.
+                        // Also, no supplied component package name implies the config app has the component file.
+                        // Config app will be attached later as dependency of current process.
+                        final boolean componentFromConfigApp =
+                                componentApkSpec.equals(ComponentApkSpec.getDefaultInstance())
+                                        || componentPkgName.isEmpty()
+                                        || componentPkgName.equals(ConfigInfo.CONFIG_APK_PACKAGE);
+
+                        boolean verified = componentFromConfigApp;
+                        for (int i = 0; i < sha256Certs.size(); i++) {
+                            if (verified) {
+                                break;
+                            }
+
+                            byte[] sha256CertBytes = sha256Certs.get(i).toByteArray();
+                            if (verifyPackage(ctx, componentPkgName, sha256CertBytes)) {
+                                verified = true;
+                                break;
+                            }
+                        }
+
+                        if (!verified) {
+                            continue;
+                        }
+
+                        if (!componentFromConfigApp) {
+                            PackageInfo componentApkPkgInfo = getPackageInfoOrNull(ctx,
+                                    componentPkgName, PackageManager.MATCH_DISABLED_COMPONENTS);
+                            if (componentApkPkgInfo == null || componentApkPkgInfo.applicationInfo == null) {
+                                Log.w(TAG, "component package " + componentPkgName + " not found, not adding the component");
+                                continue;
+                            }
+
+                            attachPackageAsCurrentProcessDependency(ctx, componentPkgName);
+
+                            hasOtherComponentApks = true;
+                            componentApkFilePath = componentApkPkgInfo.applicationInfo.publicSourceDir;
+                        }
+                    }
+
+                    pendingComponents.put(componentType, new ParsedComponent(component, componentApkFilePath));
+                    appendFlagsToTypes.accept(component.getDependentFlagsList());
+                }
+            }
+
+            pendingFlags.set(FlagType.ENABLED_FEATURE.getNumber(), new ParsedFlagSet(FlagType.ENABLED_FEATURE, enabledFeatureFlags));
+            pendingFlags.set(FlagType.DISABLED_FEATURE.getNumber(), new ParsedFlagSet(FlagType.DISABLED_FEATURE, disabledFeatureFlags));
+            pendingFlags.set(FlagType.ENABLED_SWITCH.getNumber(), new ParsedFlagSet(FlagType.ENABLED_SWITCH, enabledSwitchFlags));
+            pendingFlags.set(FlagType.DISABLED_SWITCH.getNumber(), new ParsedFlagSet(FlagType.DISABLED_SWITCH, disabledSwitchFlags));
+
+            // Restart is required for config changes to take effect.
+            attachPackageAsCurrentProcessDependency(ctx, ConfigInfo.CONFIG_APK_PACKAGE);
+            return new ParsedConfigs(pendingFlags, pendingComponents, configVersionCode,
+                    configApkFilePath, hasOtherComponentApks);
+        }
+    }
+
+    // Attach the package as dependency of the current process to restart the browser
+    // and webview when the provided package is updated.
+    private static void attachPackageAsCurrentProcessDependency(Context ctx, String pkgName) {
+        try {
+            Context configApkContext = ctx.createPackageContext(pkgName,
+                    Context.CONTEXT_INCLUDE_CODE | Context.CONTEXT_IGNORE_SECURITY);
+            // The method that facilitates attaching a package as dependency of current process.
+            configApkContext.getClassLoader();
+        } catch (PackageManager.NameNotFoundException e) {
+            Log.w(TAG, "App " + pkgName + " failed to be attached as dependency" +
+                    " of browser or webview process", e);
+        }
+
+    }
+
+    private static PackageInfo getPackageInfoOrNull(Context ctx, String pkgName, int flags) {
+        if (!isEligible()) {
+            return null;
+        }
+
+        try {
+            return ctx.getPackageManager().getPackageInfo(pkgName, flags);
+        } catch (PackageManager.NameNotFoundException e) {
+            Log.e(TAG, "package " + pkgName + " not found", e);
+            return null;
+        }
+    }
+
+    private static boolean isEligible() {
+        return Build.VERSION.SDK_INT >= Build.VERSION_CODES.Q;
+    }
+
+    private VanadiumConfParser() {}
+}
\ No newline at end of file
