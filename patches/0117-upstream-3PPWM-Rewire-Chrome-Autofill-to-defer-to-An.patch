From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: Friedrich Horschig <fhorschig@chromium.org>
Date: Tue, 12 Mar 2024 06:48:16 +0000
Subject: [PATCH] upstream: [3PPWM] Rewire Chrome Autofill to defer to Android

This CL ensures that Chrome Autofill is inactive and Android Autofill
takes on the filling.
That means an unavailable client or accessory is expected in all
components as soon as the flag is enabled.

Feature Guard: AutofillVirtualViewStructureAndroid
Context: go/3ppwm-dd
Demo: go/scrcast/NDY4MzczODQzNzkxMDUyOHwwZjVlNmE5NC1lMA

Verified with a couple of providers (BW, GPM, DL, RF)

Fixed: 326231439, 308430023, 308420431
Change-Id: I8b47aeab70f1d62d7e04e8312cee63dac58bb983
Reviewed-on: https://chromium-review.googlesource.com/c/chromium/src/+/5314306
Commit-Queue: Friedrich Horschig <fhorschig@chromium.org>
Reviewed-by: Christoph Schwering <schwering@google.com>
Reviewed-by: Dana Fried <dfried@chromium.org>
Cr-Commit-Position: refs/heads/main@{#1271394}
---
 .../fast_checkout/fast_checkout_tab_helper.cc |  6 +--
 .../autofill_popup_controller_impl.cc         | 46 ++++++++++++-------
 chrome/browser/ui/tab_helpers.cc              | 11 +++--
 3 files changed, 40 insertions(+), 23 deletions(-)

diff --git a/chrome/browser/fast_checkout/fast_checkout_tab_helper.cc b/chrome/browser/fast_checkout/fast_checkout_tab_helper.cc
index e034582870ba0..641e6c8cd99b7 100644
--- a/chrome/browser/fast_checkout/fast_checkout_tab_helper.cc
+++ b/chrome/browser/fast_checkout/fast_checkout_tab_helper.cc
@@ -45,9 +45,9 @@ void FastCheckoutTabHelper::DidStartNavigation(
   FetchCapabilities(url);
   if (autofill::ContentAutofillClient* client =
           autofill::ContentAutofillClient::FromWebContents(web_contents())) {
-    DCHECK(client->GetFastCheckoutClient());
-    client->GetFastCheckoutClient()->OnNavigation(url,
-                                                  IsCartOrCheckoutUrl(url));
+    if (auto* fast_checkout_client = client->GetFastCheckoutClient()) {
+      fast_checkout_client->OnNavigation(url, IsCartOrCheckoutUrl(url));
+    }
   }
 }
 
diff --git a/chrome/browser/ui/autofill/autofill_popup_controller_impl.cc b/chrome/browser/ui/autofill/autofill_popup_controller_impl.cc
index 6e3ac6dddcc13..55c1d76f994a8 100644
--- a/chrome/browser/ui/autofill/autofill_popup_controller_impl.cc
+++ b/chrome/browser/ui/autofill/autofill_popup_controller_impl.cc
@@ -206,9 +206,11 @@ void AutofillPopupControllerImpl::Show(
     }
 
 #if BUILDFLAG(IS_ANDROID)
-    ManualFillingController::GetOrCreate(web_contents_.get())
-        ->UpdateSourceAvailability(FillingSource::AUTOFILL,
-                                   !suggestions_.empty());
+    if (base::WeakPtr<ManualFillingController> manual_filling_controller =
+            ManualFillingController::GetOrCreate(web_contents_.get())) {
+      manual_filling_controller->UpdateSourceAvailability(
+          FillingSource::AUTOFILL, !suggestions_.empty());
+    }
 #endif
     if (!view_ || !view_->Show(autoselect_first_suggestion)) {
       return;
@@ -337,9 +339,12 @@ void AutofillPopupControllerImpl::OnSuggestionsChanged() {
 #if BUILDFLAG(IS_ANDROID)
   // Assume that suggestions are (still) available. If this is wrong, the method
   // |HideViewAndDie| will be called soon after and will hide all suggestions.
-  ManualFillingController::GetOrCreate(web_contents_.get())
-      ->UpdateSourceAvailability(FillingSource::AUTOFILL,
-                                 /*has_suggestions=*/true);
+  if (base::WeakPtr<ManualFillingController> manual_filling_controller =
+          ManualFillingController::GetOrCreate(web_contents_.get())) {
+    manual_filling_controller->UpdateSourceAvailability(
+        FillingSource::AUTOFILL,
+        /*has_suggestions=*/true);
+  }
 #endif
 
   if (view_) {
@@ -396,15 +401,17 @@ void AutofillPopupControllerImpl::AcceptSuggestion(int index,
   // reference.
   Suggestion suggestion = suggestions_[index];
 #if BUILDFLAG(IS_ANDROID)
-  auto mf_controller =
-      ManualFillingController::GetOrCreate(web_contents_.get());
-  // Accepting a suggestion should hide all suggestions. To prevent them from
-  // coming up in Multi-Window mode, mark the source as unavailable.
-  mf_controller->UpdateSourceAvailability(FillingSource::AUTOFILL,
-                                          /*has_suggestions=*/false);
-  mf_controller->Hide();
-
+  if (base::WeakPtr<ManualFillingController> manual_filling_controller =
+          ManualFillingController::GetOrCreate(web_contents_.get())) {
+    // Accepting a suggestion should hide all suggestions. To prevent them from
+    // coming up in Multi-Window mode, mark the source as unavailable.
+    manual_filling_controller->UpdateSourceAvailability(
+        FillingSource::AUTOFILL,
+        /*has_suggestions=*/false);
+    manual_filling_controller->Hide();
+  }
 #endif
+
   if (suggestion.popup_item_id == PopupItemId::kVirtualCreditCardEntry) {
     std::string event_name =
         suggestion.feature_for_iph ==
@@ -733,9 +740,14 @@ void AutofillPopupControllerImpl::HideViewAndDie() {
   // Mark the popup-like filling sources as unavailable.
   // Note: We don't invoke ManualFillingController::Hide() here, as we might
   // switch between text input fields.
-  ManualFillingController::GetOrCreate(web_contents_.get())
-      ->UpdateSourceAvailability(FillingSource::AUTOFILL,
-                                 /*has_suggestions=*/false);
+  if (web_contents_) {
+    if (base::WeakPtr<ManualFillingController> manual_filling_controller =
+            ManualFillingController::GetOrCreate(web_contents_.get())) {
+      manual_filling_controller->UpdateSourceAvailability(
+          FillingSource::AUTOFILL,
+          /*has_suggestions=*/false);
+    }
+  }
 #endif
 
   // TODO(crbug.com/1341374, crbug.com/1277218): Move this into the asynchronous
diff --git a/chrome/browser/ui/tab_helpers.cc b/chrome/browser/ui/tab_helpers.cc
index 2daaf7f1a6bdb..8f36e2ab8b300 100644
--- a/chrome/browser/ui/tab_helpers.cc
+++ b/chrome/browser/ui/tab_helpers.cc
@@ -86,7 +86,8 @@
 #include "chrome/browser/tpcd/support/validity_service.h"
 #include "chrome/browser/translate/chrome_translate_client.h"
 #include "chrome/browser/trusted_vault/trusted_vault_encryption_keys_tab_helper.h"
-#include "chrome/browser/ui/autofill/chrome_autofill_client.h"
+#include "chrome/browser/ui/autofill/autofill_client_provider.h"
+#include "chrome/browser/ui/autofill/autofill_client_provider_factory.h"
 #include "chrome/browser/ui/find_bar/find_bar_state.h"
 #include "chrome/browser/ui/focus_tab_after_navigation_helper.h"
 #include "chrome/browser/ui/passwords/manage_passwords_ui_controller.h"
@@ -363,13 +364,17 @@ void TabHelpers::AttachTabHelpers(WebContents* web_contents) {
                                                    optimization_guide_decider);
     }
   }
-  autofill::ChromeAutofillClient::CreateForWebContents(web_contents);
+  autofill::AutofillClientProvider& autofill_client_provider =
+      autofill::AutofillClientProviderFactory::GetForProfile(profile);
+  autofill_client_provider.CreateClientForWebContents(web_contents);
   if (breadcrumbs::IsEnabled(g_browser_process->local_state())) {
     BreadcrumbManagerTabHelper::CreateForWebContents(web_contents);
   }
   chrome::ChainedBackNavigationTracker::CreateForWebContents(web_contents);
   chrome_browser_net::NetErrorTabHelper::CreateForWebContents(web_contents);
-  ChromePasswordManagerClient::CreateForWebContents(web_contents);
+  if (!autofill_client_provider.uses_platform_autofill()) {
+    ChromePasswordManagerClient::CreateForWebContents(web_contents);
+  }
   ChromePasswordReuseDetectionManagerClient::CreateForWebContents(web_contents);
   CreateSubresourceFilterWebContentsHelper(web_contents);
 #if BUILDFLAG(ENABLE_RLZ)
