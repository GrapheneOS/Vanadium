From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: Friedrich Horschig <fhorschig@chromium.org>
Date: Fri, 8 Mar 2024 13:20:11 +0000
Subject: [PATCH] upstream: [Android][3PPWM] Factory to create correct client

Noop since this factory is only used in crrev.com/c/5314306.

See go/3ppwm-dd#heading=h.s0qbhft4nxzx:
For each tab, Chrome creates a new autofill client. Using the client
that support virtual view structures, Chrome requires
- the autofill.using_virtual_view_structure pref, and
- the AutofillVirtualViewStructureAndroid feature

If either is not enabled on startup, Chrome should default to the
client using the built-in autofill.

Bug: 308420431, 308430023
Change-Id: I7f5893f7f5132633394b1bad12286400770483be
Reviewed-on: https://chromium-review.googlesource.com/c/chromium/src/+/5343822
Reviewed-by: Jan Keitel <jkeitel@google.com>
Commit-Queue: Friedrich Horschig <fhorschig@chromium.org>
Reviewed-by: Ryan Sultanem <rsult@google.com>
Cr-Commit-Position: refs/heads/main@{#1270140}
---
 ...hrome_browser_main_extra_parts_profiles.cc |   2 +
 chrome/browser/ui/BUILD.gn                    |   5 +
 chrome/browser/ui/autofill/DEPS               |   1 +
 .../ui/autofill/autofill_client_provider.cc   |  56 ++++++++++
 .../ui/autofill/autofill_client_provider.h    |  47 ++++++++
 .../autofill_client_provider_factory.cc       |  45 ++++++++
 .../autofill_client_provider_factory.h        |  39 +++++++
 .../autofill_client_provider_unittest.cc      | 101 ++++++++++++++++++
 chrome/test/BUILD.gn                          |   1 +
 .../autofill/core/common/autofill_prefs.cc    |  13 ---
 .../core/common/autofill_prefs_unittest.cc    |  16 ---
 11 files changed, 297 insertions(+), 29 deletions(-)
 create mode 100644 chrome/browser/ui/autofill/autofill_client_provider.cc
 create mode 100644 chrome/browser/ui/autofill/autofill_client_provider.h
 create mode 100644 chrome/browser/ui/autofill/autofill_client_provider_factory.cc
 create mode 100644 chrome/browser/ui/autofill/autofill_client_provider_factory.h
 create mode 100644 chrome/browser/ui/autofill/autofill_client_provider_unittest.cc

diff --git a/chrome/browser/profiles/chrome_browser_main_extra_parts_profiles.cc b/chrome/browser/profiles/chrome_browser_main_extra_parts_profiles.cc
index 2cb2e323d1582..3b8562a1e7193 100644
--- a/chrome/browser/profiles/chrome_browser_main_extra_parts_profiles.cc
+++ b/chrome/browser/profiles/chrome_browser_main_extra_parts_profiles.cc
@@ -185,6 +185,7 @@
 #include "chrome/browser/tpcd/support/tpcd_support_service_factory.h"
 #include "chrome/browser/translate/translate_model_service_factory.h"
 #include "chrome/browser/translate/translate_ranker_factory.h"
+#include "chrome/browser/ui/autofill/autofill_client_provider_factory.h"
 #include "chrome/browser/ui/cookie_controls/cookie_controls_service_factory.h"
 #include "chrome/browser/ui/find_bar/find_bar_state_factory.h"
 #include "chrome/browser/ui/hats/hats_service_factory.h"
@@ -609,6 +610,7 @@ void ChromeBrowserMainExtraPartsProfiles::
   AutocompleteScoringModelServiceFactory::GetInstance();
 #endif
   autofill::AutocompleteHistoryManagerFactory::GetInstance();
+  autofill::AutofillClientProviderFactory::GetInstance();
   autofill::AutofillImageFetcherFactory::GetInstance();
   autofill::AutofillLogRouterFactory::GetInstance();
 #if BUILDFLAG(BUILD_WITH_TFLITE_LIB)
diff --git a/chrome/browser/ui/BUILD.gn b/chrome/browser/ui/BUILD.gn
index 768e11b9e5648..234755ce87e20 100644
--- a/chrome/browser/ui/BUILD.gn
+++ b/chrome/browser/ui/BUILD.gn
@@ -48,6 +48,10 @@ static_library("ui") {
 
     # All other app_list/ files go under is_chromeos_ash below.
     "autofill/autofill_bubble_handler.h",
+    "autofill/autofill_client_provider.cc",
+    "autofill/autofill_client_provider.h",
+    "autofill/autofill_client_provider_factory.cc",
+    "autofill/autofill_client_provider_factory.h",
     "autofill/autofill_keyboard_accessory_adapter.cc",
     "autofill/autofill_keyboard_accessory_adapter.h",
     "autofill/autofill_popup_controller.h",
@@ -984,6 +988,7 @@ static_library("ui") {
       "//chrome/browser/ui/android/autofill/internal:jni_headers",
       "//chrome/browser/ui/android/toolbar:jni_headers",
       "//chrome/browser/ui/webui/feed_internals:mojo_bindings",
+      "//components/android_autofill/browser:android",
       "//components/autofill/android:payments_autofill_cc",
       "//components/autofill/android:payments_jni_headers",
       "//components/browser_ui/accessibility/android",
diff --git a/chrome/browser/ui/autofill/DEPS b/chrome/browser/ui/autofill/DEPS
index 8247117a1f062..f939f7b608774 100644
--- a/chrome/browser/ui/autofill/DEPS
+++ b/chrome/browser/ui/autofill/DEPS
@@ -1,4 +1,5 @@
 include_rules = [
+  '+components/android_autofill',
   '+components/plus_addresses',
   '+components/webauthn',
   '+third_party/libaddressinput/chromium/addressinput_util.h',
diff --git a/chrome/browser/ui/autofill/autofill_client_provider.cc b/chrome/browser/ui/autofill/autofill_client_provider.cc
new file mode 100644
index 0000000000000..ec1ed8f2c2fba
--- /dev/null
+++ b/chrome/browser/ui/autofill/autofill_client_provider.cc
@@ -0,0 +1,56 @@
+// Copyright 2024 The Chromium Authors
+// Use of this source code is governed by a BSD-style license that can be
+// found in the LICENSE file.
+
+#include "chrome/browser/ui/autofill/autofill_client_provider.h"
+
+#include "base/memory/ptr_util.h"
+#include "chrome/browser/password_manager/chrome_password_manager_client.h"
+#include "chrome/browser/ui/autofill/chrome_autofill_client.h"
+#include "components/autofill/core/common/autofill_features.h"
+#include "components/autofill/core/common/autofill_prefs.h"
+#include "content/public/browser/web_contents.h"
+
+#if BUILDFLAG(IS_ANDROID)
+#include "chrome/browser/keyboard_accessory/android/manual_filling_controller_impl.h"
+#include "components/android_autofill/browser/android_autofill_client.h"
+#endif  // BUILDFLAG(IS_ANDROID)
+
+namespace autofill {
+namespace {
+
+bool UsesVirtualViewStructureForAutofill(const PrefService* prefs) {
+#if BUILDFLAG(IS_ANDROID)
+  if (!base::FeatureList::IsEnabled(
+          features::kAutofillVirtualViewStructureAndroid)) {
+    return false;
+  }
+
+  return prefs->GetBoolean(prefs::kAutofillUsingVirtualViewStructure);
+#else
+  return false;
+#endif  // BUILDFLAG(IS_ANDROID)
+}
+
+}  // namespace
+
+AutofillClientProvider::AutofillClientProvider(PrefService* prefs)
+    : uses_platform_autofill_(UsesVirtualViewStructureForAutofill(prefs)) {}
+
+AutofillClientProvider::~AutofillClientProvider() = default;
+
+void AutofillClientProvider::CreateClientForWebContents(
+    content::WebContents* web_contents) {
+  if (uses_platform_autofill()) {
+#if BUILDFLAG(IS_ANDROID)
+    android_autofill::AndroidAutofillClient::CreateForWebContents(
+        web_contents, [](const base::android::JavaRef<jobject>& jobj) {});
+#else
+    NOTREACHED();
+#endif
+  } else {
+    ChromeAutofillClient::CreateForWebContents(web_contents);
+  }
+}
+
+}  // namespace autofill
diff --git a/chrome/browser/ui/autofill/autofill_client_provider.h b/chrome/browser/ui/autofill/autofill_client_provider.h
new file mode 100644
index 0000000000000..2f002d15c19cf
--- /dev/null
+++ b/chrome/browser/ui/autofill/autofill_client_provider.h
@@ -0,0 +1,47 @@
+// Copyright 2024 The Chromium Authors
+// Use of this source code is governed by a BSD-style license that can be
+// found in the LICENSE file.
+
+#ifndef CHROME_BROWSER_UI_AUTOFILL_AUTOFILL_CLIENT_PROVIDER_H_
+#define CHROME_BROWSER_UI_AUTOFILL_AUTOFILL_CLIENT_PROVIDER_H_
+
+#include "components/keyed_service/core/keyed_service.h"
+
+class PrefService;
+
+namespace content {
+class WebContents;
+}
+
+namespace autofill {
+
+// This serves as a factory for Desktop and Android. It instantiates the correct
+// `ContentAutofillClient` for each `WebContents` instance.
+// The created client can depend on platform-specific prefs and features but is
+// always of the same type across all WebContents instances.
+class AutofillClientProvider : public KeyedService {
+ public:
+  explicit AutofillClientProvider(PrefService* prefs);
+  AutofillClientProvider(const AutofillClientProvider&) = delete;
+  AutofillClientProvider& operator=(const AutofillClientProvider&) = delete;
+  ~AutofillClientProvider() override;
+
+  // For the given `web_contents`, creates either a new
+  //  * ChromeAutofillClient if Chrome provides its own Autofill services, or
+  //  * AndroidAutofillClient if Chrome delegate autofilling to Android.
+  // It's a no-op if any ContentAutofillClient is already associated with the
+  // given `web_contents`.
+  void CreateClientForWebContents(content::WebContents* web_contents);
+
+  // The return value is constant once this provider has been created. The
+  // method returns true iff platform autofill should be used instead of
+  // built-in autofill.
+  bool uses_platform_autofill() const { return uses_platform_autofill_; }
+
+ private:
+  const bool uses_platform_autofill_;
+};
+
+}  // namespace autofill
+
+#endif  // CHROME_BROWSER_UI_AUTOFILL_AUTOFILL_CLIENT_PROVIDER_H_
diff --git a/chrome/browser/ui/autofill/autofill_client_provider_factory.cc b/chrome/browser/ui/autofill/autofill_client_provider_factory.cc
new file mode 100644
index 0000000000000..4476b450260e1
--- /dev/null
+++ b/chrome/browser/ui/autofill/autofill_client_provider_factory.cc
@@ -0,0 +1,45 @@
+// Copyright 2024 The Chromium Authors
+// Use of this source code is governed by a BSD-style license that can be
+// found in the LICENSE file.
+
+#include "chrome/browser/ui/autofill/autofill_client_provider_factory.h"
+
+#include <utility>
+
+#include "base/no_destructor.h"
+#include "chrome/browser/profiles/profile.h"
+#include "chrome/browser/profiles/profile_selections.h"
+#include "chrome/browser/ui/autofill/autofill_client_provider.h"
+#include "content/public/browser/browser_context.h"
+
+namespace autofill {
+
+// static
+AutofillClientProviderFactory* AutofillClientProviderFactory::GetInstance() {
+  static base::NoDestructor<AutofillClientProviderFactory> instance;
+  return instance.get();
+}
+
+// static
+AutofillClientProvider* AutofillClientProviderFactory::GetForProfile(
+    Profile* profile) {
+  return static_cast<AutofillClientProvider*>(
+      GetInstance()->GetServiceForBrowserContext(profile, /*create=*/true));
+}
+
+AutofillClientProviderFactory::AutofillClientProviderFactory()
+    : ProfileKeyedServiceFactory(
+          "AutofillClientProvider",
+          // TODO: crbug.com/326231439 - Other/no provider for OTR profiles?
+          ProfileSelections::BuildRedirectedInIncognito()) {}
+
+AutofillClientProviderFactory::~AutofillClientProviderFactory() = default;
+
+std::unique_ptr<KeyedService>
+AutofillClientProviderFactory::BuildServiceInstanceForBrowserContext(
+    content::BrowserContext* context) const {
+  return std::make_unique<AutofillClientProvider>(
+      Profile::FromBrowserContext(context)->GetPrefs());
+}
+
+}  // namespace autofill
diff --git a/chrome/browser/ui/autofill/autofill_client_provider_factory.h b/chrome/browser/ui/autofill/autofill_client_provider_factory.h
new file mode 100644
index 0000000000000..05715b675afb3
--- /dev/null
+++ b/chrome/browser/ui/autofill/autofill_client_provider_factory.h
@@ -0,0 +1,39 @@
+// Copyright 2024 The Chromium Authors
+// Use of this source code is governed by a BSD-style license that can be
+// found in the LICENSE file.
+
+#ifndef CHROME_BROWSER_UI_AUTOFILL_AUTOFILL_CLIENT_PROVIDER_FACTORY_H_
+#define CHROME_BROWSER_UI_AUTOFILL_AUTOFILL_CLIENT_PROVIDER_FACTORY_H_
+
+#include "base/no_destructor.h"
+#include "chrome/browser/profiles/profile_keyed_service_factory.h"
+
+class Profile;
+
+namespace autofill {
+class AutofillClientProvider;
+
+// A factory for creating one `AutofillClientProvider` per browser context. It's
+// lazily created on first use. It provides a provider for off-the-record tabs.
+class AutofillClientProviderFactory : public ProfileKeyedServiceFactory {
+ public:
+  static AutofillClientProviderFactory* GetInstance();
+  static AutofillClientProvider* GetForProfile(Profile* profile);
+
+  AutofillClientProviderFactory(const AutofillClientProviderFactory&) = delete;
+  AutofillClientProviderFactory& operator=(
+      const AutofillClientProviderFactory&) = delete;
+
+ private:
+  friend base::NoDestructor<AutofillClientProviderFactory>;
+
+  AutofillClientProviderFactory();
+  ~AutofillClientProviderFactory() override;
+
+  std::unique_ptr<KeyedService> BuildServiceInstanceForBrowserContext(
+      content::BrowserContext* profile) const override;
+};
+
+}  // namespace autofill
+
+#endif  // CHROME_BROWSER_UI_AUTOFILL_AUTOFILL_CLIENT_PROVIDER_FACTORY_H_
diff --git a/chrome/browser/ui/autofill/autofill_client_provider_unittest.cc b/chrome/browser/ui/autofill/autofill_client_provider_unittest.cc
new file mode 100644
index 0000000000000..341d9ee8348ec
--- /dev/null
+++ b/chrome/browser/ui/autofill/autofill_client_provider_unittest.cc
@@ -0,0 +1,101 @@
+// Copyright 2024 The Chromium Authors
+// Use of this source code is governed by a BSD-style license that can be
+// found in the LICENSE file.
+
+#include "chrome/browser/ui/autofill/autofill_client_provider.h"
+
+#include <memory>
+
+#include "base/test/mock_callback.h"
+#include "base/test/scoped_feature_list.h"
+#include "chrome/browser/ui/autofill/autofill_client_provider_factory.h"
+#include "chrome/test/base/testing_profile.h"
+#include "components/autofill/core/common/autofill_features.h"
+#include "components/autofill/core/common/autofill_prefs.h"
+#include "components/keyed_service/content/browser_context_dependency_manager.h"
+#include "components/prefs/pref_service.h"
+#include "content/public/test/browser_task_environment.h"
+#include "testing/gmock/include/gmock/gmock.h"
+#include "testing/gtest/include/gtest/gtest.h"
+
+#include "components/autofill/content/browser/test_content_autofill_client.h"
+
+namespace autofill {
+namespace {
+
+class AutofillClientProviderBaseTest : public testing::Test {
+ public:
+  void SetUp() override { profile_ = std::make_unique<TestingProfile>(); }
+
+  void TearDown() override {
+    profile_.reset();  // Important since it also resets the prefs.
+  }
+
+  TestingProfile* profile() { return profile_.get(); }
+
+  AutofillClientProvider* provider() {
+    return AutofillClientProviderFactory::GetForProfile(profile());
+  }
+
+  PrefService* prefs() { return profile()->GetPrefs(); }
+
+ private:
+  content::BrowserTaskEnvironment task_environment_;
+  std::unique_ptr<TestingProfile> profile_;
+};
+
+TEST_F(AutofillClientProviderBaseTest, ProvidesServiceInNonIncognito) {
+  ASSERT_TRUE(AutofillClientProviderFactory::GetForProfile(profile()));
+}
+
+TEST_F(AutofillClientProviderBaseTest, ProvidesServiceInIncognito) {
+  ASSERT_TRUE(AutofillClientProviderFactory::GetForProfile(
+      profile()->GetOffTheRecordProfile(
+          Profile::OTRProfileID::CreateUniqueForTesting(), true)));
+}
+
+TEST_F(AutofillClientProviderBaseTest, UsesBuiltInAutofillForDisabledPref) {
+#if BUILDFLAG(IS_ANDROID)
+  // Independent of platform or feature, a disabled pref means Chrome fills.
+  prefs()->SetBoolean(prefs::kAutofillUsingVirtualViewStructure, false);
+#endif  // BUILDFLAG(IS_ANDROID)
+  EXPECT_FALSE(provider()->uses_platform_autofill());
+}
+
+#if BUILDFLAG(IS_ANDROID)
+class AutofillClientProviderLegacyTest : public AutofillClientProviderBaseTest {
+ public:
+  void SetUp() override {
+    AutofillClientProviderBaseTest::SetUp();
+    scoped_feature_list_.InitAndDisableFeature(
+        features::kAutofillVirtualViewStructureAndroid);
+  }
+
+ private:
+  base::test::ScopedFeatureList scoped_feature_list_;
+};
+
+TEST_F(AutofillClientProviderLegacyTest, AlwaysCreatesChromeClient) {
+  // The pref is irrelevant if the feature is disabled.
+  prefs()->SetBoolean(prefs::kAutofillUsingVirtualViewStructure, true);
+  EXPECT_FALSE(provider()->uses_platform_autofill());
+}
+
+class AutofillClientProviderTest : public AutofillClientProviderBaseTest {
+ private:
+  base::test::ScopedFeatureList scoped_feature_list_{
+      features::kAutofillVirtualViewStructureAndroid};
+};
+
+TEST_F(AutofillClientProviderTest, CreateAndroidClientForEnabledPref) {
+  prefs()->SetBoolean(prefs::kAutofillUsingVirtualViewStructure, true);
+  EXPECT_TRUE(provider()->uses_platform_autofill());
+
+  // A changing pref doesn't change the clients for new tabs:
+  prefs()->SetBoolean(prefs::kAutofillUsingVirtualViewStructure, false);
+  EXPECT_TRUE(provider()->uses_platform_autofill());
+}
+#endif  // BUILDFLAG(IS_ANDROID)
+
+}  // namespace
+}  // namespace autofill
diff --git a/chrome/test/BUILD.gn b/chrome/test/BUILD.gn
index 5a3979bc9a1bb..e61e887e8562f 100644
--- a/chrome/test/BUILD.gn
+++ b/chrome/test/BUILD.gn
@@ -6405,6 +6405,7 @@ test("unit_tests") {
     "../browser/translate/fake_translate_agent.h",
     "../browser/translate/translate_service_unittest.cc",
     "../browser/trusted_vault/trusted_vault_encryption_keys_tab_helper_unittest.cc",
+    "../browser/ui/autofill/autofill_client_provider_unittest.cc",
     "../browser/ui/autofill/autofill_popup_controller_impl_unittest.cc",
     "../browser/ui/autofill/chrome_autofill_client_unittest.cc",
     "../browser/ui/autofill/payments/card_unmask_authentication_selection_dialog_controller_impl_unittest.cc",
diff --git a/components/autofill/core/common/autofill_prefs.cc b/components/autofill/core/common/autofill_prefs.cc
index b73aca8b2b782..4eda98fc42727 100644
--- a/components/autofill/core/common/autofill_prefs.cc
+++ b/components/autofill/core/common/autofill_prefs.cc
@@ -301,18 +301,5 @@ void ClearSyncTransportOptIns(PrefService* prefs) {
   prefs->SetDict(prefs::kAutofillSyncTransportOptIn, base::Value::Dict());
 }
 
-bool UsesVirtualViewStructureForAutofill(const PrefService* prefs) {
-#if BUILDFLAG(IS_ANDROID)
-  if (!base::FeatureList::IsEnabled(
-          features::kAutofillVirtualViewStructureAndroid)) {
-    return false;
-  }
-
-  return prefs->GetBoolean(kAutofillUsingVirtualViewStructure);
-#else
-  return false;
-#endif  // BUILDFLAG(IS_ANDROID)
-}
-
 }  // namespace prefs
 }  // namespace autofill
diff --git a/components/autofill/core/common/autofill_prefs_unittest.cc b/components/autofill/core/common/autofill_prefs_unittest.cc
index 4f2682e443770..ef9c8cf0772d1 100644
--- a/components/autofill/core/common/autofill_prefs_unittest.cc
+++ b/components/autofill/core/common/autofill_prefs_unittest.cc
@@ -156,21 +156,5 @@ TEST_F(AutofillPrefsTest, WalletSyncTransportPref_CanBeSetAndReadFromJSON) {
   EXPECT_EQ(dictionary, *base::JSONReader::Read(output_js));
 }
 
-// Tests that the generic viewstructure provider is restricted to Android.
-#if BUILDFLAG(IS_ANDROID)
-TEST_F(AutofillPrefsTest, AutofillWithVirtualViewsAffectsAndroidOnly) {
-  base::test::ScopedFeatureList scoped_feature_list(
-      features::kAutofillVirtualViewStructureAndroid);
-  EXPECT_FALSE(UsesVirtualViewStructureForAutofill(pref_service()));
-
-  pref_service()->SetBoolean(prefs::kAutofillUsingVirtualViewStructure, true);
-  EXPECT_TRUE(UsesVirtualViewStructureForAutofill(pref_service()));
-}
-#else   // not BUILDFLAG(IS_ANDROID)
-TEST_F(AutofillPrefsTest, AutofillWithVirtualViewsAffectsAndroidOnly) {
-  EXPECT_FALSE(UsesVirtualViewStructureForAutofill(pref_service()));
-}
-#endif  // BUILDFLAG(IS_ANDROID)
-
 }  // namespace prefs
 }  // namespace autofill
