From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: qua3k <qua3kr@gmail.com>
Date: Thu, 4 Nov 2021 00:00:00 +0000
Subject: [PATCH] Restriction of dynamic code execution via seccomp-bpf

This patchset is ported from Hexavalent Browser, authored by qua3k,
intended to restrict dynamic code generation on Android.

Original description from Hexavalent:

Forbid dynamic code generation on Linux

The Windows sandbox prevents dynamic code generation via setting
MITIGATION_DYNAMIC_CODE_DISABLE on certain processes; prevent dynamic
code generation in the same processes on Linux via seccomp-bpf.
---
 ...renderer_main_platform_delegate_android.cc | 28 ++++++++--
 .../seccomp-bpf-helpers/baseline_policy.cc    |  6 +--
 .../policy/linux/bpf_audio_policy_linux.cc    |  3 ++
 .../policy/linux/bpf_renderer_policy_linux.cc | 25 +++++++--
 .../policy/linux/bpf_renderer_policy_linux.h  |  8 ++-
 .../policy/linux/bpf_service_policy_linux.cc  | 21 ++++++++
 .../policy/linux/bpf_service_policy_linux.h   |  5 +-
 .../policy/linux/sandbox_seccomp_bpf_linux.cc | 51 ++++++++++++++++---
 8 files changed, 129 insertions(+), 18 deletions(-)

diff --git a/content/renderer/renderer_main_platform_delegate_android.cc b/content/renderer/renderer_main_platform_delegate_android.cc
index c7def9142f594..952ad402036cd 100644
--- a/content/renderer/renderer_main_platform_delegate_android.cc
+++ b/content/renderer/renderer_main_platform_delegate_android.cc
@@ -17,6 +17,10 @@
 #include "sandbox/policy/linux/bpf_renderer_policy_linux.h"
 #include "sandbox/policy/mojom/sandbox.mojom.h"
 #include "sandbox/policy/sandbox_type.h"
+
+#include "base/command_line.h"
+#include "base/strings/string_split.h"
+#include "third_party/blink/public/common/switches.h"
 #endif
 
 namespace content {
@@ -52,10 +56,28 @@ bool RendererMainPlatformDelegate::EnableSandbox() {
   if (sandbox::policy::SandboxTypeFromCommandLine(
           *base::CommandLine::ForCurrentProcess()) ==
           sandbox::mojom::Sandbox::kRenderer &&
-      base::FeatureList::IsEnabled(
-          sandbox::policy::features::kUseRendererProcessPolicy)) {
+    base::FeatureList::IsEnabled(
+        sandbox::policy::features::kUseRendererProcessPolicy)) {
+    const base::CommandLine& command_line =
+        *base::CommandLine::ForCurrentProcess();
+    bool dynamic_code_can_be_disabled = false;
+    if (command_line.HasSwitch(blink::switches::kJavaScriptFlags)) {
+      std::string js_flags =
+          command_line.GetSwitchValueASCII(blink::switches::kJavaScriptFlags);
+      std::vector<std::string_view> js_flag_list = base::SplitStringPiece(
+          js_flags, ",", base::TRIM_WHITESPACE, base::SPLIT_WANT_NONEMPTY);
+      for (const auto& js_flag : js_flag_list) {
+        if (js_flag == "--jitless") {
+          // If v8 is running jitless then there is no need for the ability to
+          // mark writable pages as executable to be available to the process.
+          dynamic_code_can_be_disabled = true;
+          break;
+        }
+      }
+    }
     starter.set_policy(
-        std::make_unique<sandbox::policy::RendererProcessPolicy>(options));
+        std::make_unique<sandbox::policy::RendererProcessPolicy>(options,
+          dynamic_code_can_be_disabled));
   } else {
     starter.set_policy(
         std::make_unique<sandbox::BaselinePolicyAndroid>(options));
diff --git a/sandbox/linux/seccomp-bpf-helpers/baseline_policy.cc b/sandbox/linux/seccomp-bpf-helpers/baseline_policy.cc
index 7bde501115bdf..0f1e4ae0c7b28 100644
--- a/sandbox/linux/seccomp-bpf-helpers/baseline_policy.cc
+++ b/sandbox/linux/seccomp-bpf-helpers/baseline_policy.cc
@@ -257,19 +257,19 @@ ResultExpr EvaluateSyscallImpl(int fs_denied_errno,
 #if defined(__i386__) || defined(__x86_64__) || defined(__mips__) || \
     defined(__aarch64__)
   if (sysno == __NR_mmap)
-    return RestrictMmapFlags();
+    return RestrictMmapFlagsNoWX();
 #endif
 
 #if defined(__i386__) || defined(__arm__) || \
     (defined(ARCH_CPU_MIPS_FAMILY) && defined(ARCH_CPU_32_BITS))
   if (sysno == __NR_mmap2)
-    return RestrictMmapFlags();
+    return RestrictMmapFlagsNoWX();
 #endif
 
   if (sysno == __NR_mprotect || sysno == __NR_pkey_mprotect) {
     // pkey_mprotect is identical to mprotect except for the additional (last)
     // parameter, which can be ignored here.
-    return RestrictMprotectFlags();
+    return RestrictMprotectFlagsNoWX();
   }
 
   if (sysno == __NR_prctl)
diff --git a/sandbox/policy/linux/bpf_audio_policy_linux.cc b/sandbox/policy/linux/bpf_audio_policy_linux.cc
index e1716b97e8f21..dc25d460460d5 100644
--- a/sandbox/policy/linux/bpf_audio_policy_linux.cc
+++ b/sandbox/policy/linux/bpf_audio_policy_linux.cc
@@ -121,6 +121,9 @@ ResultExpr AudioProcessPolicy::EvaluateSyscall(int system_call_number) const {
 #endif
     default:
 #if defined(__x86_64__)
+      if (system_call_number == __NR_shmat)
+        return RestrictShmatFlags();
+
       if (SyscallSets::IsSystemVSemaphores(system_call_number) ||
           SyscallSets::IsSystemVSharedMemory(system_call_number)) {
         return Allow();
diff --git a/sandbox/policy/linux/bpf_renderer_policy_linux.cc b/sandbox/policy/linux/bpf_renderer_policy_linux.cc
index e33f17e2f5c72..49ed51bf90fe0 100644
--- a/sandbox/policy/linux/bpf_renderer_policy_linux.cc
+++ b/sandbox/policy/linux/bpf_renderer_policy_linux.cc
@@ -52,15 +52,34 @@ ResultExpr RestrictIoctl() {
 
 }  // namespace
 #if !BUILDFLAG(IS_ANDROID)
-RendererProcessPolicy::RendererProcessPolicy() = default;
+RendererProcessPolicy::RendererProcessPolicy(bool is_jit_disabled)
+    : is_jit_disabled_(is_jit_disabled) {}
 #else
 RendererProcessPolicy::RendererProcessPolicy(
-    const BaselinePolicyAndroid::RuntimeOptions& options)
-    : BPFBasePolicy(options) {}
+    const BaselinePolicyAndroid::RuntimeOptions& options,
+    bool is_jit_disabled)
+    : BPFBasePolicy(options), is_jit_disabled_(is_jit_disabled) {}
 #endif  // !BUILDFLAG(IS_ANDROID)
 RendererProcessPolicy::~RendererProcessPolicy() = default;
 
 ResultExpr RendererProcessPolicy::EvaluateSyscall(int sysno) const {
+  if (!is_jit_disabled_) {
+    switch (sysno) {
+#if defined(__i386__) || defined(__x86_64__) || defined(__mips__) || \
+    defined(__aarch64__)
+      case __NR_mmap:
+#endif
+#if defined(__i386__) || defined(__arm__) || \
+    (defined(ARCH_CPU_MIPS_FAMILY) && defined(ARCH_CPU_32_BITS))
+      case __NR_mmap2:
+#endif
+        return RestrictMmapFlags();
+      case __NR_mprotect:
+      case __NR_pkey_mprotect:
+        return RestrictMprotectFlags();
+    }
+  }
+
   switch (sysno) {
     // The baseline policy allows __NR_clock_gettime. Allow
     // clock_getres() for V8. crbug.com/329053.
diff --git a/sandbox/policy/linux/bpf_renderer_policy_linux.h b/sandbox/policy/linux/bpf_renderer_policy_linux.h
index 41ed0eaac13c7..630a1c04fd369 100644
--- a/sandbox/policy/linux/bpf_renderer_policy_linux.h
+++ b/sandbox/policy/linux/bpf_renderer_policy_linux.h
@@ -19,10 +19,11 @@ namespace sandbox::policy {
 class SANDBOX_POLICY_EXPORT RendererProcessPolicy : public BPFBasePolicy {
  public:
 #if BUILDFLAG(IS_LINUX) || BUILDFLAG(IS_CHROMEOS)
-  RendererProcessPolicy();
+  explicit RendererProcessPolicy(bool is_jit_disabled);
 #elif BUILDFLAG(IS_ANDROID)
   explicit RendererProcessPolicy(
-      const BaselinePolicyAndroid::RuntimeOptions& options);
+      const BaselinePolicyAndroid::RuntimeOptions& options,
+      bool is_jit_disabled);
 #endif
 
   RendererProcessPolicy(const RendererProcessPolicy&) = delete;
@@ -31,6 +32,9 @@ class SANDBOX_POLICY_EXPORT RendererProcessPolicy : public BPFBasePolicy {
   ~RendererProcessPolicy() override;
 
   bpf_dsl::ResultExpr EvaluateSyscall(int system_call_number) const override;
+
+ private:
+  const bool is_jit_disabled_; // Disable dynamic code execution if jitless
 };
 
 }  // namespace sandbox::policy
diff --git a/sandbox/policy/linux/bpf_service_policy_linux.cc b/sandbox/policy/linux/bpf_service_policy_linux.cc
index 32754e67be3d6..aff36f0119ee2 100644
--- a/sandbox/policy/linux/bpf_service_policy_linux.cc
+++ b/sandbox/policy/linux/bpf_service_policy_linux.cc
@@ -20,7 +20,28 @@ using sandbox::bpf_dsl::ResultExpr;
 namespace sandbox {
 namespace policy {
 
+ServiceProcessPolicy::ServiceProcessPolicy(bool is_jit_disabled)
+    : is_jit_disabled_(is_jit_disabled) {}
+
 ResultExpr ServiceProcessPolicy::EvaluateSyscall(int sysno) const {
+
+  if (!is_jit_disabled_) {
+    switch (sysno) {
+#if defined(__i386__) || defined(__x86_64__) || defined(__mips__) || \
+    defined(__aarch64__)
+      case __NR_mmap:
+#endif
+#if defined(__i386__) || defined(__arm__) || \
+    (defined(ARCH_CPU_MIPS_FAMILY) && defined(ARCH_CPU_32_BITS))
+      case __NR_mmap2:
+#endif
+        return RestrictMmapFlags();
+      case __NR_mprotect:
+      case __NR_pkey_mprotect:
+        return RestrictMprotectFlags();
+    }
+  }
+
   switch (sysno) {
     case __NR_ioctl:
       return RestrictIoctl();
diff --git a/sandbox/policy/linux/bpf_service_policy_linux.h b/sandbox/policy/linux/bpf_service_policy_linux.h
index 0f33163d6a87f..48626cb8111fa 100644
--- a/sandbox/policy/linux/bpf_service_policy_linux.h
+++ b/sandbox/policy/linux/bpf_service_policy_linux.h
@@ -16,13 +16,16 @@ namespace policy {
 // Consider UtilityProcessPolicy if this is too restrictive.
 class ServiceProcessPolicy : public BPFBasePolicy {
  public:
-  ServiceProcessPolicy() = default;
+  explicit ServiceProcessPolicy(bool is_jit_disabled);
   ~ServiceProcessPolicy() override = default;
 
   bpf_dsl::ResultExpr EvaluateSyscall(int system_call_number) const override;
 
   ServiceProcessPolicy(const ServiceProcessPolicy&) = delete;
   ServiceProcessPolicy& operator=(const ServiceProcessPolicy&) = delete;
+
+ private:
+  const bool is_jit_disabled_;  // Disable dynamic code generation if jitless
 };
 
 }  // namespace policy
diff --git a/sandbox/policy/linux/sandbox_seccomp_bpf_linux.cc b/sandbox/policy/linux/sandbox_seccomp_bpf_linux.cc
index 0f3487e6f2ffa..b03032d463650 100644
--- a/sandbox/policy/linux/sandbox_seccomp_bpf_linux.cc
+++ b/sandbox/policy/linux/sandbox_seccomp_bpf_linux.cc
@@ -17,6 +17,8 @@
 #include "base/command_line.h"
 #include "base/feature_list.h"
 #include "base/notreached.h"
+#include "base/strings/string_split.h"
+#include "gin/gin_features.h"
 #include "build/build_config.h"
 #include "build/chromeos_buildflags.h"
 #include "ppapi/buildflags/buildflags.h"
@@ -55,6 +57,7 @@
 #include "sandbox/policy/linux/bpf_service_policy_linux.h"
 #include "sandbox/policy/linux/bpf_speech_recognition_policy_linux.h"
 #include "sandbox/policy/linux/bpf_utility_policy_linux.h"
+#include "third_party/blink/public/common/switches.h"
 
 #if BUILDFLAG(ENABLE_SCREEN_AI_SERVICE)
 #include "sandbox/policy/linux/bpf_screen_ai_policy_linux.h"
@@ -190,8 +193,26 @@ std::unique_ptr<BPFBasePolicy> SandboxSeccompBPF::PolicyForSandboxType(
   switch (sandbox_type) {
     case sandbox::mojom::Sandbox::kGpu:
       return GetGpuProcessSandbox(options);
-    case sandbox::mojom::Sandbox::kRenderer:
-      return std::make_unique<RendererProcessPolicy>();
+    case sandbox::mojom::Sandbox::kRenderer: {
+      const base::CommandLine& command_line =
+          *base::CommandLine::ForCurrentProcess();
+      bool dynamic_code_can_be_disabled = false;
+      if (command_line.HasSwitch(blink::switches::kJavaScriptFlags)) {
+        std::string js_flags =
+            command_line.GetSwitchValueASCII(blink::switches::kJavaScriptFlags);
+        std::vector<std::string_view> js_flag_list = base::SplitStringPiece(
+            js_flags, ",", base::TRIM_WHITESPACE, base::SPLIT_WANT_NONEMPTY);
+        for (const auto& js_flag : js_flag_list) {
+          if (js_flag == "--jitless") {
+            // If v8 is running jitless then there is no need for the ability to
+            // mark writable pages as executable to be available to the process.
+            dynamic_code_can_be_disabled = true;
+            break;
+          }
+        }
+      }
+      return std::make_unique<RendererProcessPolicy>(dynamic_code_can_be_disabled);
+    }
 #if BUILDFLAG(ENABLE_PPAPI)
     case sandbox::mojom::Sandbox::kPpapi:
       return std::make_unique<PpapiProcessPolicy>();
@@ -213,9 +234,27 @@ std::unique_ptr<BPFBasePolicy> SandboxSeccompBPF::PolicyForSandboxType(
     case sandbox::mojom::Sandbox::kAudio:
       return std::make_unique<AudioProcessPolicy>();
     case sandbox::mojom::Sandbox::kService:
-      return std::make_unique<ServiceProcessPolicy>();
-    case sandbox::mojom::Sandbox::kServiceWithJit:
-      return std::make_unique<ServiceProcessPolicy>();
+      return std::make_unique<ServiceProcessPolicy>(true);
+    case sandbox::mojom::Sandbox::kServiceWithJit: {
+      const base::CommandLine& command_line =
+          *base::CommandLine::ForCurrentProcess();
+      bool dynamic_code_can_be_disabled = false;
+      if (command_line.HasSwitch(blink::switches::kJavaScriptFlags)) {
+        std::string js_flags =
+            command_line.GetSwitchValueASCII(blink::switches::kJavaScriptFlags);
+        std::vector<std::string_view> js_flag_list = base::SplitStringPiece(
+            js_flags, ",", base::TRIM_WHITESPACE, base::SPLIT_WANT_NONEMPTY);
+        for (const auto& js_flag : js_flag_list) {
+          if (js_flag == "--jitless") {
+            // If v8 is running jitless then there is no need for the ability to
+            // mark writable pages as executable to be available to the process.
+            dynamic_code_can_be_disabled = true;
+            break;
+          }
+        }
+      }
+      return std::make_unique<ServiceProcessPolicy>(dynamic_code_can_be_disabled);
+    }
     case sandbox::mojom::Sandbox::kSpeechRecognition:
       return std::make_unique<SpeechRecognitionProcessPolicy>();
 #if BUILDFLAG(IS_LINUX)
@@ -228,7 +267,7 @@ std::unique_ptr<BPFBasePolicy> SandboxSeccompBPF::PolicyForSandboxType(
 #endif
 #if BUILDFLAG(IS_LINUX)
     case sandbox::mojom::Sandbox::kVideoEffects:
-      return std::make_unique<ServiceProcessPolicy>();
+      return std::make_unique<ServiceProcessPolicy>(true);
 #endif  // BUILDFLAG(IS_LINUX)
 #if BUILDFLAG(IS_LINUX) || BUILDFLAG(IS_CHROMEOS_ASH)
     case sandbox::mojom::Sandbox::kHardwareVideoDecoding:
