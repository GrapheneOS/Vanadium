From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: Dmitry Muhomor <muhomor.dmitry@gmail.com>
Date: Wed, 22 Nov 2023 15:10:08 +0200
Subject: [PATCH] enable memory tagging in all processes

---
 .../nonembedded/java/AndroidManifest.xml            |  1 +
 base/allocator/partition_alloc_features.cc          | 13 -------------
 2 files changed, 1 insertion(+), 13 deletions(-)

diff --git a/android_webview/nonembedded/java/AndroidManifest.xml b/android_webview/nonembedded/java/AndroidManifest.xml
index ad51574ac8037..4a9d33f5b5461 100644
--- a/android_webview/nonembedded/java/AndroidManifest.xml
+++ b/android_webview/nonembedded/java/AndroidManifest.xml
@@ -38,6 +38,7 @@ by a child template that "extends" this file.
                  android:icon="@{{manifest_package|default('com.android.webview')}}:drawable/icon_webview"
                  android:name="{{ application_name|default('org.chromium.android_webview.nonembedded.WebViewApkApplication') }}"
                  android:multiArch="true"
+                 android:memtagMode="async"
                  android:extractNativeLibs="false">
         {# This part is shared between stand-alone WebView and Monochrome #}
         {% macro common(manifest_package, webview_lib) %}
diff --git a/base/allocator/partition_alloc_features.cc b/base/allocator/partition_alloc_features.cc
index 1b79c3b14a0e3..abcfb8812891f 100644
--- a/base/allocator/partition_alloc_features.cc
+++ b/base/allocator/partition_alloc_features.cc
@@ -210,11 +210,7 @@ constinit const FeatureParam<int> kBackupRefPtrExtraExtrasSizeParam{
 
 BASE_FEATURE(kPartitionAllocMemoryTagging,
              "PartitionAllocMemoryTagging",
-#if PA_BUILDFLAG(USE_FULL_MTE) || BUILDFLAG(IS_ANDROID)
              FEATURE_ENABLED_BY_DEFAULT
-#else
-             FEATURE_DISABLED_BY_DEFAULT
-#endif
 );
 
 constexpr FeatureParam<MemtagMode>::Option kMemtagModeOptions[] = {
@@ -251,11 +247,7 @@ constexpr FeatureParam<MemoryTaggingEnabledProcesses>::Option
 constinit const FeatureParam<MemoryTaggingEnabledProcesses>
     kMemoryTaggingEnabledProcessesParam{
         &kPartitionAllocMemoryTagging, kPAFeatureEnabledProcessesStr,
-#if PA_BUILDFLAG(USE_FULL_MTE)
         MemoryTaggingEnabledProcesses::kAllProcesses,
-#else
-        MemoryTaggingEnabledProcesses::kNonRenderer,
-#endif
         &kMemoryTaggingEnabledProcessesOptions};
 
 BASE_FEATURE(kKillPartitionAllocMemoryTagging,
@@ -265,12 +257,7 @@ BASE_FEATURE(kKillPartitionAllocMemoryTagging,
 BASE_EXPORT BASE_DECLARE_FEATURE(kPartitionAllocPermissiveMte);
 BASE_FEATURE(kPartitionAllocPermissiveMte,
              "PartitionAllocPermissiveMte",
-#if PA_BUILDFLAG(USE_FULL_MTE)
-             // We want to actually crash if USE_FULL_MTE is enabled.
              FEATURE_DISABLED_BY_DEFAULT
-#else
-             FEATURE_ENABLED_BY_DEFAULT
-#endif
 );
 
 BASE_FEATURE(kAsanBrpDereferenceCheck,
