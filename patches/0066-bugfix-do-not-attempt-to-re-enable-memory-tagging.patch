From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: Dmitry Muhomor <muhomor.dmitry@gmail.com>
Date: Wed, 22 Nov 2023 15:19:54 +0200
Subject: [PATCH] bugfix: do not attempt to re-enable memory tagging

Memory tagging is unconditionally enabled in all Vanadium processes, but part of WebView code runs
inside the host app. If that app has disabled memory tagging, attempt to enable it will fail, which
leads to app process crash due to a failed assertion.
---
 base/allocator/partition_alloc_support.cc | 8 +++++---
 1 file changed, 5 insertions(+), 3 deletions(-)

diff --git a/base/allocator/partition_alloc_support.cc b/base/allocator/partition_alloc_support.cc
index a4f96426269b8..4b50df0681fd3 100644
--- a/base/allocator/partition_alloc_support.cc
+++ b/base/allocator/partition_alloc_support.cc
@@ -1118,13 +1118,15 @@ void PartitionAllocSupport::ReconfigureAfterFeatureListInit(
           base::features::kKillPartitionAllocMemoryTagging)) {
     // If synchronous mode is enabled from startup it means this is a test and
     // memory tagging should be enabled.
-    if (partition_alloc::internal::GetMemoryTaggingModeForCurrentThread() ==
-        partition_alloc::TagViolationReportingMode::kSynchronous) {
+    auto cur_memtag_mode = partition_alloc::internal::GetMemoryTaggingModeForCurrentThread();
+    if (cur_memtag_mode == partition_alloc::TagViolationReportingMode::kSynchronous) {
       enable_memory_tagging = true;
       memory_tagging_reporting_mode =
           partition_alloc::TagViolationReportingMode::kSynchronous;
     } else {
-      enable_memory_tagging = ShouldEnableMemoryTagging(process_type);
+      enable_memory_tagging = ShouldEnableMemoryTagging(process_type) &&
+          // memory tagging can't be re-enabled
+          cur_memtag_mode != partition_alloc::TagViolationReportingMode::kDisabled;
 #if BUILDFLAG(IS_ANDROID)
       if (enable_memory_tagging) {
         switch (base::features::kMemtagModeParam.Get()) {
