From de744d1e8508dcd8a1538e75fd9ef0b5307f53e8 Mon Sep 17 00:00:00 2001
From: Wissem Gamra <wiss@chromium.org>
Date: Mon, 13 Jun 2022 17:54:01 +0000
Subject: [PATCH] [QRCode on Android] Fix overlapping permissions dialogs bug

When a user generates a QR code and attempts downloading it without having given chrome storage access permissions, a dialog is created and shown to alert them, then when the user clicks "Continue" the permissions dialog get displayed then immediately re-ordered to the back of the tab. This seems to eb an issue because the dialogDismiss function runs concurrently with the android permissions dialog, resulting in both of them hiding from the view. In order to fix this, we move the dismissDialog function call to run after the android permissions dialog finishes running and the user inputs their preference.

Bug: 1319659
Change-Id: I5c5ab7f659a6601e83e932b29795acf5331b0678
Reviewed-on: https://chromium-review.googlesource.com/c/chromium/src/+/3673876
Reviewed-by: Jeffrey Cohen <jeffreycohen@chromium.org>
Reviewed-by: Ravjit Uppal <ravjit@chromium.org>
Reviewed-by: Theresa Sullivan <twellington@chromium.org>
Commit-Queue: Wissem Gamra <wiss@chromium.org>
Cr-Commit-Position: refs/heads/main@{#1013549}
---
 .../download/FileAccessPermissionHelper.java  | 32 ++++++++++++++-----
 .../AndroidPermissionRequester.java           | 29 ++++++++++-------
 2 files changed, 41 insertions(+), 20 deletions(-)

diff --git a/chrome/android/java/src/org/chromium/chrome/browser/download/FileAccessPermissionHelper.java b/chrome/android/java/src/org/chromium/chrome/browser/download/FileAccessPermissionHelper.java
index 5d8e6756b19f5..2aedd0c6c69c7 100644
--- a/chrome/android/java/src/org/chromium/chrome/browser/download/FileAccessPermissionHelper.java
+++ b/chrome/android/java/src/org/chromium/chrome/browser/download/FileAccessPermissionHelper.java
@@ -12,8 +12,12 @@ import android.util.Pair;
 import androidx.annotation.NonNull;
 
 import org.chromium.base.Callback;
+import org.chromium.base.Consumer;
 import org.chromium.components.permissions.AndroidPermissionRequester;
 import org.chromium.ui.base.WindowAndroid;
+import org.chromium.ui.modaldialog.DialogDismissalCause;
+import org.chromium.ui.modaldialog.ModalDialogManager;
+import org.chromium.ui.modelutil.PropertyModel;
 import org.chromium.ui.permissions.AndroidPermissionDelegate;
 import org.chromium.ui.permissions.PermissionCallback;
 
@@ -61,10 +65,6 @@ public class FileAccessPermissionHelper {
         }
 
         final AndroidPermissionDelegate permissionDelegate = windowAndroid;
-        final PermissionCallback permissionCallback = (permissions, grantResults)
-                -> callback.onResult(Pair.create(grantResults.length > 0
-                                && grantResults[0] == PackageManager.PERMISSION_GRANTED,
-                        null));
 
         Context context = windowAndroid.getContext().get();
         if (context == null) {
@@ -72,9 +72,25 @@ public class FileAccessPermissionHelper {
             return;
         }
 
-        Runnable requestPermissions = ()
-                -> permissionDelegate.requestPermissions(
-                        new String[] {permission.WRITE_EXTERNAL_STORAGE}, permissionCallback);
+        Consumer<PropertyModel> requestPermissions = (model) -> {
+            final PermissionCallback permissionCallback = (permissions, grantResults) -> {
+                final ModalDialogManager modalDialogManager = windowAndroid.getModalDialogManager();
+                // If the model is not null, it means that it has not been dismissed yet
+                // and we will be dismissing it after the permissions callback. For more
+                // context, crbug/1319659
+                if (modalDialogManager != null && model != null) {
+                    modalDialogManager.dismissDialog(
+                            model, DialogDismissalCause.POSITIVE_BUTTON_CLICKED);
+                }
+                callback.onResult(Pair.create(grantResults.length > 0
+                                && grantResults[0] == PackageManager.PERMISSION_GRANTED,
+                        null));
+            };
+
+            permissionDelegate.requestPermissions(
+                    new String[] {permission.WRITE_EXTERNAL_STORAGE}, permissionCallback);
+        };
+
         if (windowAndroid.getModalDialogManager() != null) {
             AndroidPermissionRequester.showMissingPermissionDialog(windowAndroid,
                     context.getString(org.chromium.chrome.R.string
@@ -82,7 +98,7 @@ public class FileAccessPermissionHelper {
                     requestPermissions, callback.bind(Pair.create(false, null)));
         } else {
             // If there is no modal dialog manager, we will request permissions directly.
-            requestPermissions.run();
+            requestPermissions.accept(null);
         }
     }
 }
diff --git a/components/permissions/android/java/src/org/chromium/components/permissions/AndroidPermissionRequester.java b/components/permissions/android/java/src/org/chromium/components/permissions/AndroidPermissionRequester.java
index e76e6f11d51af..36e2a4683a2f0 100644
--- a/components/permissions/android/java/src/org/chromium/components/permissions/AndroidPermissionRequester.java
+++ b/components/permissions/android/java/src/org/chromium/components/permissions/AndroidPermissionRequester.java
@@ -13,6 +13,7 @@ import android.widget.TextView;
 
 import org.chromium.base.BuildInfo;
 import org.chromium.base.CollectionUtil;
+import org.chromium.base.Consumer;
 import org.chromium.base.annotations.CalledByNative;
 import org.chromium.components.content_settings.ContentSettingsType;
 import org.chromium.ui.base.WindowAndroid;
@@ -185,12 +186,15 @@ public class AndroidPermissionRequester {
                                     + deniedContentSettings;
 
                     String appName = BuildInfo.getInstance().hostPackageLabel;
-                    showMissingPermissionDialog(windowAndroid,
-                            context.getString(deniedStringId, appName),
-                            ()
-                                    -> requestAndroidPermissions(
-                                            windowAndroid, contentSettingsTypes, delegate),
-                            delegate::onAndroidPermissionCanceled);
+                    showMissingPermissionDialog(
+                            windowAndroid, context.getString(deniedStringId, appName), (model) -> {
+                                final ModalDialogManager modalDialogManager =
+                                        windowAndroid.getModalDialogManager();
+                                modalDialogManager.dismissDialog(
+                                        model, DialogDismissalCause.POSITIVE_BUTTON_CLICKED);
+                                requestAndroidPermissions(
+                                        windowAndroid, contentSettingsTypes, delegate);
+                            }, delegate::onAndroidPermissionCanceled);
                 } else if (deniedContentSettings.isEmpty()) {
                     delegate.onAndroidPermissionAccepted();
                 } else {
@@ -206,14 +210,17 @@ public class AndroidPermissionRequester {
     }
 
     /**
-     * Shows a dialog that informs the user about a missing Android permission.
+     * Shows a dialog that informs the user about a missing Android permission. Note that
+     * the dialog is not dismissed when the positive button is clicked, rather it will be
+     * dismissed after the Android permissions dialog is dismissed.
      * @param windowAndroid Current WindowAndroid.
      * @param messageId The message that is shown on the dialog.
-     * @param onPositiveButtonClicked Runnable that is executed on positive button click.
+     * @param onPositiveButtonClicked Consumer that is executed on positive button click.
+     *         It takes a PropertyModel.
      * @param onCancelled Runnable that is executed on cancellation.
      */
     public static void showMissingPermissionDialog(WindowAndroid windowAndroid, String message,
-            Runnable onPositiveButtonClicked, Runnable onCancelled) {
+            Consumer<PropertyModel> onPositiveButtonClicked, Runnable onCancelled) {
         final ModalDialogManager modalDialogManager = windowAndroid.getModalDialogManager();
         assert modalDialogManager != null : "ModalDialogManager is null";
 
@@ -221,9 +228,7 @@ public class AndroidPermissionRequester {
             @Override
             public void onClick(PropertyModel model, int buttonType) {
                 if (buttonType == ModalDialogProperties.ButtonType.POSITIVE) {
-                    onPositiveButtonClicked.run();
-                    modalDialogManager.dismissDialog(
-                            model, DialogDismissalCause.POSITIVE_BUTTON_CLICKED);
+                    onPositiveButtonClicked.accept(model);
                 }
             }
 
