From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: fgei <fgei@gmail.com>
Date: Wed, 10 Apr 2024 16:24:16 +0000
Subject: [PATCH] config: Add support for generating configs with additional
 components and its condition

---
 .../vanadium/config/host/ConfigGenerator.java | 20 +++++++++++++++++++
 1 file changed, 20 insertions(+)

diff --git a/vanadium/android_config/proto/java/src_host/app/vanadium/config/host/ConfigGenerator.java b/vanadium/android_config/proto/java/src_host/app/vanadium/config/host/ConfigGenerator.java
index 6eb7a45b7f550..47fec67edb1f6 100644
--- a/vanadium/android_config/proto/java/src_host/app/vanadium/config/host/ConfigGenerator.java
+++ b/vanadium/android_config/proto/java/src_host/app/vanadium/config/host/ConfigGenerator.java
@@ -12,7 +12,9 @@ import java.util.function.UnaryOperator;
 import java.util.stream.Collectors;
 
 import app.vanadium.config.proto.VanadiumConfigProto.Component;
+import app.vanadium.config.proto.VanadiumConfigProto.Component.AdditionalComponent;
 import app.vanadium.config.proto.VanadiumConfigProto.Component.ComponentApkSpec;
+import app.vanadium.config.proto.VanadiumConfigProto.Component.ComponentCondition;
 import app.vanadium.config.proto.VanadiumConfigProto.Component.ComponentType;
 import app.vanadium.config.proto.VanadiumConfigProto.Config;
 import app.vanadium.config.proto.VanadiumConfigProto.Configs;
@@ -138,6 +140,24 @@ public class ConfigGenerator {
         return componentParams.apply(Component.newBuilder()).build();
     }
 
+    private static List<AdditionalComponent> additionalComponents(AdditionalComponent... additionalComponents) {
+        return Arrays.asList(additionalComponents);
+    }
+
+    private static AdditionalComponent additionalComponent(
+            UnaryOperator<AdditionalComponent.Builder> additionalComponentParams) {
+        return additionalComponentParams.apply(AdditionalComponent.newBuilder()).build();
+    }
+
+    private static ComponentCondition componentCondition(
+            UnaryOperator<ComponentCondition.Builder> componentConditionParams) {
+        return componentConditionParams.apply(ComponentCondition.newBuilder()).build();
+    }
+
+    private static List<ComponentCondition> componentConditions(ComponentCondition... componentConditions) {
+        return Arrays.asList(componentConditions);
+    }
+
     private static long getSpecTypes(SpecType... specTypes) {
         return enumBitsLong(specTypes);
     }
