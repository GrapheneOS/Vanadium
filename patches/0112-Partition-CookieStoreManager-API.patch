From bb62f0994a0404f65f39e6abf648b6150dafc4b7 Mon Sep 17 00:00:00 2001
From: Dylan Cutler <dylancutler@google.com>
Date: Wed, 12 Apr 2023 18:05:37 +0000
Subject: [PATCH] Partition CookieStoreManager API

The CookieStoreManager API [1] allows workers to subscribe to changes in their site's cookies.

This CL also disallows partitioned workers registered in cross-site contexts from accessing SameSite=Lax/Strict cookies.

[1]: https://developer.mozilla.org/en-US/docs/Web/API/CookieStoreManager

Bug: 1246549,1427879
Change-Id: I4d3e8fdea345f30fefa32007ecd4243a7c11d6f1
Reviewed-on: https://chromium-review.googlesource.com/c/chromium/src/+/3236772
Commit-Queue: Dylan Cutler <dylancutler@google.com>
Reviewed-by: Maks Orlovich <morlovich@chromium.org>
Reviewed-by: Ayu Ishii <ayui@chromium.org>
Cr-Commit-Position: refs/heads/main@{#1129363}
---
 .../cookie_store/cookie_store_manager.cc      |  38 ++-
 .../cookie_store_manager_unittest.cc          | 255 +++++++++++++++++-
 .../cookie_monster_change_dispatcher.cc       |  38 ++-
 .../cookie_monster_change_dispatcher.h        |   6 +-
 net/cookies/cookie_store_change_unittest.h    | 137 +++++++++-
 5 files changed, 444 insertions(+), 30 deletions(-)

diff --git a/content/browser/cookie_store/cookie_store_manager.cc b/content/browser/cookie_store/cookie_store_manager.cc
index 8e983ffee3205..6f86a2ed0bafe 100644
--- a/content/browser/cookie_store/cookie_store_manager.cc
+++ b/content/browser/cookie_store/cookie_store_manager.cc
@@ -22,6 +22,7 @@
 #include "content/public/browser/browser_thread.h"
 #include "content/public/browser/render_process_host.h"
 #include "net/base/registry_controlled_domains/registry_controlled_domain.h"
+#include "net/cookies/cookie_partition_key.h"
 #include "services/network/public/cpp/is_potentially_trustworthy.h"
 #include "services/network/public/mojom/network_context.mojom.h"
 #include "third_party/abseil-cpp/absl/types/optional.h"
@@ -191,7 +192,7 @@ void CookieStoreManager::AddSubscriptions(
     return;
   }
 
-  if (!(storage_key == service_worker_registration->key())) {
+  if (storage_key != service_worker_registration->key()) {
     std::move(bad_message_callback).Run("Invalid service worker");
     std::move(callback).Run(false);
     return;
@@ -205,8 +206,6 @@ void CookieStoreManager::AddSubscriptions(
   }
 
   for (const auto& mojo_subscription : mojo_subscriptions) {
-    // TODO(crbug.com/1246549): This validation step should consider the storage
-    // key.
     if (!blink::ServiceWorkerScopeMatches(service_worker_registration->scope(),
                                           mojo_subscription->url)) {
       // Blink should have validated subscription URLs against the service
@@ -347,8 +346,9 @@ void CookieStoreManager::RemoveSubscriptions(
   // StoreSubscriptions() needs to be called before updating
   // |subscriptions_by_registration_|, because the update may delete the vector
   // holding the subscriptions.
-  StoreSubscriptions(service_worker_registration_id, storage_key,
-                     live_subscriptions, std::move(callback));
+  StoreSubscriptions(service_worker_registration_id,
+                     service_worker_registration->key(), live_subscriptions,
+                     std::move(callback));
   if (live_subscriptions.empty()) {
     subscriptions_by_registration_.erase(all_subscriptions_it);
   } else {
@@ -609,6 +609,34 @@ void CookieStoreManager::OnCookieChange(const net::CookieChangeInfo& change) {
               DCHECK(registration);
               if (!manager)
                 return;
+
+              // If the change is for a partition cookie, we check that its
+              // partition key matches the StorageKey's top-level site.
+              if (auto cookie_partition_key =
+                      registration->key().ToCookiePartitionKey()) {
+                if (change.cookie.IsPartitioned() &&
+                    change.cookie.PartitionKey() != cookie_partition_key) {
+                  return;
+                }
+                // If the cookie partition key for the worker has a nonce, then
+                // only partitioned cookies should be visible.
+                if (net::CookiePartitionKey::HasNonce(cookie_partition_key) &&
+                    !change.cookie.IsPartitioned()) {
+                  return;
+                }
+              }
+
+              if (registration->key().IsThirdPartyContext() &&
+                  !change.cookie.IsEffectivelySameSiteNone()) {
+                return;
+              }
+
+              // TODO(crbug.com/1427879): Third-party partitioned workers should
+              // not have access to unpartitioned state when third-party cookie
+              // blocking is on.
+              // TODO(crbug.com/1427879): Should RSA grant unpartitioned cookie
+              // access?
+
               manager->DispatchChangeEvent(std::move(registration), change);
             },
             weak_factory_.GetWeakPtr(), change));
diff --git a/content/browser/cookie_store/cookie_store_manager_unittest.cc b/content/browser/cookie_store/cookie_store_manager_unittest.cc
index 0a9897cbf6d43..9edb73f942cec 100644
--- a/content/browser/cookie_store/cookie_store_manager_unittest.cc
+++ b/content/browser/cookie_store/cookie_store_manager_unittest.cc
@@ -9,6 +9,7 @@
 #include "base/memory/raw_ptr.h"
 #include "base/memory/scoped_refptr.h"
 #include "base/test/bind.h"
+#include "base/test/scoped_feature_list.h"
 #include "content/browser/cookie_store/cookie_store_manager.h"
 #include "content/browser/service_worker/embedded_worker_test_helper.h"
 #include "content/browser/service_worker/fake_embedded_worker_instance_client.h"
@@ -20,6 +21,7 @@
 #include "content/test/storage_partition_test_helpers.h"
 #include "mojo/public/cpp/test_support/fake_message_dispatch_context.h"
 #include "mojo/public/cpp/test_support/test_utils.h"
+#include "net/base/features.h"
 #include "net/cookies/cookie_access_result.h"
 #include "net/cookies/cookie_constants.h"
 #include "net/cookies/cookie_util.h"
@@ -105,6 +107,10 @@ const char kGoogleScope[] = "https://google.com/a/";
 const char kGoogleWorkerScript[] = "https://google.com/a/script.js";
 const char kLegacyScope[] = "https://legacy.com/a/";
 const char kLegacyWorkerScript[] = "https://legacy.com/a/script.js";
+const char kThirdPartyTopLevelSite[] = "https://toplevelsite.com";
+
+const base::UnguessableToken kStorageKeyNonce =
+    base::UnguessableToken::Create();
 
 // Mocks a service worker that uses the cookieStore API.
 class CookieStoreWorkerTestHelper : public EmbeddedWorkerTestHelper {
@@ -196,17 +202,18 @@ class CookieStoreManagerTest
     SetUpServiceWorkerContext();
   }
 
-  // Returns the new service worker's registration id.
+  // Returns the new service worker's registration id after it is registered
+  // with the specified StorageKey.
   //
   // Spins in a nested RunLoop until the new service worker is activated. The
   // new service worker is guaranteed to be running when the method returns.
-  int64_t RegisterServiceWorker(const char* scope, const char* script_url) {
+  int64_t RegisterServiceWorkerWithStorageKey(const char* scope,
+                                              const char* script_url,
+                                              const blink::StorageKey& key) {
     bool success = false;
     int64_t registration_id;
     blink::mojom::ServiceWorkerRegistrationOptions options;
     options.scope = GURL(scope);
-    const blink::StorageKey key =
-        blink::StorageKey::CreateFirstParty(url::Origin::Create(GURL(scope)));
     base::RunLoop run_loop;
     worker_test_helper_->context()->RegisterServiceWorker(
         GURL(script_url), key, options,
@@ -230,6 +237,16 @@ class CookieStoreManagerTest
     return registration_id;
   }
 
+  // Returns the new service worker's registration id.
+  //
+  // Spins in a nested RunLoop until the new service worker is activated. The
+  // new service worker is guaranteed to be running when the method returns.
+  int64_t RegisterServiceWorker(const char* scope, const char* script_url) {
+    return RegisterServiceWorkerWithStorageKey(
+        scope, script_url,
+        blink::StorageKey::CreateFirstParty(url::Origin::Create(GURL(scope))));
+  }
+
   // The given service worker will be running after the method returns.
   //
   // RegisterServiceWorker() also guarantees that the newly created SW is
@@ -385,6 +402,23 @@ class CookieStoreManagerTest
     legacy_service_ =
         std::make_unique<CookieStoreSync>(legacy_service_remote_.get());
 
+    cookie_store_manager_->BindReceiver(
+        third_party_service_remote_.BindNewPipeAndPassReceiver(),
+        blink::StorageKey::Create(
+            url::Origin::Create(GURL(kExampleScope)),
+            net::SchemefulSite(GURL(kThirdPartyTopLevelSite)),
+            blink::mojom::AncestorChainBit::kCrossSite,
+            /*third_party_partitioning_allowed=*/true));
+    third_party_service_ =
+        std::make_unique<CookieStoreSync>(third_party_service_remote_.get());
+
+    cookie_store_manager_->BindReceiver(
+        nonced_service_remote_.BindNewPipeAndPassReceiver(),
+        blink::StorageKey::CreateWithNonce(
+            url::Origin::Create(GURL(kExampleScope)), kStorageKeyNonce));
+    nonced_service_ =
+        std::make_unique<CookieStoreSync>(nonced_service_remote_.get());
+
     // Set Legacy cookie access setting for legacy.com to test
     // CookieAccessSemantics.
     std::vector<ContentSettingPatternSource> legacy_settings;
@@ -409,9 +443,13 @@ class CookieStoreManagerTest
     example_service_.reset();
     google_service_.reset();
     legacy_service_.reset();
+    third_party_service_.reset();
+    nonced_service_.reset();
     example_service_remote_.reset();
     google_service_remote_.reset();
     legacy_service_remote_.reset();
+    third_party_service_remote_.reset();
+    nonced_service_remote_.reset();
     cookie_manager_.reset();
     cookie_store_manager_.reset();
     storage_partition_impl_.reset();
@@ -427,9 +465,10 @@ class CookieStoreManagerTest
   base::RepeatingClosure cookie_store_initializer_;
 
   mojo::Remote<blink::mojom::CookieStore> example_service_remote_,
-      google_service_remote_, legacy_service_remote_;
+      google_service_remote_, legacy_service_remote_,
+      third_party_service_remote_, nonced_service_remote_;
   std::unique_ptr<CookieStoreSync> example_service_, google_service_,
-      legacy_service_;
+      legacy_service_, third_party_service_, nonced_service_;
 };
 
 const int64_t CookieStoreManagerTest::kInvalidRegistrationId;
@@ -1777,6 +1816,210 @@ TEST_F(CookieStoreManagerTest, UnTrustworthyOrigin) {
             bad_mesage_observer.WaitForBadMessage());
 }
 
+// TODO(crbug.com/1427879): Test that the worker still can access unpartitioned
+// cookies with third-party cookie blocking on.
+TEST_F(CookieStoreManagerTest, PartitionedWorker_FirstPartyPartition) {
+  base::test::ScopedFeatureList feature_list;
+  feature_list.InitWithFeatures({net::features::kPartitionedCookies,
+                                 net::features::kThirdPartyStoragePartitioning},
+                                {});
+
+  // Register 1P worker.
+  int64_t first_party_registration_id =
+      RegisterServiceWorker(kExampleScope, kExampleWorkerScript);
+  ASSERT_NE(first_party_registration_id, kInvalidRegistrationId);
+
+  // Add cookie change subscriptions to each worker.
+  CookieStoreSync::Subscriptions subscriptions;
+  subscriptions.emplace_back(blink::mojom::CookieChangeSubscription::New());
+  subscriptions.back()->name = "";
+  subscriptions.back()->match_type =
+      ::network::mojom::CookieMatchType::STARTS_WITH;
+  subscriptions.back()->url = GURL(kExampleScope);
+  EXPECT_TRUE(example_service_->AddSubscriptions(first_party_registration_id,
+                                                 std::move(subscriptions)));
+
+  // Set unpartitioned cookie.
+  ASSERT_TRUE(
+      SetSessionCookie("cookie-name1", "new-value1", "example.com", "/"));
+  task_environment_.RunUntilIdle();
+
+  // 1P workers should see the unpartitioned cookie.
+  ASSERT_EQ(1u, worker_test_helper_->changes().size());
+
+  worker_test_helper_->changes().clear();
+
+  // Set partitioned cookie in the same partition.
+  ASSERT_TRUE(
+      SetCanonicalCookie(*net::CanonicalCookie::CreateUnsafeCookieForTesting(
+          "cookie-name3", "new-value3", "example.com", "/", base::Time(),
+          base::Time(), base::Time(), base::Time(),
+          /*secure=*/true,
+          /*httponly=*/false, net::CookieSameSite::NO_RESTRICTION,
+          net::COOKIE_PRIORITY_DEFAULT, /*same_party=*/false,
+          net::CookiePartitionKey::FromURLForTesting(GURL(kExampleScope)))));
+  task_environment_.RunUntilIdle();
+
+  ASSERT_EQ(1u, worker_test_helper_->changes().size());
+
+  worker_test_helper_->changes().clear();
+
+  // Set partitioned cookie in a different partition.
+  ASSERT_TRUE(
+      SetCanonicalCookie(*net::CanonicalCookie::CreateUnsafeCookieForTesting(
+          "cookie-name4", "new-value4", "example.com", "/", base::Time(),
+          base::Time(), base::Time(), base::Time(),
+          /*secure=*/true,
+          /*httponly=*/false, net::CookieSameSite::NO_RESTRICTION,
+          net::COOKIE_PRIORITY_DEFAULT, /*same_party=*/false,
+          net::CookiePartitionKey::FromURLForTesting(
+              GURL(kThirdPartyTopLevelSite)))));
+  task_environment_.RunUntilIdle();
+
+  ASSERT_EQ(0u, worker_test_helper_->changes().size());
+}
+
+// TODO(crbug.com/1427879): Test that the worker cannot access unpartitioned
+// cookies with third-party cookie blocking on.
+TEST_F(CookieStoreManagerTest, PartitionedWorker_ThirdPartyPartition) {
+  base::test::ScopedFeatureList feature_list;
+  feature_list.InitWithFeatures({net::features::kPartitionedCookies,
+                                 net::features::kThirdPartyStoragePartitioning},
+                                {});
+
+  // Register 3P partitioned worker.
+  blink::StorageKey third_party_storage_key = blink::StorageKey::Create(
+      url::Origin::Create(GURL(kExampleScope)),
+      net::SchemefulSite(GURL(kThirdPartyTopLevelSite)),
+      blink::mojom::AncestorChainBit::kCrossSite);
+
+  int64_t third_party_registration_id = RegisterServiceWorkerWithStorageKey(
+      kExampleScope, kExampleWorkerScript, third_party_storage_key);
+  ASSERT_NE(third_party_registration_id, kInvalidRegistrationId);
+
+  CookieStoreSync::Subscriptions subscriptions;
+  subscriptions.emplace_back(blink::mojom::CookieChangeSubscription::New());
+  subscriptions.back()->name = "";
+  subscriptions.back()->match_type =
+      ::network::mojom::CookieMatchType::STARTS_WITH;
+  subscriptions.back()->url = GURL(kExampleScope);
+  EXPECT_TRUE(third_party_service_->AddSubscriptions(
+      third_party_registration_id, std::move(subscriptions)));
+
+  // Set unpartitioned cookie.
+  ASSERT_TRUE(
+      SetSessionCookie("cookie-name1", "new-value1", "example.com", "/"));
+  task_environment_.RunUntilIdle();
+
+  // 1P workers should see the unpartitioned cookie.
+  ASSERT_EQ(1u, worker_test_helper_->changes().size());
+
+  worker_test_helper_->changes().clear();
+
+  // Set unpartitioned cookie with SameSite=Lax.
+  // Third-party workers should not get access to a SameSite=Lax cookie.
+  ASSERT_TRUE(
+      SetCanonicalCookie(*net::CanonicalCookie::CreateUnsafeCookieForTesting(
+          "cookie-name2", "new-value2", "example.com", "/", base::Time(),
+          base::Time(), base::Time(), base::Time(),
+          /*secure=*/true,
+          /*httponly=*/false, net::CookieSameSite::LAX_MODE,
+          net::COOKIE_PRIORITY_DEFAULT, /*same_party=*/false)));
+  task_environment_.RunUntilIdle();
+
+  ASSERT_EQ(0u, worker_test_helper_->changes().size());
+
+  // Set partitioned cookie in the same partition.
+  ASSERT_TRUE(
+      SetCanonicalCookie(*net::CanonicalCookie::CreateUnsafeCookieForTesting(
+          "cookie-name3", "new-value3", "example.com", "/", base::Time(),
+          base::Time(), base::Time(), base::Time(),
+          /*secure=*/true,
+          /*httponly=*/false, net::CookieSameSite::NO_RESTRICTION,
+          net::COOKIE_PRIORITY_DEFAULT, /*same_party=*/false,
+          net::CookiePartitionKey::FromURLForTesting(
+              GURL(kThirdPartyTopLevelSite)))));
+  task_environment_.RunUntilIdle();
+
+  ASSERT_EQ(1u, worker_test_helper_->changes().size());
+
+  worker_test_helper_->changes().clear();
+
+  // Set partitioned cookie in a different partition.
+  ASSERT_TRUE(
+      SetCanonicalCookie(*net::CanonicalCookie::CreateUnsafeCookieForTesting(
+          "cookie-name4", "new-value4", "example.com", "/", base::Time(),
+          base::Time(), base::Time(), base::Time(),
+          /*secure=*/true,
+          /*httponly=*/false, net::CookieSameSite::NO_RESTRICTION,
+          net::COOKIE_PRIORITY_DEFAULT, /*same_party=*/false,
+          net::CookiePartitionKey::FromURLForTesting(GURL(kExampleScope)))));
+  task_environment_.RunUntilIdle();
+
+  ASSERT_EQ(0u, worker_test_helper_->changes().size());
+}
+
+TEST_F(CookieStoreManagerTest, PartitionedWorker_NoncedPartition) {
+  base::test::ScopedFeatureList feature_list;
+  feature_list.InitWithFeatures({net::features::kPartitionedCookies,
+                                 net::features::kThirdPartyStoragePartitioning},
+                                {});
+
+  // Register nonced partitioned worker.
+  blink::StorageKey nonced_storage_key = blink::StorageKey::CreateWithNonce(
+      url::Origin::Create(GURL(kExampleScope)), kStorageKeyNonce);
+
+  int64_t nonced_registration_id = RegisterServiceWorkerWithStorageKey(
+      kExampleScope, kExampleWorkerScript, nonced_storage_key);
+  ASSERT_NE(nonced_registration_id, kInvalidRegistrationId);
+
+  CookieStoreSync::Subscriptions subscriptions;
+  subscriptions.emplace_back(blink::mojom::CookieChangeSubscription::New());
+  subscriptions.back()->name = "";
+  subscriptions.back()->match_type =
+      ::network::mojom::CookieMatchType::STARTS_WITH;
+  subscriptions.back()->url = GURL(kExampleScope);
+  EXPECT_TRUE(nonced_service_->AddSubscriptions(nonced_registration_id,
+                                                std::move(subscriptions)));
+
+  // Set unpartitioned cookie.
+  ASSERT_TRUE(
+      SetSessionCookie("cookie-name1", "new-value1", "example.com", "/"));
+  task_environment_.RunUntilIdle();
+
+  // Nonced workers should not see unpartitioned cookies.
+  ASSERT_EQ(0u, worker_test_helper_->changes().size());
+
+  // Set partitioned cookie in the same partition.
+  ASSERT_TRUE(
+      SetCanonicalCookie(*net::CanonicalCookie::CreateUnsafeCookieForTesting(
+          "cookie-name2", "new-value2", "example.com", "/", base::Time(),
+          base::Time(), base::Time(), base::Time(),
+          /*secure=*/true,
+          /*httponly=*/false, net::CookieSameSite::NO_RESTRICTION,
+          net::COOKIE_PRIORITY_DEFAULT, /*same_party=*/false,
+          net::CookiePartitionKey::FromURLForTesting(GURL(kExampleScope),
+                                                     kStorageKeyNonce))));
+  task_environment_.RunUntilIdle();
+
+  ASSERT_EQ(1u, worker_test_helper_->changes().size());
+
+  worker_test_helper_->changes().clear();
+
+  // Set partitioned cookie in a different partition.
+  ASSERT_TRUE(
+      SetCanonicalCookie(*net::CanonicalCookie::CreateUnsafeCookieForTesting(
+          "cookie-name2", "new-value2", "example.com", "/", base::Time(),
+          base::Time(), base::Time(), base::Time(),
+          /*secure=*/true,
+          /*httponly=*/false, net::CookieSameSite::NO_RESTRICTION,
+          net::COOKIE_PRIORITY_DEFAULT, /*same_party=*/false,
+          net::CookiePartitionKey::FromURLForTesting(GURL(kExampleScope)))));
+  task_environment_.RunUntilIdle();
+
+  ASSERT_EQ(0u, worker_test_helper_->changes().size());
+}
+
 INSTANTIATE_TEST_SUITE_P(All,
                          CookieStoreManagerTest,
                          testing::Bool() /* reset_context_during_test */);
diff --git a/net/cookies/cookie_monster_change_dispatcher.cc b/net/cookies/cookie_monster_change_dispatcher.cc
index e1eb9d0f7b602..36dd9f96ca3ab 100644
--- a/net/cookies/cookie_monster_change_dispatcher.cc
+++ b/net/cookies/cookie_monster_change_dispatcher.cc
@@ -36,14 +36,15 @@ CookieMonsterChangeDispatcher::Subscription::Subscription(
     std::string domain_key,
     std::string name_key,
     GURL url,
-    absl::optional<CookiePartitionKey> cookie_partition_key,
+    CookiePartitionKeyCollection cookie_partition_key_collection,
     bool same_party_attribute_enabled,
     net::CookieChangeCallback callback)
     : change_dispatcher_(std::move(change_dispatcher)),
       domain_key_(std::move(domain_key)),
       name_key_(std::move(name_key)),
       url_(std::move(url)),
-      cookie_partition_key_(std::move(cookie_partition_key)),
+      cookie_partition_key_collection_(
+          std::move(cookie_partition_key_collection)),
       callback_(std::move(callback)),
       same_party_attribute_enabled_(same_party_attribute_enabled),
       task_runner_(base::SingleThreadTaskRunner::GetCurrentDefault()) {
@@ -87,14 +88,22 @@ void CookieMonsterChangeDispatcher::Subscription::DispatchChange(
     }
   }
 
-  if (!change.cookie.IsPartitioned() &&
-      net::CookiePartitionKey::HasNonce(cookie_partition_key_)) {
-    return;
-  }
-
-  if (change.cookie.IsPartitioned() &&
-      change.cookie.PartitionKey() != cookie_partition_key_) {
-    return;
+  if (!cookie_partition_key_collection_.ContainsAllKeys()) {
+    if (cookie_partition_key_collection_.PartitionKeys().empty()) {
+      if (cookie.IsPartitioned()) {
+        return;
+      }
+    } else {
+      DCHECK_EQ(1u, cookie_partition_key_collection_.PartitionKeys().size());
+      const CookiePartitionKey& key =
+          *cookie_partition_key_collection_.PartitionKeys().begin();
+      if (CookiePartitionKey::HasNonce(key) && !cookie.IsPartitioned()) {
+        return;
+      }
+      if (cookie.IsPartitioned() && key != *cookie.PartitionKey()) {
+        return;
+      }
+    }
   }
 
   // TODO(mmenke, pwnall): Run callbacks synchronously?
@@ -155,7 +164,8 @@ CookieMonsterChangeDispatcher::AddCallbackForCookie(
 
   std::unique_ptr<Subscription> subscription = std::make_unique<Subscription>(
       weak_ptr_factory_.GetWeakPtr(), DomainKey(url), NameKey(name), url,
-      cookie_partition_key, same_party_attribute_enabled_, std::move(callback));
+      CookiePartitionKeyCollection::FromOptional(cookie_partition_key),
+      same_party_attribute_enabled_, std::move(callback));
 
   LinkSubscription(subscription.get());
   return subscription;
@@ -170,7 +180,8 @@ CookieMonsterChangeDispatcher::AddCallbackForUrl(
 
   std::unique_ptr<Subscription> subscription = std::make_unique<Subscription>(
       weak_ptr_factory_.GetWeakPtr(), DomainKey(url),
-      std::string(kGlobalNameKey), url, cookie_partition_key,
+      std::string(kGlobalNameKey), url,
+      CookiePartitionKeyCollection::FromOptional(cookie_partition_key),
       same_party_attribute_enabled_, std::move(callback));
 
   LinkSubscription(subscription.get());
@@ -184,7 +195,8 @@ CookieMonsterChangeDispatcher::AddCallbackForAllChanges(
 
   std::unique_ptr<Subscription> subscription = std::make_unique<Subscription>(
       weak_ptr_factory_.GetWeakPtr(), std::string(kGlobalDomainKey),
-      std::string(kGlobalNameKey), GURL(""), absl::nullopt,
+      std::string(kGlobalNameKey), GURL(""),
+      CookiePartitionKeyCollection::ContainsAll(),
       same_party_attribute_enabled_, std::move(callback));
 
   LinkSubscription(subscription.get());
diff --git a/net/cookies/cookie_monster_change_dispatcher.h b/net/cookies/cookie_monster_change_dispatcher.h
index dd022adb2ace2..31ca1e979ce11 100644
--- a/net/cookies/cookie_monster_change_dispatcher.h
+++ b/net/cookies/cookie_monster_change_dispatcher.h
@@ -18,6 +18,7 @@
 #include "base/task/single_thread_task_runner.h"
 #include "base/threading/thread_checker.h"
 #include "net/cookies/cookie_change_dispatcher.h"
+#include "net/cookies/cookie_partition_key_collection.h"
 #include "url/gurl.h"
 
 namespace net {
@@ -77,7 +78,7 @@ class CookieMonsterChangeDispatcher : public CookieChangeDispatcher {
                  std::string domain_key,
                  std::string name_key,
                  GURL url,
-                 absl::optional<CookiePartitionKey> cookie_partition_key,
+                 CookiePartitionKeyCollection cookie_partition_key_collection,
                  bool same_party_attribute_enabled,
                  net::CookieChangeCallback callback);
 
@@ -104,8 +105,7 @@ class CookieMonsterChangeDispatcher : public CookieChangeDispatcher {
     const std::string domain_key_;  // kGlobalDomainKey means no filtering.
     const std::string name_key_;    // kGlobalNameKey means no filtering.
     const GURL url_;                // empty() means no URL-based filtering.
-    // nullopt means all Partitioned cookies will be ignored.
-    const absl::optional<CookiePartitionKey> cookie_partition_key_;
+    const CookiePartitionKeyCollection cookie_partition_key_collection_;
     const net::CookieChangeCallback callback_;
     bool same_party_attribute_enabled_;
 
diff --git a/net/cookies/cookie_store_change_unittest.h b/net/cookies/cookie_store_change_unittest.h
index 08b0d0643353b..a1b06fc580bec 100644
--- a/net/cookies/cookie_store_change_unittest.h
+++ b/net/cookies/cookie_store_change_unittest.h
@@ -707,6 +707,38 @@ TYPED_TEST_P(CookieStoreChangeGlobalTest, ChangeIncludesCookieAccessSemantics) {
       cookie_changes[3].access_result.access_semantics));
 }
 
+TYPED_TEST_P(CookieStoreChangeGlobalTest, PartitionedCookies) {
+  if (!TypeParam::supports_named_cookie_tracking ||
+      !TypeParam::supports_partitioned_cookies) {
+    return;
+  }
+
+  CookieStore* cs = this->GetCookieStore();
+
+  // Test that all partitioned cookies are visible to global change listeners.
+  std::vector<CookieChangeInfo> all_cookie_changes;
+  std::unique_ptr<CookieChangeSubscription> global_subscription =
+      cs->GetChangeDispatcher().AddCallbackForAllChanges(base::BindRepeating(
+          &CookieStoreChangeTestBase<TypeParam>::OnCookieChange,
+          base::Unretained(&all_cookie_changes)));
+  // Set two cookies in two separate partitions, one with nonce.
+  this->CreateAndSetCookie(
+      cs, GURL("https://www.example2.com"),
+      "__Host-a=1; Secure; Path=/; Partitioned",
+      CookieOptions::MakeAllInclusive(), absl::nullopt /* server_time */,
+      absl::nullopt /* system_time */,
+      CookiePartitionKey::FromURLForTesting(GURL("https://www.foo.com")));
+  this->CreateAndSetCookie(
+      cs, GURL("https://www.example2.com"),
+      "__Host-a=2; Secure; Path=/; Partitioned; Max-Age=7200",
+      CookieOptions::MakeAllInclusive(), absl::nullopt /* server_time */,
+      absl::nullopt /* system_time */,
+      CookiePartitionKey::FromURLForTesting(GURL("https://www.bar.com"),
+                                            base::UnguessableToken::Create()));
+  this->DeliverChangeNotifications();
+  ASSERT_EQ(2u, all_cookie_changes.size());
+}
+
 TYPED_TEST_P(CookieStoreChangeUrlTest, NoCookie) {
   if (!TypeParam::supports_url_cookie_tracking)
     return;
@@ -1793,6 +1825,54 @@ TYPED_TEST_P(CookieStoreChangeUrlTest, PartitionedCookies) {
   ASSERT_LT(2u, cookie_changes.size());
 }
 
+TYPED_TEST_P(CookieStoreChangeUrlTest, PartitionedCookies_WithNonce) {
+  if (!TypeParam::supports_named_cookie_tracking ||
+      !TypeParam::supports_partitioned_cookies) {
+    return;
+  }
+
+  CookieStore* cs = this->GetCookieStore();
+  base::UnguessableToken nonce = base::UnguessableToken::Create();
+
+  std::vector<CookieChangeInfo> cookie_changes;
+  std::unique_ptr<CookieChangeSubscription> subscription =
+      cs->GetChangeDispatcher().AddCallbackForUrl(
+          GURL("https://www.example.com"),
+          CookiePartitionKey::FromURLForTesting(GURL("https://www.foo.com"),
+                                                nonce),
+          base::BindRepeating(
+              &CookieStoreChangeTestBase<TypeParam>::OnCookieChange,
+              base::Unretained(&cookie_changes)));
+
+  // Should not see changes to an unpartitioned cookie.
+  this->CreateAndSetCookie(cs, GURL("https://www.example.com"),
+                           "__Host-a=1; Secure; Path=/",
+                           CookieOptions::MakeAllInclusive());
+  this->DeliverChangeNotifications();
+  ASSERT_EQ(0u, cookie_changes.size());
+
+  // Set partitioned cookie without nonce. Should not see the change.
+  this->CreateAndSetCookie(
+      cs, GURL("https://www.example.com"),
+      "__Host-a=2; Secure; Path=/; Partitioned",
+      CookieOptions::MakeAllInclusive(), absl::nullopt /* server_time */,
+      absl::nullopt /* system_time */,
+      CookiePartitionKey::FromURLForTesting(GURL("https://www.foo.com")));
+  this->DeliverChangeNotifications();
+  ASSERT_EQ(0u, cookie_changes.size());
+
+  // Set partitioned cookie with nonce.
+  this->CreateAndSetCookie(cs, GURL("https://www.example.com"),
+                           "__Host-a=3; Secure; Path=/; Partitioned",
+                           CookieOptions::MakeAllInclusive(),
+                           absl::nullopt /* server_time */,
+                           absl::nullopt /* system_time */,
+                           CookiePartitionKey::FromURLForTesting(
+                               GURL("https://www.foo.com"), nonce));
+  this->DeliverChangeNotifications();
+  ASSERT_EQ(1u, cookie_changes.size());
+}
+
 TYPED_TEST_P(CookieStoreChangeNamedTest, NoCookie) {
   if (!TypeParam::supports_named_cookie_tracking)
     return;
@@ -3031,6 +3111,54 @@ TYPED_TEST_P(CookieStoreChangeNamedTest, PartitionedCookies) {
   ASSERT_LT(2u, cookie_changes.size());
 }
 
+TYPED_TEST_P(CookieStoreChangeNamedTest, PartitionedCookies_WithNonce) {
+  if (!TypeParam::supports_named_cookie_tracking ||
+      !TypeParam::supports_partitioned_cookies) {
+    return;
+  }
+
+  CookieStore* cs = this->GetCookieStore();
+  base::UnguessableToken nonce = base::UnguessableToken::Create();
+
+  std::vector<CookieChangeInfo> cookie_changes;
+  std::unique_ptr<CookieChangeSubscription> subscription =
+      cs->GetChangeDispatcher().AddCallbackForCookie(
+          GURL("https://www.example.com"), "__Host-a",
+          CookiePartitionKey::FromURLForTesting(GURL("https://www.foo.com"),
+                                                nonce),
+          base::BindRepeating(
+              &CookieStoreChangeTestBase<TypeParam>::OnCookieChange,
+              base::Unretained(&cookie_changes)));
+
+  // Should not see changes to an unpartitioned cookie.
+  this->CreateAndSetCookie(cs, GURL("https://www.example.com"),
+                           "__Host-a=1; Secure; Path=/",
+                           CookieOptions::MakeAllInclusive());
+  this->DeliverChangeNotifications();
+  ASSERT_EQ(0u, cookie_changes.size());
+
+  // Set partitioned cookie without nonce. Should not see the change.
+  this->CreateAndSetCookie(
+      cs, GURL("https://www.example.com"),
+      "__Host-a=2; Secure; Path=/; Partitioned",
+      CookieOptions::MakeAllInclusive(), absl::nullopt /* server_time */,
+      absl::nullopt /* system_time */,
+      CookiePartitionKey::FromURLForTesting(GURL("https://www.foo.com")));
+  this->DeliverChangeNotifications();
+  ASSERT_EQ(0u, cookie_changes.size());
+
+  // Set partitioned cookie with nonce.
+  this->CreateAndSetCookie(cs, GURL("https://www.example.com"),
+                           "__Host-a=3; Secure; Path=/; Partitioned",
+                           CookieOptions::MakeAllInclusive(),
+                           absl::nullopt /* server_time */,
+                           absl::nullopt /* system_time */,
+                           CookiePartitionKey::FromURLForTesting(
+                               GURL("https://www.foo.com"), nonce));
+  this->DeliverChangeNotifications();
+  ASSERT_EQ(1u, cookie_changes.size());
+}
+
 REGISTER_TYPED_TEST_SUITE_P(CookieStoreChangeGlobalTest,
                             NoCookie,
                             InitialCookie,
@@ -3046,7 +3174,8 @@ REGISTER_TYPED_TEST_SUITE_P(CookieStoreChangeGlobalTest,
                             DeregisterRace,
                             DeregisterRaceMultiple,
                             MultipleSubscriptions,
-                            ChangeIncludesCookieAccessSemantics);
+                            ChangeIncludesCookieAccessSemantics,
+                            PartitionedCookies);
 
 REGISTER_TYPED_TEST_SUITE_P(CookieStoreChangeUrlTest,
                             NoCookie,
@@ -3071,7 +3200,8 @@ REGISTER_TYPED_TEST_SUITE_P(CookieStoreChangeUrlTest,
                             DifferentSubscriptionsFiltering,
                             MultipleSubscriptions,
                             ChangeIncludesCookieAccessSemantics,
-                            PartitionedCookies);
+                            PartitionedCookies,
+                            PartitionedCookies_WithNonce);
 
 REGISTER_TYPED_TEST_SUITE_P(CookieStoreChangeNamedTest,
                             NoCookie,
@@ -3098,7 +3228,8 @@ REGISTER_TYPED_TEST_SUITE_P(CookieStoreChangeNamedTest,
                             MultipleSubscriptions,
                             SubscriptionOutlivesStore,
                             ChangeIncludesCookieAccessSemantics,
-                            PartitionedCookies);
+                            PartitionedCookies,
+                            PartitionedCookies_WithNonce);
 
 }  // namespace net
 
