From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: fgei <fgei@gmail.com>
Date: Fri, 4 Aug 2023 13:18:02 +0000
Subject: [PATCH] Revert "Reland "Add crash logging to debug a state desync
 between browser and renderer.""

This reverts commit 1e96ff34c7156ca0bb0e47dc239a5081b3202221.
---
 base/debug/stack_trace.h                      | 20 ++--
 .../renderer_host/render_frame_host_impl.cc   | 96 +------------------
 .../renderer_host/render_frame_host_impl.h    |  5 -
 .../web_contents_impl_browsertest.cc          |  4 +-
 content/common/frame.mojom                    | 24 +----
 content/renderer/render_frame_impl.cc         | 52 +---------
 content/renderer/render_frame_impl.h          | 10 +-
 .../renderer/render_frame_impl_browsertest.cc | 10 +-
 8 files changed, 20 insertions(+), 201 deletions(-)

diff --git a/base/debug/stack_trace.h b/base/debug/stack_trace.h
index ef208def8b102..ef4a1c6659689 100644
--- a/base/debug/stack_trace.h
+++ b/base/debug/stack_trace.h
@@ -64,16 +64,6 @@ BASE_EXPORT uintptr_t GetStackEnd();
 // can later see where the given object was created from.
 class BASE_EXPORT StackTrace {
  public:
-#if BUILDFLAG(IS_ANDROID)
-  // TODO(https://crbug.com/925525): Testing indicates that Android has issues
-  // with a larger value here, so leave Android at 62.
-  static constexpr size_t kMaxTraces = 62;
-#else
-  // For other platforms, use 250. This seems reasonable without
-  // being huge.
-  static constexpr size_t kMaxTraces = 250;
-#endif
-
   // Creates a stacktrace from the current location.
   StackTrace();
 
@@ -134,6 +124,16 @@ class BASE_EXPORT StackTrace {
   void InitTrace(const _CONTEXT* context_record);
 #endif
 
+#if BUILDFLAG(IS_ANDROID)
+  // TODO(https://crbug.com/925525): Testing indicates that Android has issues
+  // with a larger value here, so leave Android at 62.
+  static constexpr int kMaxTraces = 62;
+#else
+  // For other platforms, use 250. This seems reasonable without
+  // being huge.
+  static constexpr int kMaxTraces = 250;
+#endif
+
   void* trace_[kMaxTraces];
 
   // The number of valid frames in |trace_|.
diff --git a/content/browser/renderer_host/render_frame_host_impl.cc b/content/browser/renderer_host/render_frame_host_impl.cc
index 8525270e85ccb..596f7bf505023 100644
--- a/content/browser/renderer_host/render_frame_host_impl.cc
+++ b/content/browser/renderer_host/render_frame_host_impl.cc
@@ -15,7 +15,6 @@
 #include "base/containers/cxx20_erase.h"
 #include "base/debug/crash_logging.h"
 #include "base/debug/dump_without_crashing.h"
-#include "base/debug/stack_trace.h"
 #include "base/feature_list.h"
 #include "base/functional/bind.h"
 #include "base/functional/callback_helpers.h"
@@ -3395,86 +3394,6 @@ void RenderFrameHostImpl::SetMojomFrameRemote(
   frame_.Bind(std::move(frame_remote));
 }
 
-namespace {
-
-class DebugHelperForCrbug1425281 : public mojom::DebugHelperForCrbug1425281 {
- public:
-  explicit DebugHelperForCrbug1425281(
-      const base::debug::StackTrace& create_rfh_stack_trace,
-      const absl::optional<base::debug::StackTrace>&
-          last_commit_navigation_stack_trace,
-      RenderFrameHostImpl::LifecycleStateImpl lifecycle_state,
-      bool page_is_primary,
-      bool browser_is_outermost_main_frame,
-      bool browser_has_parent,
-      bool browser_is_speculative)
-      : create_rfh_stack_trace_(create_rfh_stack_trace),
-        last_commit_navigation_stack_trace_(last_commit_navigation_stack_trace),
-        lifecycle_state_(lifecycle_state),
-        page_is_primary_(page_is_primary),
-        browser_is_outermost_main_frame_(browser_is_outermost_main_frame),
-        browser_has_parent_(browser_has_parent),
-        browser_is_speculative_(browser_is_speculative) {}
-
-  void Failed(mojom::Crbug1425281DebugInfoPtr debug_info) override {
-    base::debug::StackTrace create_rfh_stack_trace = create_rfh_stack_trace_;
-    absl::optional<base::debug::StackTrace> last_commit_navigation_stack_trace =
-        last_commit_navigation_stack_trace_;
-    base::debug::StackTrace delete_render_frame_stack_trace =
-        delete_render_frame_stack_trace_;
-
-    absl::optional<std::array<const void*, base::debug::StackTrace::kMaxTraces>>
-        added_to_frame_tree_stack_trace;
-    if (debug_info->added_to_frame_tree_stack_trace) {
-      added_to_frame_tree_stack_trace.emplace();
-      const size_t addresses_count =
-          std::min(base::debug::StackTrace::kMaxTraces,
-                   debug_info->added_to_frame_tree_stack_trace->size());
-      for (size_t i = 0; i < addresses_count; ++i) {
-        (*added_to_frame_tree_stack_trace)[i] =
-            reinterpret_cast<void*>(static_cast<uintptr_t>(
-                (*debug_info->added_to_frame_tree_stack_trace)[i]));
-      }
-    }
-
-    const RenderFrameHostImpl::LifecycleStateImpl lifecycle_state =
-        lifecycle_state_;
-    bool page_is_primary = page_is_primary_;
-    bool browser_is_outermost_main_frame = browser_is_outermost_main_frame_;
-    bool browser_has_parent = browser_has_parent_;
-    bool browser_is_speculative = browser_is_speculative_;
-    base::debug::Alias(&lifecycle_state);
-    base::debug::Alias(&page_is_primary);
-    base::debug::Alias(&browser_is_outermost_main_frame);
-    base::debug::Alias(&browser_has_parent);
-    base::debug::Alias(&browser_is_speculative);
-    base::debug::Alias(&create_rfh_stack_trace);
-    base::debug::Alias(&last_commit_navigation_stack_trace);
-    base::debug::Alias(&delete_render_frame_stack_trace);
-
-    bool renderer_is_main_frame = debug_info->is_main_frame;
-    bool renderer_is_provisional = debug_info->is_provisional;
-    base::debug::Alias(&renderer_is_main_frame);
-    base::debug::Alias(&renderer_is_provisional);
-    base::debug::Alias(&added_to_frame_tree_stack_trace);
-
-    base::debug::DumpWithoutCrashing();
-  }
-
- private:
-  const base::debug::StackTrace create_rfh_stack_trace_;
-  const absl::optional<base::debug::StackTrace>
-      last_commit_navigation_stack_trace_;
-  const RenderFrameHostImpl::LifecycleStateImpl lifecycle_state_;
-  const bool page_is_primary_;
-  const bool browser_is_outermost_main_frame_;
-  const bool browser_has_parent_;
-  const bool browser_is_speculative_;
-  const base::debug::StackTrace delete_render_frame_stack_trace_;
-};
-
-}  // namespace
-
 void RenderFrameHostImpl::DeleteRenderFrame(
     mojom::FrameDeleteIntention intent) {
   TRACE_EVENT("navigation", "RenderFrameHostImpl::DeleteRenderFrame",
@@ -3485,19 +3404,7 @@ void RenderFrameHostImpl::DeleteRenderFrame(
     return;
 
   if (IsRenderFrameLive()) {
-    mojo::PendingRemote<mojom::DebugHelperForCrbug1425281> helper_remote;
-    if (intent == mojom::FrameDeleteIntention::
-                      kSpeculativeMainFrameForNavigationCancelled) {
-      mojo::MakeSelfOwnedReceiver(
-          std::make_unique<DebugHelperForCrbug1425281>(
-              create_rfh_stack_trace_, last_commit_navigation_stack_trace_,
-              lifecycle_state_, GetPage().IsPrimary(), IsOutermostMainFrame(),
-              !!GetParent(),
-              frame_tree_node()->render_manager()->speculative_frame_host() ==
-                  this),
-          helper_remote.InitWithNewPipeAndPassReceiver());
-    }
-    GetMojomFrameInRenderer()->Delete(intent, std::move(helper_remote));
+    GetMojomFrameInRenderer()->Delete(intent);
 
     // We change the lifecycle state to kRunningUnloadHandlers at the end of
     // this method to wait until OnUnloadACK() is invoked.
@@ -13508,7 +13415,6 @@ void RenderFrameHostImpl::SendCommitNavigation(
       std::move(resource_cache_remote), std::move(cookie_manager_info),
       std::move(storage_info),
       BuildCommitNavigationCallback(navigation_request));
-  last_commit_navigation_stack_trace_.emplace();
   base::UmaHistogramTimes(
       base::StrCat({"Navigation.SendCommitNavigationTime.",
                     IsOutermostMainFrame() ? "MainFrame" : "Subframe"}),
diff --git a/content/browser/renderer_host/render_frame_host_impl.h b/content/browser/renderer_host/render_frame_host_impl.h
index de515c2cfb6fa..0fa39da495631 100644
--- a/content/browser/renderer_host/render_frame_host_impl.h
+++ b/content/browser/renderer_host/render_frame_host_impl.h
@@ -20,7 +20,6 @@
 #include "base/containers/flat_map.h"
 #include "base/containers/flat_set.h"
 #include "base/containers/unique_ptr_adapters.h"
-#include "base/debug/stack_trace.h"
 #include "base/files/file_path.h"
 #include "base/functional/callback.h"
 #include "base/functional/function_ref.h"
@@ -5170,10 +5169,6 @@ class CONTENT_EXPORT RenderFrameHostImpl
   absl::optional<blink::DocumentToken>
       fullscreen_document_on_document_element_ready_ = absl::nullopt;
 
-  // TODO(crbug.com/1425281): Temporary for debugging.
-  const base::debug::StackTrace create_rfh_stack_trace_;
-  absl::optional<base::debug::StackTrace> last_commit_navigation_stack_trace_;
-
   // WeakPtrFactories are the last members, to ensure they are destroyed before
   // all other fields of `this`.
   base::WeakPtrFactory<RenderFrameHostImpl> weak_ptr_factory_{this};
diff --git a/content/browser/web_contents/web_contents_impl_browsertest.cc b/content/browser/web_contents/web_contents_impl_browsertest.cc
index 13a33b08d6b05..3ca7427d00119 100644
--- a/content/browser/web_contents/web_contents_impl_browsertest.cc
+++ b/content/browser/web_contents/web_contents_impl_browsertest.cc
@@ -3590,7 +3590,7 @@ IN_PROC_BROWSER_TEST_F(WebContentsImplBrowserTest, FrozenAndUnfrozenIPC) {
 
   // Delete an iframe when the page is active(not frozen), which should succeed.
   rfh_b->GetMojomFrameInRenderer()->Delete(
-      mojom::FrameDeleteIntention::kNotMainFrame, mojo::NullRemote());
+      mojom::FrameDeleteIntention::kNotMainFrame);
   delete_rfh_b.WaitUntilDeleted();
   EXPECT_TRUE(delete_rfh_b.deleted());
   EXPECT_FALSE(delete_rfh_c.deleted());
@@ -3601,7 +3601,7 @@ IN_PROC_BROWSER_TEST_F(WebContentsImplBrowserTest, FrozenAndUnfrozenIPC) {
 
   // Try to delete an iframe, and succeeds because the message is unfreezable.
   rfh_c->GetMojomFrameInRenderer()->Delete(
-      mojom::FrameDeleteIntention::kNotMainFrame, mojo::NullRemote());
+      mojom::FrameDeleteIntention::kNotMainFrame);
   delete_rfh_c.WaitUntilDeleted();
   EXPECT_TRUE(delete_rfh_c.deleted());
 }
diff --git a/content/common/frame.mojom b/content/common/frame.mojom
index a1757960b139d..ebb4d58527586 100644
--- a/content/common/frame.mojom
+++ b/content/common/frame.mojom
@@ -374,21 +374,6 @@ enum FrameDeleteIntention {
   kSpeculativeMainFrameForNavigationCancelled,
 };
 
-struct Crbug1425281DebugInfo {
-  // The renderer stack trace when the frame was added to the frame tree. This
-  // is just an array of instruction pointers and should not be used in any way
-  // other than being captured by base::debug::Alias.
-  array<uint64>? added_to_frame_tree_stack_trace;
-  // True if the frame is a main frame.
-  bool is_main_frame;
-  // True if the associated WebFrame reports that `IsProvisional()` is true.
-  bool is_provisional;
-};
-
-interface DebugHelperForCrbug1425281 {
-  Failed(Crbug1425281DebugInfo debug_info);
-};
-
 // Implemented by the frame provider, and must be associated with other content
 // mojoms bound to frames, widgets, views, and currently also with the legacy
 // IPC channel.
@@ -446,14 +431,7 @@ interface Frame {
   // wants to detach, or for speculative main frames which are owned by the
   // browser process. Committed main frames are owned by the renderer's WebView
   // and can not be deleted directly.
-  //
-  // `helper` is temporary to help debug crbug.com/1425281. It is unclear how
-  // the browser process is ending up in a state where it deletes what it thinks
-  // is a speculative render frame but the renderer has somehow already
-  // committed a navigation. It will only be set if `intent` is
-  // `kSpeculativeMainFrameForNavigationCancelled`.
-  Delete(FrameDeleteIntention intention,
-         pending_remote<DebugHelperForCrbug1425281>? helper);
+  Delete(FrameDeleteIntention intention);
 
   // Requests that a speculative RenderFrameHost which the browser has already
   // sent a `CommitNavigation()` to should swap itself back out for a
diff --git a/content/renderer/render_frame_impl.cc b/content/renderer/render_frame_impl.cc
index 41dee1bb20040..98dbcf21c660e 100644
--- a/content/renderer/render_frame_impl.cc
+++ b/content/renderer/render_frame_impl.cc
@@ -1491,11 +1491,7 @@ RenderFrameImpl* RenderFrameImpl::CreateMainFrame(
   web_frame_widget->ApplyVisualProperties(
       params->widget_params->visual_properties);
 
-  CHECK(!render_frame->in_frame_tree_);
   render_frame->in_frame_tree_ = true;
-#if !defined(ARCH_CPU_ARM64)
-  render_frame->added_to_frame_tree_stack_trace_.emplace();
-#endif
   render_frame->Initialize(nullptr);
 
   if (params->subresource_loader_factories
@@ -1603,11 +1599,7 @@ void RenderFrameImpl::CreateFrame(
 
     // The RenderFrame is created and inserted into the frame tree in the above
     // call to createLocalChild.
-    CHECK(!render_frame->in_frame_tree_);
     render_frame->in_frame_tree_ = true;
-#if !defined(ARCH_CPU_ARM64)
-    render_frame->added_to_frame_tree_stack_trace_.emplace();
-#endif
   } else {
     WebFrame* previous_web_frame =
         WebFrame::FromFrameToken(previous_frame_token.value());
@@ -2116,9 +2108,7 @@ void RenderFrameImpl::Unload(
   task_runner->PostTask(FROM_HERE, std::move(send_unload_ack));
 }
 
-void RenderFrameImpl::Delete(
-    mojom::FrameDeleteIntention intent,
-    mojo::PendingRemote<mojom::DebugHelperForCrbug1425281> helper) {
+void RenderFrameImpl::Delete(mojom::FrameDeleteIntention intent) {
   TRACE_EVENT(
       "navigation", "RenderFrameImpl::Delete", [&](perfetto::EventContext ctx) {
         auto* event = ctx.event<perfetto::protos::pbzero::ChromeTrackEvent>();
@@ -2162,36 +2152,10 @@ void RenderFrameImpl::Delete(
       // main frame when a commit (and ownership transfer) is imminent.
       // TODO(dcheng): This is the case of https://crbug.com/838348.
       DCHECK(is_main_frame_);
-      // This check is not enabled on Android, since it was previously much
-      // easier to trigger this race there, and it's still unclear what's
-      // causing the new race.
 #if !BUILDFLAG(IS_ANDROID)
-      if (in_frame_tree_) {
-        // This remote should always be non-null when intent ==
-        // kSpeculativeMainFrameForNavigationCancelled.
-        mojo::Remote<mojom::DebugHelperForCrbug1425281> helper_remote(
-            std::move(helper));
-        size_t addresses_count = 0;
-        const void* const* addresses_ptr =
-            added_to_frame_tree_stack_trace_
-                ? added_to_frame_tree_stack_trace_->Addresses(&addresses_count)
-                : nullptr;
-        absl::optional<std::vector<uint64_t>> addresses;
-        if (addresses_ptr) {
-          addresses.emplace();
-          addresses->reserve(addresses_count);
-          for (size_t i = 0; i < addresses_count; ++i) {
-            addresses->push_back(reinterpret_cast<uintptr_t>(addresses_ptr[i]));
-          }
-        }
-        auto debug_info = mojom::Crbug1425281DebugInfo::New(
-            addresses, is_main_frame_, frame_->IsProvisional());
-        helper_remote->Failed(std::move(debug_info));
-        helper_remote.reset();
-      } else {
-        // No need to signal anything; only failure is signalled.
-        helper.reset();
-      }
+      // This check is not enabled on Android, since it seems like it's much
+      // easier to trigger data races there.
+      CHECK(!in_frame_tree_);
 #endif  // !BUILDFLAG(IS_ANDROID)
       break;
   }
@@ -3570,11 +3534,7 @@ blink::WebLocalFrame* RenderFrameImpl::CreateChildFrame(
       child_render_frame->blink_interface_registry_.get(), frame_token);
   finish_creation(web_frame, document_token);
 
-  CHECK(!child_render_frame->in_frame_tree_);
   child_render_frame->in_frame_tree_ = true;
-#if !defined(ARCH_CPU_ARM64)
-  child_render_frame->added_to_frame_tree_stack_trace_.emplace();
-#endif
   child_render_frame->Initialize(/*parent=*/GetWebFrame());
 
   return web_frame;
@@ -5077,11 +5037,7 @@ bool RenderFrameImpl::SwapIn(WebFrame* previous_web_frame) {
 
   // `previous_web_frame` is now detached, and should no longer be referenced.
 
-  CHECK(!in_frame_tree_);
   in_frame_tree_ = true;
-#if !defined(ARCH_CPU_ARM64)
-  added_to_frame_tree_stack_trace_.emplace();
-#endif
 
   // If this is the main frame going from a remote frame to a local frame,
   // it needs to set RenderViewImpl's pointer for the main frame to itself.
diff --git a/content/renderer/render_frame_impl.h b/content/renderer/render_frame_impl.h
index 91a8fdd2b9b93..808e521727cdf 100644
--- a/content/renderer/render_frame_impl.h
+++ b/content/renderer/render_frame_impl.h
@@ -17,7 +17,6 @@
 #include <vector>
 
 #include "base/containers/id_map.h"
-#include "base/debug/stack_trace.h"
 #include "base/files/file_path.h"
 #include "base/functional/callback.h"
 #include "base/gtest_prod_util.h"
@@ -860,9 +859,7 @@ class CONTENT_EXPORT RenderFrameImpl
       blink::mojom::RemoteFrameInterfacesFromBrowserPtr remote_frame_interfaces,
       blink::mojom::RemoteMainFrameInterfacesPtr remote_main_frame_interfaces)
       override;
-  void Delete(
-      mojom::FrameDeleteIntention intent,
-      mojo::PendingRemote<mojom::DebugHelperForCrbug1425281> helper) override;
+  void Delete(mojom::FrameDeleteIntention intent) override;
   void UndoCommitNavigation(
       bool is_loading,
       blink::mojom::FrameReplicationStatePtr replicated_frame_state,
@@ -1193,11 +1190,6 @@ class CONTENT_EXPORT RenderFrameImpl
   // TODO(dcheng): Remove this once we have FrameTreeHandle and can use the
   // Blink Web* layer to check for provisional frames.
   bool in_frame_tree_;
-  // TODO(crbug.com/1425281): Temporary for debugging. Note that collecting this
-  // stack trace is limited to non-aarch64 platforms because
-  // base::debug::StackTrace appears to crash on CrOS aarch64 in the renderer
-  // sandbox. See https://crbug.com/1457701.
-  absl::optional<base::debug::StackTrace> added_to_frame_tree_stack_trace_;
 
   const int routing_id_;
 
diff --git a/content/renderer/render_frame_impl_browsertest.cc b/content/renderer/render_frame_impl_browsertest.cc
index e62e02e4da629..dd230fd02a564 100644
--- a/content/renderer/render_frame_impl_browsertest.cc
+++ b/content/renderer/render_frame_impl_browsertest.cc
@@ -399,7 +399,7 @@ TEST_F(RenderFrameImplTest, NoCrashWhenDeletingFrameDuringFind) {
       false /* async */);
 
   static_cast<mojom::Frame*>(frame())->Delete(
-      mojom::FrameDeleteIntention::kNotMainFrame, mojo::NullRemote());
+      mojom::FrameDeleteIntention::kNotMainFrame);
 }
 
 TEST_F(RenderFrameImplTest, AutoplayFlags) {
@@ -1119,12 +1119,4 @@ TEST_F(RenderFrameImplTest, SendUpdateCancelsPending) {
   EXPECT_FALSE(main_frame->delayed_state_sync_timer_.IsRunning());
 }
 
-TEST_F(RenderFrameImplTest, DebugHelperForCrbug1425281) {
-  mojo::PendingReceiver<mojom::DebugHelperForCrbug1425281> receiver;
-  static_cast<mojom::Frame*>(GetMainRenderFrame())
-      ->Delete(mojom::FrameDeleteIntention::
-                   kSpeculativeMainFrameForNavigationCancelled,
-               receiver.InitWithNewPipeAndPassRemote());
-}
-
 }  // namespace content
