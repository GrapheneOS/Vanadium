From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: fgei <fgei@gmail.com>
Date: Sun, 14 Jul 2024 02:58:02 +0000
Subject: [PATCH] fixup! content-filtering: Add update handling of subresource
 filter component from config apk

---
 .../subresource_filter/RulesetUpdater.java    | 20 ++++++++++++++++--
 .../android/ruleset_updater.cc                | 21 +++++++++++++++----
 .../android/ruleset_updater.h                 | 11 ++++++----
 3 files changed, 42 insertions(+), 10 deletions(-)

diff --git a/chrome/browser/subresource_filter/android/java/src/org/chromium/chrome/browser/subresource_filter/RulesetUpdater.java b/chrome/browser/subresource_filter/android/java/src/org/chromium/chrome/browser/subresource_filter/RulesetUpdater.java
index 06b2010fcfe9c..d988635edbac4 100644
--- a/chrome/browser/subresource_filter/android/java/src/org/chromium/chrome/browser/subresource_filter/RulesetUpdater.java
+++ b/chrome/browser/subresource_filter/android/java/src/org/chromium/chrome/browser/subresource_filter/RulesetUpdater.java
@@ -7,12 +7,20 @@
 
 package org.chromium.chrome.browser.subresource_filter;
 
+import android.content.Context;
+import android.system.ErrnoException;
+
+import org.chromium.base.ContextUtils;
 import org.chromium.base.Log;
 import org.chromium.components.subresource_filter.SubresourceFilterFetching;
 import org.jni_zero.JNINamespace;
 import org.jni_zero.NativeMethods;
 
+import java.io.InterruptedIOException;
+
+import app.vanadium.config.SubresourceFilterComponentUtils;
 import app.vanadium.config.VanadiumConfParser;
+import app.vanadium.ext.utils.AtomicFile2;
 
 @JNINamespace("subresource_filter")
 public class RulesetUpdater {
@@ -56,7 +64,15 @@ public class RulesetUpdater {
             return;
         }
 
-        RulesetUpdaterJni.get().update(Long.toString(unindexedContentVersionCode));
+        SubresourceFilterComponentUtils.writeCurrentContents();
+
+        String unindexedContentFilePath = SubresourceFilterComponentUtils.getFilePathForParsing();
+        if (unindexedContentFilePath == null) {
+            Log.w(TAG, "Unable to update ruleset with ignoreVersionCheck: " + ignoreVersionCheck);
+            return;
+        }
+
+        RulesetUpdaterJni.get().update(Long.toString(unindexedContentVersionCode), unindexedContentFilePath);
     }
 
     public static String version() {
@@ -65,7 +81,7 @@ public class RulesetUpdater {
 
     @NativeMethods
     interface Natives {
-        void update(String unindexedContentVersion);
+        void update(String unindexedContentVersion, String unindexedContentPath);
         String version();
     }
 }
diff --git a/chrome/browser/subresource_filter/android/ruleset_updater.cc b/chrome/browser/subresource_filter/android/ruleset_updater.cc
index 6dc7ccc340cbf..afdad76914a22 100644
--- a/chrome/browser/subresource_filter/android/ruleset_updater.cc
+++ b/chrome/browser/subresource_filter/android/ruleset_updater.cc
@@ -1,4 +1,9 @@
-// Copyright 2022-2023 Zoraver Kang
+// Copyright 2023-2024 GrapheneOS
+// Use of this source code is governed by a GPL-2.0-style license that can be
+// found in the LICENSE file.
+//
+// Copyright 2022-2023 Zoraver Kang, who initially wrote this class
+// and did the preliminary research needed to support content filtering updates.
 
 #include "chrome/browser/subresource_filter/android/ruleset_updater.h"
 
@@ -17,16 +22,24 @@ using base::android::ScopedJavaLocalRef;
 namespace subresource_filter {
 
 static void JNI_RulesetUpdater_Update(JNIEnv *env,
-    const JavaParamRef<jstring>& junindexed_content_version) {
+    const JavaParamRef<jstring>& junindexed_content_version,
+    const JavaParamRef<jstring>& junindexed_ruleset_path) {
   const std::string unindexed_content_version =
       ConvertJavaStringToUTF8(env, junindexed_content_version);
-  UpdateRuleset(unindexed_content_version);
+  const std::string unindexed_ruleset_path =
+      ConvertJavaStringToUTF8(env, junindexed_ruleset_path);
+
+  UpdateRulesetFromConfig(unindexed_content_version, unindexed_ruleset_path);
 }
 
 // static
-void UpdateRuleset(std::string version) {
+void UpdateRulesetFromConfig(std::string version, std::string path) {
   UnindexedRulesetInfo ruleset_info;
   ruleset_info.content_version = version;
+  // We know that unindexed_ruleset_path is UTF8 since it is the output of
+  // ConvertJavaStringToUTF8().
+  ruleset_info.ruleset_path =
+      base::FilePath::FromUTF8Unsafe(path);
 
   RulesetService *ruleset_service =
       g_browser_process->subresource_filter_ruleset_service();
diff --git a/chrome/browser/subresource_filter/android/ruleset_updater.h b/chrome/browser/subresource_filter/android/ruleset_updater.h
index d2260b5e00f6e..887e2eeeadfbb 100644
--- a/chrome/browser/subresource_filter/android/ruleset_updater.h
+++ b/chrome/browser/subresource_filter/android/ruleset_updater.h
@@ -1,6 +1,9 @@
-// Copyright 2021 The Chromium Authors
-// Use of this source code is governed by a BSD-style license that can be
+// Copyright 2023-2024 GrapheneOS
+// Use of this source code is governed by a GPL-2.0-style license that can be
 // found in the LICENSE file.
+//
+// Copyright 2022-2023 Zoraver Kang, who initially wrote this class
+// and did the preliminary research needed to support content filtering updates.
 
 #ifndef CHROME_BROWSER_SUBRESOURCE_FILTER_ANDROID_RULESET_UPDATER_H_
 #define CHROME_BROWSER_SUBRESOURCE_FILTER_ANDROID_RULESET_UPDATER_H_
@@ -8,7 +11,7 @@
 #include <string>
 
 namespace subresource_filter {
-void UpdateRuleset(std::string version);
+void UpdateRulesetFromConfig(std::string version, std::string path);
 } // namespace subresource_filter
 
-#endif // CHROME_BROWSER_SUBRESOURCE_FILTER_ANDROID_RULESET_UPDATER_H_
\ No newline at end of file
+#endif // CHROME_BROWSER_SUBRESOURCE_FILTER_ANDROID_RULESET_UPDATER_H_
