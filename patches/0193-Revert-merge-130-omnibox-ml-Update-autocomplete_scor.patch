From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: fgei <fgei@gmail.com>
Date: Fri, 27 Sep 2024 02:49:55 +0000
Subject: [PATCH] Revert "[merge 130][omnibox][ml] Update
 autocomplete_scoring_model_metadata."

This reverts commit 58a70d064fc4dddb52a0e3f90d2e025aa339f805.
---
 .../autocomplete_scoring_model_handler.cc     | 50 -------------------
 ...complete_scoring_model_handler_unittest.cc | 40 +--------------
 .../autocomplete_scoring_model_service.cc     | 22 +-------
 .../core/prediction_manager.cc                |  4 +-
 .../autocomplete_scoring_model_metadata.proto | 17 -------
 5 files changed, 4 insertions(+), 129 deletions(-)

diff --git a/components/omnibox/browser/autocomplete_scoring_model_handler.cc b/components/omnibox/browser/autocomplete_scoring_model_handler.cc
index 5fea8fb7edfa1..aaa42913ce6af 100644
--- a/components/omnibox/browser/autocomplete_scoring_model_handler.cc
+++ b/components/omnibox/browser/autocomplete_scoring_model_handler.cc
@@ -296,56 +296,6 @@ AutocompleteScoringModelHandler::ExtractInputFromScoringSignals(
 
         val = static_cast<float>(matches_title_or_host_or_shortcut_text);
       } break;
-      case optimization_guide::proto::
-          SCORING_SIGNAL_TYPE_NUM_INPUT_TERMS_MATCHED_BY_BOOKMARK_TITLE:
-        if (scoring_signals.has_num_input_terms_matched_by_bookmark_title()) {
-          val = static_cast<float>(
-              scoring_signals.num_input_terms_matched_by_bookmark_title());
-        }
-        break;
-      case optimization_guide::proto::SCORING_SIGNAL_TYPE_SITE_ENGAGEMENT:
-        if (scoring_signals.has_site_engagement()) {
-          val = static_cast<float>(scoring_signals.site_engagement());
-        }
-        break;
-      case optimization_guide::proto::
-          SCORING_SIGNAL_TYPE_SEARCH_SUGGEST_RELEVANCE:
-        if (scoring_signals.has_search_suggest_relevance()) {
-          val = static_cast<float>(scoring_signals.search_suggest_relevance());
-        }
-        break;
-      case optimization_guide::proto::
-          SCORING_SIGNAL_TYPE_IS_SEARCH_SUGGEST_ENTITY:
-        if (scoring_signals.has_is_search_suggest_entity()) {
-          val = static_cast<float>(scoring_signals.is_search_suggest_entity());
-        }
-        break;
-      case optimization_guide::proto::SCORING_SIGNAL_TYPE_IS_VERBATIM:
-        if (scoring_signals.has_is_verbatim()) {
-          val = static_cast<float>(scoring_signals.is_verbatim());
-        }
-        break;
-      case optimization_guide::proto::SCORING_SIGNAL_TYPE_IS_NAVSUGGEST:
-        if (scoring_signals.has_is_navsuggest()) {
-          val = static_cast<float>(scoring_signals.is_navsuggest());
-        }
-        break;
-      case optimization_guide::proto::
-          SCORING_SIGNAL_TYPE_IS_SEARCH_SUGGEST_TAIL:
-        if (scoring_signals.has_is_search_suggest_tail()) {
-          val = static_cast<float>(scoring_signals.is_search_suggest_tail());
-        }
-        break;
-      case optimization_guide::proto::SCORING_SIGNAL_TYPE_IS_ANSWER_SUGGEST:
-        if (scoring_signals.has_is_answer_suggest()) {
-          val = static_cast<float>(scoring_signals.is_answer_suggest());
-        }
-        break;
-      case optimization_guide::proto::SCORING_SIGNAL_TYPE_IS_CALCULATOR_SUGGEST:
-        if (scoring_signals.has_is_calculator_suggest()) {
-          val = static_cast<float>(scoring_signals.is_calculator_suggest());
-        }
-        break;
       case optimization_guide::proto::SCORING_SIGNAL_TYPE_UNKNOWN:
       default:
         // Reached when the metadata is updated to have a new signal that
diff --git a/components/omnibox/browser/autocomplete_scoring_model_handler_unittest.cc b/components/omnibox/browser/autocomplete_scoring_model_handler_unittest.cc
index 919a1c78c1b10..c18962ee50648 100644
--- a/components/omnibox/browser/autocomplete_scoring_model_handler_unittest.cc
+++ b/components/omnibox/browser/autocomplete_scoring_model_handler_unittest.cc
@@ -169,25 +169,6 @@ TEST_F(AutocompleteScoringModelHandlerTest,
   *model_metadata.add_scoring_signal_specs() = CreateScoringSignalSpec(
       optimization_guide::proto::
           SCORING_SIGNAL_TYPE_MATCHES_TITLE_OR_HOST_OR_SHORTCUT_TEXT);
-  *model_metadata.add_scoring_signal_specs() = CreateScoringSignalSpec(
-      optimization_guide::proto::
-          SCORING_SIGNAL_TYPE_NUM_INPUT_TERMS_MATCHED_BY_BOOKMARK_TITLE);
-  *model_metadata.add_scoring_signal_specs() = CreateScoringSignalSpec(
-      optimization_guide::proto::SCORING_SIGNAL_TYPE_SITE_ENGAGEMENT);
-  *model_metadata.add_scoring_signal_specs() = CreateScoringSignalSpec(
-      optimization_guide::proto::SCORING_SIGNAL_TYPE_SEARCH_SUGGEST_RELEVANCE);
-  *model_metadata.add_scoring_signal_specs() = CreateScoringSignalSpec(
-      optimization_guide::proto::SCORING_SIGNAL_TYPE_IS_SEARCH_SUGGEST_ENTITY);
-  *model_metadata.add_scoring_signal_specs() = CreateScoringSignalSpec(
-      optimization_guide::proto::SCORING_SIGNAL_TYPE_IS_VERBATIM);
-  *model_metadata.add_scoring_signal_specs() = CreateScoringSignalSpec(
-      optimization_guide::proto::SCORING_SIGNAL_TYPE_IS_NAVSUGGEST);
-  *model_metadata.add_scoring_signal_specs() = CreateScoringSignalSpec(
-      optimization_guide::proto::SCORING_SIGNAL_TYPE_IS_SEARCH_SUGGEST_TAIL);
-  *model_metadata.add_scoring_signal_specs() = CreateScoringSignalSpec(
-      optimization_guide::proto::SCORING_SIGNAL_TYPE_IS_ANSWER_SUGGEST);
-  *model_metadata.add_scoring_signal_specs() = CreateScoringSignalSpec(
-      optimization_guide::proto::SCORING_SIGNAL_TYPE_IS_CALCULATOR_SUGGEST);
 
   // Scoring signals.
   ScoringSignals scoring_signals;
@@ -195,19 +176,10 @@ TEST_F(AutocompleteScoringModelHandlerTest,
   scoring_signals.set_elapsed_time_last_visit_secs(32767);
   scoring_signals.set_elapsed_time_last_shortcut_visit_sec(-200);
   scoring_signals.set_typed_count(150);
-  scoring_signals.set_num_input_terms_matched_by_bookmark_title(10);
-  scoring_signals.set_site_engagement(50);
-  scoring_signals.set_search_suggest_relevance(1234);
-  scoring_signals.set_is_search_suggest_entity(true);
-  scoring_signals.set_is_verbatim(false);
-  scoring_signals.set_is_navsuggest(false);
-  scoring_signals.set_is_search_suggest_tail(false);
-  scoring_signals.set_is_answer_suggest(false);
-  scoring_signals.set_is_calculator_suggest(false);
 
   auto input_signals = model_handler_->ExtractInputFromScoringSignals(
       scoring_signals, model_metadata);
-  ASSERT_EQ(input_signals.size(), 15u);
+  ASSERT_EQ(input_signals.size(), 6u);
   EXPECT_THAT(input_signals[0], 0.2);  // Normalized signal.
   EXPECT_THAT(input_signals[1], 15);
   EXPECT_NEAR(input_signals[2], 0.3792, 0.0001);
@@ -225,16 +197,6 @@ TEST_F(AutocompleteScoringModelHandlerTest,
   input_signals = model_handler_->ExtractInputFromScoringSignals(
       scoring_signals, model_metadata);
   EXPECT_THAT(input_signals[5], 1);
-
-  EXPECT_THAT(input_signals[6], 10);
-  EXPECT_THAT(input_signals[7], 50);
-  EXPECT_THAT(input_signals[8], 1234);
-  EXPECT_THAT(input_signals[9], 1);
-  EXPECT_THAT(input_signals[10], 0);
-  EXPECT_THAT(input_signals[11], 0);
-  EXPECT_THAT(input_signals[12], 0);
-  EXPECT_THAT(input_signals[13], 0);
-  EXPECT_THAT(input_signals[14], 0);
 }
 
 TEST_F(AutocompleteScoringModelHandlerTest, GetBatchModelInputTest) {
diff --git a/components/omnibox/browser/autocomplete_scoring_model_service.cc b/components/omnibox/browser/autocomplete_scoring_model_service.cc
index 8c5788210f703..aac568da0957f 100644
--- a/components/omnibox/browser/autocomplete_scoring_model_service.cc
+++ b/components/omnibox/browser/autocomplete_scoring_model_service.cc
@@ -15,26 +15,13 @@
 #include "components/omnibox/browser/autocomplete_scoring_model_handler.h"
 #include "components/omnibox/browser/omnibox_field_trial.h"
 #include "components/optimization_guide/core/optimization_guide_model_provider.h"
-#include "components/optimization_guide/proto/autocomplete_scoring_model_metadata.pb.h"
 #include "components/optimization_guide/proto/models.pb.h"
 
 namespace {
-
-const char kAutocompleteScoringModelMetadataTypeUrl[] =
-    "type.googleapis.com/"
-    "google.internal.chrome.optimizationguide.v1."
-    "AutocompleteScoringModelMetadata";
-
-// The current version the client supports for the autocomplete scoring model.
-// This should be incremented any time we update the client code to add new
-// scoring signals beyond those which are currently supported for ML scoring.
-extern const int32_t kAutocompleteScoringModelVersion = 1;
-
 void LogMLScoreCacheHit(bool cache_hit) {
   base::UmaHistogramBoolean(
       "Omnibox.URLScoringModelExecuted.MLScoreCache.CacheHit", cache_hit);
 }
-
 }  // namespace
 
 AutocompleteScoringModelService::AutocompleteScoringModelService(
@@ -44,19 +31,12 @@ AutocompleteScoringModelService::AutocompleteScoringModelService(
   if (OmniboxFieldTrial::IsUrlScoringModelEnabled() && model_provider) {
     model_executor_task_runner_ =
         base::SequencedTaskRunner::GetCurrentDefault();
-
-    optimization_guide::proto::Any any_metadata;
-    any_metadata.set_type_url(kAutocompleteScoringModelMetadataTypeUrl);
-    optimization_guide::proto::AutocompleteScoringModelMetadata model_metadata;
-    model_metadata.set_version(kAutocompleteScoringModelVersion);
-    model_metadata.SerializeToString(any_metadata.mutable_value());
-
     url_scoring_model_handler_ =
         std::make_unique<AutocompleteScoringModelHandler>(
             model_provider, model_executor_task_runner_.get(),
             std::make_unique<AutocompleteScoringModelExecutor>(),
             optimization_guide::proto::OPTIMIZATION_TARGET_OMNIBOX_URL_SCORING,
-            /*model_metadata=*/any_metadata);
+            /*model_metadata=*/std::nullopt);
   }
 }
 
diff --git a/components/optimization_guide/core/prediction_manager.cc b/components/optimization_guide/core/prediction_manager.cc
index 8228142f5f946..76e292d5b183d 100644
--- a/components/optimization_guide/core/prediction_manager.cc
+++ b/components/optimization_guide/core/prediction_manager.cc
@@ -154,11 +154,11 @@ bool IsModelMetadataTypeOnServerAllowlist(const proto::Any& model_metadata) {
          model_metadata.type_url() ==
              "type.googleapis.com/"
              "google.internal.chrome.optimizationguide.v1."
-             "AutofillFieldClassificationModelMetadata" ||
+             "OnDeviceBaseModelMetadata" ||
          model_metadata.type_url() ==
              "type.googleapis.com/"
              "google.internal.chrome.optimizationguide.v1."
-             "AutocompleteScoringModelMetadata";
+             "AutofillFieldClassificationModelMetadata";
 }
 
 void RecordModelAvailableAtRegistration(
diff --git a/components/optimization_guide/proto/autocomplete_scoring_model_metadata.proto b/components/optimization_guide/proto/autocomplete_scoring_model_metadata.proto
index 7d0a831ab49db..e210a458f8d16 100644
--- a/components/optimization_guide/proto/autocomplete_scoring_model_metadata.proto
+++ b/components/optimization_guide/proto/autocomplete_scoring_model_metadata.proto
@@ -38,20 +38,6 @@ enum ScoringSignalType {
   SCORING_SIGNAL_TYPE_ELAPSED_TIME_LAST_VISIT_DAYS = 23;
   SCORING_SIGNAL_TYPE_ELAPSED_TIME_LAST_SHORTCUT_VISIT_DAYS = 24;
   SCORING_SIGNAL_TYPE_MATCHES_TITLE_OR_HOST_OR_SHORTCUT_TEXT = 25;
-  SCORING_SIGNAL_TYPE_NUM_INPUT_TERMS_MATCHED_BY_BOOKMARK_TITLE = 26;
-  SCORING_SIGNAL_TYPE_SITE_ENGAGEMENT = 27;
-  SCORING_SIGNAL_TYPE_SEARCH_SUGGEST_RELEVANCE = 28;
-  SCORING_SIGNAL_TYPE_IS_SEARCH_SUGGEST_ENTITY = 29;
-  SCORING_SIGNAL_TYPE_IS_VERBATIM = 30;
-  SCORING_SIGNAL_TYPE_IS_NAVSUGGEST = 31;
-  SCORING_SIGNAL_TYPE_IS_SEARCH_SUGGEST_TAIL = 32;
-  SCORING_SIGNAL_TYPE_IS_ANSWER_SUGGEST = 33;
-  SCORING_SIGNAL_TYPE_IS_CALCULATOR_SUGGEST = 34;
-  SCORING_SIGNAL_TYPE_IS_NTP_PAGE_CONTEXT = 35;
-  SCORING_SIGNAL_TYPE_IS_SRP_PAGE_CONTEXT = 36;
-  SCORING_SIGNAL_TYPE_IS_WEB_PAGE_CONTEXT = 37;
-  SCORING_SIGNAL_TYPE_DESTINATION_HOST_MATCH_FOR_CURRENT_PAGE = 38;
-  SCORING_SIGNAL_TYPE_HAS_OPEN_TAB_MATCH = 39;
 }
 
 // Types of signal transformations.
@@ -85,7 +71,4 @@ message AutocompleteScoringModelMetadata {
   // training. During inference, the signals must also be arranged according
   // to this order.
   repeated ScoringSignalSpec scoring_signal_specs = 1;
-  // The version of the autocomplete scoring model that's currently supported by
-  // the client for inference.
-  optional int64 version = 2;
 }
