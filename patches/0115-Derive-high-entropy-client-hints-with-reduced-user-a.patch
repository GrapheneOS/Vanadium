From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: fgei <fgei@gmail.com>
Date: Sun, 12 Nov 2023 04:26:12 +0000
Subject: [PATCH] Derive high entropy client hints with reduced user agent by
 default

This patchset adds support to disable high entropy client hints or to
populate some of it with information derived from reduced user agent in
Android.
---
 .../embedder_support/user_agent_utils.cc      | 30 +++++++++++++++++++
 content/browser/client_hints/client_hints.cc  | 14 +++++++++
 third_party/blink/common/features.cc          | 10 +++++++
 third_party/blink/public/common/features.h    |  3 ++
 4 files changed, 57 insertions(+)

diff --git a/components/embedder_support/user_agent_utils.cc b/components/embedder_support/user_agent_utils.cc
index 2aef8f97a9674..e507f25cd65ef 100644
--- a/components/embedder_support/user_agent_utils.cc
+++ b/components/embedder_support/user_agent_utils.cc
@@ -528,6 +528,36 @@ blink::UserAgentMetadata GetUserAgentMetadata(const PrefService* pref_service,
                : metadata;
   }
 
+  if (base::FeatureList::IsEnabled(
+          blink::features::kClientHintsLowEntropyOnly)) {
+    return metadata;
+  }
+
+  if (base::FeatureList::IsEnabled(
+          blink::features::kClientHintsFromReducedUA)) {
+    // Values reflected from reduced user agent obtained from
+    // GetReducedUserAgent from //content/common/user_agent.cc
+    std::string reduced_version_number =
+        base::StrCat({version_info::GetMajorVersionNumber(), ".0.",
+                      blink::features::kUserAgentFrozenBuildVersion.Get(), ".0"});
+    // See GetFormFactorsForClientHints. Do not include XR Form Factor.
+    // By default, use "Mobile" or "Desktop" depending on the `mobile` bit.
+    std::vector<std::string> form_factors = {
+        metadata.mobile ? blink::kMobileFormFactor : blink::kDesktopFormFactor};
+    metadata.brand_full_version_list =
+        GetUserAgentBrandList(version_info::GetMajorVersionNumber(),
+                              enable_updated_grease_by_policy,
+                              reduced_version_number,
+                              blink::UserAgentBrandVersionType::kFullVersion,
+                              std::nullopt);
+    // Only based on low-entropy client hints for mobile, keep the same logic.
+    metadata.form_factors = form_factors;
+    metadata.model = "K";
+    metadata.platform_version = "10.0.0";
+    metadata.full_version = reduced_version_number;
+    return metadata;
+  }
+
   if (only_low_entropy_ch) {
     return metadata;
   }
diff --git a/content/browser/client_hints/client_hints.cc b/content/browser/client_hints/client_hints.cc
index ed6b4c38f7fe8..fb80409bc647f 100644
--- a/content/browser/client_hints/client_hints.cc
+++ b/content/browser/client_hints/client_hints.cc
@@ -849,6 +849,20 @@ void AddRequestClientHintsHeaders(
 
   GURL url = origin.GetURL();
 
+  if (base::FeatureList::IsEnabled(
+          blink::features::kClientHintsLowEntropyOnly)) {
+    return;
+  }
+
+  if (base::FeatureList::IsEnabled(
+          blink::features::kClientHintsFromReducedUA)) {
+    UpdateNavigationRequestClientUaHeadersImpl(
+        delegate, is_ua_override_on, frame_tree_node,
+        ClientUaHeaderCallType::kDuringCreation, headers, container_policy,
+        request_url, data);
+    return;
+  }
+
   // Add Headers
   if (ShouldAddClientHint(data, WebClientHintsType::kDeviceMemory_DEPRECATED)) {
     AddDeviceMemoryHeader(headers, /*use_deprecated_version*/ true);
diff --git a/third_party/blink/common/features.cc b/third_party/blink/common/features.cc
index c3f11bcce9819..52efad49e251a 100644
--- a/third_party/blink/common/features.cc
+++ b/third_party/blink/common/features.cc
@@ -452,6 +452,16 @@ BASE_FEATURE(kCheckHTMLParserBudgetLessOften,
              "CheckHTMLParserBudgetLessOften",
              base::FEATURE_DISABLED_BY_DEFAULT);
 
+// Enable low-entropy client hints only.
+BASE_FEATURE(kClientHintsLowEntropyOnly,
+             "ClientHintsLowEntropyOnly",
+             base::FEATURE_DISABLED_BY_DEFAULT);
+
+// Use information from reduced user agent for high entropy client hints.
+BASE_FEATURE(kClientHintsFromReducedUA,
+            "ClientHintsFromReducedUA",
+            base::FEATURE_ENABLED_BY_DEFAULT);
+
 // Enable legacy `dpr` client hint.
 BASE_FEATURE(kClientHintsDPR_DEPRECATED,
              "ClientHintsDPR_DEPRECATED",
diff --git a/third_party/blink/public/common/features.h b/third_party/blink/public/common/features.h
index 7d5238a303a1c..1a6bcd0883c09 100644
--- a/third_party/blink/public/common/features.h
+++ b/third_party/blink/public/common/features.h
@@ -243,6 +243,9 @@ BLINK_COMMON_EXPORT BASE_DECLARE_FEATURE(kCaptureJSExecutionLocation);
 // is a no-op if kTimedHTMLParserBudget is disabled.
 BLINK_COMMON_EXPORT BASE_DECLARE_FEATURE(kCheckHTMLParserBudgetLessOften);
 
+BLINK_COMMON_EXPORT BASE_DECLARE_FEATURE(kClientHintsLowEntropyOnly);
+BLINK_COMMON_EXPORT BASE_DECLARE_FEATURE(kClientHintsFromReducedUA);
+
 // We do intend to deprecate these when possible, do not remove the feature
 // until they can be disabled by default.
 BLINK_COMMON_EXPORT BASE_DECLARE_FEATURE(kClientHintsDeviceMemory_DEPRECATED);
