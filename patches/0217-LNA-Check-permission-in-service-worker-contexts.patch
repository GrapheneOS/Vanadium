From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: Chris Thompson <cthomp@chromium.org>
Date: Wed, 28 May 2025 11:27:53 -0700
Subject: [PATCH] [LNA] Check permission in service worker contexts

This plumbs the service worker origin in to the worker's
URLLoaderNetworkObserver during creation, making it available under the
URLLoaderNetworkContext when the context type is kServiceWorkerContext.
This is then used in OnLocalNetworkAccessPermissionRequired() to call
GetPermissionStatusForWorker() with the worker's process ID and the
worker origin. This allows service worker fetches to perform local
network requests, iff that origin already has been granted the Local
Network Access permission. (Followup work will see if we can extend this
to also work with the worker's `frame_window_id` to lookup the hosting
frame context and be able to trigger permission requests there, if the
hosting document still exists.)

This also renames StoragePartitionImpl's
CreateAuthCertObserverForServiceWorker() to
CreateURLLoaderNetworkObserverForServiceWorker() to better match the
other URLLoaderNetworkObserver methods, since the observer has been used
for more than just auth cert events for a while.

A followup CL will add WPTs exercising different service worker fetch
cases.

Want-Code-Review: all
Bug: 404887282
Change-Id: Ie13a9169e1f9f862f7e7035ee7a996cd1e2cf94d
Reviewed-on: https://chromium-review.googlesource.com/c/chromium/src/+/6580556
Auto-Submit: Chris Thompson <cthomp@chromium.org>
Reviewed-by: Hubert Chao <hchao@chromium.org>
Reviewed-by: Andrey Kosyakov <caseq@chromium.org>
Commit-Queue: Chris Thompson <cthomp@chromium.org>
Reviewed-by: Yoshisato Yanagisawa <yyanagisawa@chromium.org>
Reviewed-by: Rakina Zata Amni <rakina@chromium.org>
Cr-Commit-Position: refs/heads/main@{#1466620}
---
 .../service_worker_devtools_agent_host.cc     |  3 +-
 .../embedded_worker_instance.cc               |  3 +-
 content/browser/storage_partition_impl.cc     | 84 +++++++++++++------
 content/browser/storage_partition_impl.h      | 12 ++-
 .../storage_partition_impl_unittest.cc        | 15 ++--
 5 files changed, 81 insertions(+), 36 deletions(-)

diff --git a/content/browser/devtools/service_worker_devtools_agent_host.cc b/content/browser/devtools/service_worker_devtools_agent_host.cc
index 56d04cb024b0f..b7772cff843dc 100644
--- a/content/browser/devtools/service_worker_devtools_agent_host.cc
+++ b/content/browser/devtools/service_worker_devtools_agent_host.cc
@@ -405,7 +405,8 @@ ServiceWorkerDevToolsAgentHost::CreateNetworkFactoryParamsForDevTools() {
       /*coep_reporter=*/mojo::NullRemote(),
       /*dip_reporter=*/mojo::NullRemote(),
       static_cast<StoragePartitionImpl*>(rph->GetStoragePartition())
-          ->CreateAuthCertObserverForServiceWorker(rph->GetDeprecatedID()),
+          ->CreateURLLoaderNetworkObserverForServiceWorker(
+              rph->GetDeprecatedID(), origin),
       NetworkServiceDevToolsObserver::MakeSelfOwned(GetId()),
       /*client_security_state=*/nullptr,
       /*debug_tag=*/"SWDTAH::CreateNetworkFactoryParamsForDevTools",
diff --git a/content/browser/service_worker/embedded_worker_instance.cc b/content/browser/service_worker/embedded_worker_instance.cc
index cef96b1bf25ab..2ffcc95cbc51c 100644
--- a/content/browser/service_worker/embedded_worker_instance.cc
+++ b/content/browser/service_worker/embedded_worker_instance.cc
@@ -876,7 +876,8 @@ EmbeddedWorkerInstance::CreateFactoryBundle(
           rph, origin, isolation_info, std::move(coep_reporter),
           std::move(dip_reporter),
           static_cast<StoragePartitionImpl*>(rph->GetStoragePartition())
-              ->CreateAuthCertObserverForServiceWorker(rph->GetDeprecatedID()),
+              ->CreateURLLoaderNetworkObserverForServiceWorker(
+                  rph->GetDeprecatedID(), origin),
           NetworkServiceDevToolsObserver::MakeSelfOwned(devtools_worker_token),
           std::move(client_security_state),
           "EmbeddedWorkerInstance::CreateFactoryBundle",
diff --git a/content/browser/storage_partition_impl.cc b/content/browser/storage_partition_impl.cc
index b64480cd027e0..4b3cc52d09d11 100644
--- a/content/browser/storage_partition_impl.cc
+++ b/content/browser/storage_partition_impl.cc
@@ -14,6 +14,7 @@
 
 #include "base/barrier_callback.h"
 #include "base/barrier_closure.h"
+#include "base/check_deref.h"
 #include "base/command_line.h"
 #include "base/containers/contains.h"
 #include "base/dcheck_is_on.h"
@@ -2239,10 +2240,9 @@ void StoragePartitionImpl::OnLocalNetworkAccessPermissionRequired(
       return;
     }
 
-    PermissionController* permission_controller =
-        browser_context_->GetPermissionController();
-    DCHECK(permission_controller);
-    auto status = permission_controller->GetPermissionStatusForCurrentDocument(
+    PermissionController& permission_controller =
+        CHECK_DEREF(browser_context_->GetPermissionController());
+    auto status = permission_controller.GetPermissionStatusForCurrentDocument(
         content::PermissionDescriptorUtil::
             CreatePermissionDescriptorForPermissionType(
                 blink::PermissionType::LOCAL_NETWORK_ACCESS),
@@ -2257,7 +2257,7 @@ void StoragePartitionImpl::OnLocalNetworkAccessPermissionRequired(
       // PermissionStatus is ASK, so request the permission. Converts the result
       // into a boolean to pass back to `callback`, capturing whether the
       // permission is granted or not.
-      permission_controller->RequestPermissionFromCurrentDocument(
+      permission_controller.RequestPermissionFromCurrentDocument(
           rfh,
           PermissionRequestDescription(
               content::PermissionDescriptorUtil::
@@ -2273,12 +2273,39 @@ void StoragePartitionImpl::OnLocalNetworkAccessPermissionRequired(
       return;
     }
   } else if (context.type() == ContextType::kServiceWorkerContext) {
-    // TODO(crbug.com/404887282): Add support for gating requests from workers
-    // on whether the user previously granted the permission. This will require
-    // plumbing through the `window_id` for the fetch to identify the worker
-    // context and then using that to get the worker origin to use when calling
-    // PermissionController::GetPermissionStatusForWorker().
-    std::move(callback).Run(true);
+    // TODO(crbug.com/404887282): Plumb the `frame_window_id` of the worker,
+    // if it exists, to allow this to identify the hosting frame of the worker,
+    // when available. This would allow us to additionally _request_ the
+    // permission when a fetch that happens to go through a service worker would
+    // trigger this check. This is beneficial for developers as they can use
+    // caching service workers "as expected" without needing to re-engineer
+    // their code to do a special "non-cached request" just to trigger the
+    // permission prompt. The `frame_window_id` approach is used by other
+    // methods in this file, such as OnCertificateRequested(), which require UI
+    // dialogs to handle the event. This may also be useful for handling
+    // other types of Workers that always have an associated frame (such as
+    // Dedicated Worker).
+
+    // If there is no associated worker origin, there is nothing that can be
+    // granted a permission, so just deny the permission request. This can
+    // potentially happen for things like workers loaded from data: URLs, which
+    // are opaque (but workers loaded from blob: URLs should have the origin
+    // which created the blob: URL).
+    // TODO(crbug.com/404887282): Revisit if opaque origins support is needed.
+    CHECK(context.worker_origin());
+    if (context.worker_origin()->opaque()) {
+      std::move(callback).Run(false);
+    }
+
+    PermissionController& permission_controller =
+        CHECK_DEREF(browser_context_->GetPermissionController());
+    auto status = permission_controller.GetPermissionStatusForWorker(
+        content::PermissionDescriptorUtil::
+            CreatePermissionDescriptorForPermissionType(
+                blink::PermissionType::LOCAL_NETWORK_ACCESS),
+        content::RenderProcessHost::FromID(context.process_id()),
+        context.worker_origin().value());
+    std::move(callback).Run(status == blink::mojom::PermissionStatus::GRANTED);
     return;
   }
 
@@ -2547,11 +2574,13 @@ StoragePartitionImpl::CreateURLLoaderNetworkObserverForNavigationRequest(
 }
 
 mojo::PendingRemote<network::mojom::URLLoaderNetworkServiceObserver>
-StoragePartitionImpl::CreateAuthCertObserverForServiceWorker(int process_id) {
+StoragePartitionImpl::CreateURLLoaderNetworkObserverForServiceWorker(
+    int process_id,
+    const url::Origin& worker_origin) {
   mojo::PendingRemote<network::mojom::URLLoaderNetworkServiceObserver> remote;
-  url_loader_network_observers_.Add(this,
-                                    remote.InitWithNewPipeAndPassReceiver(),
-                                    URLLoaderNetworkContext(process_id));
+  url_loader_network_observers_.Add(
+      this, remote.InitWithNewPipeAndPassReceiver(),
+      URLLoaderNetworkContext(process_id, worker_origin));
   return remote;
 }
 
@@ -2569,14 +2598,13 @@ void StoragePartitionImpl::OnCanSendReportingReports(
     const std::vector<url::Origin>& origins,
     OnCanSendReportingReportsCallback callback) {
   DCHECK(initialized_);
-  PermissionController* permission_controller =
-      browser_context_->GetPermissionController();
-  DCHECK(permission_controller);
+  PermissionController& permission_controller =
+      CHECK_DEREF(browser_context_->GetPermissionController());
 
   std::vector<url::Origin> origins_out;
   for (auto& origin : origins) {
     bool allowed = permission_controller
-                       ->GetPermissionResultForOriginWithoutContext(
+                       .GetPermissionResultForOriginWithoutContext(
                            content::PermissionDescriptorUtil::
                                CreatePermissionDescriptorForPermissionType(
                                    blink::PermissionType::BACKGROUND_SYNC),
@@ -2594,11 +2622,11 @@ void StoragePartitionImpl::OnCanSendDomainReliabilityUpload(
     const url::Origin& origin,
     OnCanSendDomainReliabilityUploadCallback callback) {
   DCHECK(initialized_);
-  PermissionController* permission_controller =
-      browser_context_->GetPermissionController();
+  PermissionController& permission_controller =
+      CHECK_DEREF(browser_context_->GetPermissionController());
   std::move(callback).Run(
       permission_controller
-          ->GetPermissionResultForOriginWithoutContext(
+          .GetPermissionResultForOriginWithoutContext(
               content::PermissionDescriptorUtil::
                   CreatePermissionDescriptorForPermissionType(
                       blink::PermissionType::BACKGROUND_SYNC),
@@ -3624,8 +3652,11 @@ StoragePartitionImpl::CreateURLLoaderFactoryParams() {
   params->automatically_assign_isolation_info = true;
   params->is_orb_enabled = false;
   params->is_trusted = true;
+  // For browser-process initiated requests there is no corresponding service
+  // worker origin, so just pass an opaque origin.
   params->url_loader_network_observer =
-      CreateAuthCertObserverForServiceWorker(params->process_id);
+      CreateURLLoaderNetworkObserverForServiceWorker(params->process_id,
+                                                     url::Origin());
   params->disable_web_security =
       base::CommandLine::ForCurrentProcess()->HasSwitch(
           switches::kDisableWebSecurity);
@@ -3772,8 +3803,11 @@ StoragePartitionImpl::URLLoaderNetworkContext::URLLoaderNetworkContext(
 }
 
 StoragePartitionImpl::URLLoaderNetworkContext::URLLoaderNetworkContext(
-    int process_id)
-    : type_(Type::kServiceWorkerContext), process_id_(process_id) {}
+    int process_id,
+    const url::Origin& worker_origin)
+    : type_(Type::kServiceWorkerContext),
+      process_id_(process_id),
+      worker_origin_(worker_origin) {}
 
 StoragePartitionImpl::URLLoaderNetworkContext::URLLoaderNetworkContext(
     const URLLoaderNetworkContext& other) = default;
diff --git a/content/browser/storage_partition_impl.h b/content/browser/storage_partition_impl.h
index 3b1355902f012..1a82176cf80b8 100644
--- a/content/browser/storage_partition_impl.h
+++ b/content/browser/storage_partition_impl.h
@@ -479,7 +479,9 @@ class CONTENT_EXPORT StoragePartitionImpl
   CreateSharedDictionaryAccessObserverForServiceWorker();
 
   mojo::PendingRemote<network::mojom::URLLoaderNetworkServiceObserver>
-  CreateAuthCertObserverForServiceWorker(int process_id);
+  CreateURLLoaderNetworkObserverForServiceWorker(
+      int process_id,
+      const url::Origin& worker_origin);
 
   mojo::PendingRemote<network::mojom::DeviceBoundSessionAccessObserver>
   CreateDeviceBoundSessionObserverForServiceWorker();
@@ -623,7 +625,7 @@ class CONTENT_EXPORT StoragePartitionImpl
         GlobalRenderFrameHostId global_render_frame_host_id);
 
     // Used when `type` is `kServiceWorkerContext`.
-    explicit URLLoaderNetworkContext(int process_id);
+    URLLoaderNetworkContext(int process_id, const url::Origin& worker_origin);
 
     // Used when `type` is `kNavigationRequestContext`.
     explicit URLLoaderNetworkContext(NavigationRequest& navigation_request);
@@ -638,6 +640,9 @@ class CONTENT_EXPORT StoragePartitionImpl
     }
 
     int process_id() const { return process_id_; }
+    const std::optional<url::Origin>& worker_origin() const {
+      return worker_origin_;
+    }
 
     // If `type_` is kServiceWorkerContext, returns nullptr. Otherwise returns
     // the WebContents.
@@ -652,6 +657,9 @@ class CONTENT_EXPORT StoragePartitionImpl
 
     // Only valid when `type_` is kServiceWorkerContext.
     int process_id_ = content::ChildProcessHost::kInvalidUniqueID;
+
+    // Only valid and non-nullopt when `type_` is kServiceWorkerContext.
+    std::optional<url::Origin> worker_origin_;
   };
 
   // `relative_partition_path` is the relative path under `profile_path` to the
diff --git a/content/browser/storage_partition_impl_unittest.cc b/content/browser/storage_partition_impl_unittest.cc
index a497533012038..3e7da5284d3f3 100644
--- a/content/browser/storage_partition_impl_unittest.cc
+++ b/content/browser/storage_partition_impl_unittest.cc
@@ -2588,8 +2588,8 @@ TEST_F(StoragePartitionImplTest, PrivateNetworkAccessPermission) {
       browser_context()->GetDefaultStoragePartition());
 
   mojo::Remote<network::mojom::URLLoaderNetworkServiceObserver> observer(
-      partition->CreateAuthCertObserverForServiceWorker(
-          network::mojom::kBrowserProcessId));
+      partition->CreateURLLoaderNetworkObserverForServiceWorker(
+          network::mojom::kBrowserProcessId, url::Origin()));
 
   base::test::TestFuture<bool> grant_permission;
   observer->OnPrivateNetworkAccessPermissionRequired(
@@ -2660,16 +2660,17 @@ TEST_F(StoragePartitionImplLocalNetworkAccessTest,
   StoragePartitionImpl* partition = static_cast<StoragePartitionImpl*>(
       browser_context()->GetDefaultStoragePartition());
 
+  const url::Origin worker_origin =
+      url::Origin::Create(GURL("https://foo.com"));
+
   mojo::Remote<network::mojom::URLLoaderNetworkServiceObserver> observer(
-      partition->CreateAuthCertObserverForServiceWorker(
-          network::mojom::kBrowserProcessId));
+      partition->CreateURLLoaderNetworkObserverForServiceWorker(
+          network::mojom::kBrowserProcessId, worker_origin));
 
   base::test::TestFuture<bool> grant_permission;
   observer->OnLocalNetworkAccessPermissionRequired(
       base::BindOnce(grant_permission.GetCallback()));
-  // TODO(crbug.com/404887282): Once support for checking permission in service
-  // workers is added, this should be changed to EXPECT_FALSE().
-  EXPECT_TRUE(grant_permission.Get());
+  EXPECT_FALSE(grant_permission.Get());
 }
 
 TEST_F(StoragePartitionImplTest, ClearDataStorageKeyDeletesPartitionedCookies) {
