From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: quh4gko8 <88831734+quh4gko8@users.noreply.github.com>
Date: Wed, 12 Jun 2024 16:15:42 +0000
Subject: [PATCH] Match skipping compatibility check default value checks in
 java as well

---
 .../options/AutofillOptionsMediator.java      |  2 +-
 .../ui/autofill/autofill_client_provider.cc   | 34 +++++++++++++++++--
 .../autofill/core/common/autofill_features.cc |  7 ++++
 .../autofill/core/common/autofill_features.h  | 23 +++++++++++++
 4 files changed, 63 insertions(+), 3 deletions(-)

diff --git a/chrome/browser/autofill/android/java/src/org/chromium/chrome/browser/autofill/options/AutofillOptionsMediator.java b/chrome/browser/autofill/android/java/src/org/chromium/chrome/browser/autofill/options/AutofillOptionsMediator.java
index 65fee22deb1a5..4da3ca22ea7ba 100644
--- a/chrome/browser/autofill/android/java/src/org/chromium/chrome/browser/autofill/options/AutofillOptionsMediator.java
+++ b/chrome/browser/autofill/android/java/src/org/chromium/chrome/browser/autofill/options/AutofillOptionsMediator.java
@@ -136,7 +136,7 @@ class AutofillOptionsMediator implements ModalDialogProperties.Controller {
             case AndroidAutofillAvailabilityStatus.ANDROID_AUTOFILL_NOT_SUPPORTED:
             case AndroidAutofillAvailabilityStatus.UNKNOWN_ANDROID_AUTOFILL_SERVICE:
             case AndroidAutofillAvailabilityStatus.ANDROID_AUTOFILL_SERVICE_IS_GOOGLE:
-                return true;
+                return false; // Pref can't be read only.
             case AndroidAutofillAvailabilityStatus.SETTING_TURNED_OFF: // Pref may be changed!
             case AndroidAutofillAvailabilityStatus.AVAILABLE:
                 return false;
diff --git a/chrome/browser/ui/autofill/autofill_client_provider.cc b/chrome/browser/ui/autofill/autofill_client_provider.cc
index af9083849672e..0ea41caa5493b 100644
--- a/chrome/browser/ui/autofill/autofill_client_provider.cc
+++ b/chrome/browser/ui/autofill/autofill_client_provider.cc
@@ -67,9 +67,35 @@ void SetSharedPrefForSettingsContentProvider(bool uses_platform_autofill) {
 
 AndroidAutofillAvailabilityStatus GetAndroidAutofillAvailabilityStatus(
     PrefService& prefs) {
-  return static_cast<AndroidAutofillAvailabilityStatus>(
+  AndroidAutofillAvailabilityStatus availability = static_cast<
+      AndroidAutofillAvailabilityStatus>(
       Java_AutofillClientProviderUtils_getAndroidAutofillFrameworkAvailability(
           base::android::AttachCurrentThread(), &prefs));
+  // Check whether the returned availability is affected by feature parameters
+  // that skip some checks on this client.
+  switch (availability) {
+    case AndroidAutofillAvailabilityStatus::kAndroidAutofillServiceIsGoogle:
+      if (features::kAutofillVirtualViewStructureAndroidSkipsCompatibilityCheck
+              .Get() ==
+          features::VirtualViewStructureSkipChecks::kOnlySkipAwGCheck) {
+        availability = AndroidAutofillAvailabilityStatus::kAvailable;
+      }
+      ABSL_FALLTHROUGH_INTENDED;  // No skip-awg-check but skip-all may apply.
+    case AndroidAutofillAvailabilityStatus::kAndroidAutofillManagerNotAvailable:
+    case AndroidAutofillAvailabilityStatus::kAndroidAutofillNotSupported:
+    case AndroidAutofillAvailabilityStatus::kUnknownAndroidAutofillService:
+      if (features::kAutofillVirtualViewStructureAndroidSkipsCompatibilityCheck
+              .Get() ==
+          features::VirtualViewStructureSkipChecks::kSkipAllChecks) {
+        availability = AndroidAutofillAvailabilityStatus::kAvailable;
+      }
+      return availability;
+    case AndroidAutofillAvailabilityStatus::kAvailable:
+    case AndroidAutofillAvailabilityStatus::kSettingTurnedOff:
+    case AndroidAutofillAvailabilityStatus::kNotAllowedByPolicy:
+      return availability;
+  }
+  NOTREACHED();
 }
 #endif  // BUILDFLAG(IS_ANDROID)
 
@@ -88,7 +114,11 @@ bool UsesVirtualViewStructureForAutofill(PrefService& prefs) {
 
 AutofillClientProvider::AutofillClientProvider(PrefService* prefs)
     : uses_platform_autofill_(
-          UsesVirtualViewStructureForAutofill(CHECK_DEREF(prefs))) {
+          UsesVirtualViewStructureForAutofill(CHECK_DEREF(prefs))
+#if BUILDFLAG(IS_ANDROID)
+        && prefs->GetBoolean(prefs::kAutofillUsingVirtualViewStructure)
+#endif // BUILDFLAG(IS_ANDROID)
+    ) {
 #if BUILDFLAG(IS_ANDROID)
   RecordWhetherAndroidPrefResets(*prefs, uses_platform_autofill_);
   // Ensure the pref is reset if platform autofill is restricted.
diff --git a/components/autofill/core/common/autofill_features.cc b/components/autofill/core/common/autofill_features.cc
index 4049e923b55c5..cbcaedbde37aa 100644
--- a/components/autofill/core/common/autofill_features.cc
+++ b/components/autofill/core/common/autofill_features.cc
@@ -797,6 +797,13 @@ BASE_FEATURE(kAutofillEnableSecurityTouchEventFilteringAndroid,
 BASE_FEATURE(kAutofillThirdPartyModeContentProvider,
              base::FEATURE_ENABLED_BY_DEFAULT);
 
+// Controls the whether the Chrome may provide a virtual view structure for
+// Android Autofill.
+// TODO: crbug.com/409579377 - Delete after M139.
+BASE_FEATURE(kAutofillVirtualViewStructureAndroid,
+             "AutofillVirtualViewStructureAndroid",
+             base::FEATURE_ENABLED_BY_DEFAULT);
+
 #endif  // BUILDFLAG(IS_ANDROID)
 
 // Defines if the "Your Saved Info" page is eligible to be shown in Chrome
diff --git a/components/autofill/core/common/autofill_features.h b/components/autofill/core/common/autofill_features.h
index 6aa1803a5ad23..0f2ed97d34e04 100644
--- a/components/autofill/core/common/autofill_features.h
+++ b/components/autofill/core/common/autofill_features.h
@@ -323,6 +323,29 @@ COMPONENT_EXPORT(AUTOFILL)
 BASE_DECLARE_FEATURE(kAutofillEnableSecurityTouchEventFilteringAndroid);
 COMPONENT_EXPORT(AUTOFILL)
 BASE_DECLARE_FEATURE(kAutofillThirdPartyModeContentProvider);
+COMPONENT_EXPORT(AUTOFILL)
+BASE_DECLARE_FEATURE(kAutofillVirtualViewStructureAndroid);
+
+// Used as param for `kAutofillVirtualViewStructureAndroid` to allow
+// skipping certain checks when testing manually.
+enum class VirtualViewStructureSkipChecks {
+  kDontSkip = 0,
+  kSkipAllChecks = 1,
+  kOnlySkipAwGCheck = 2,
+};
+
+inline constexpr base::FeatureParam<VirtualViewStructureSkipChecks>::Option
+    kVirtualViewStructureSkipChecksOption[] = {
+        {VirtualViewStructureSkipChecks::kDontSkip, "dont_skip"},
+        {VirtualViewStructureSkipChecks::kSkipAllChecks, "skip_all_checks"},
+        {VirtualViewStructureSkipChecks::kOnlySkipAwGCheck,
+         "only_skip_awg_check"},
+};
+inline constexpr base::FeatureParam<VirtualViewStructureSkipChecks>
+    kAutofillVirtualViewStructureAndroidSkipsCompatibilityCheck{
+        &kAutofillVirtualViewStructureAndroid, "skip_compatibility_check",
+        VirtualViewStructureSkipChecks::kSkipAllChecks,
+        &kVirtualViewStructureSkipChecksOption};
 
 #endif  // BUILDFLAG(IS_ANDROID)
 
