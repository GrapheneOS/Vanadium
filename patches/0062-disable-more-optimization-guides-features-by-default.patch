From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: Daniel Micay <danielmicay@gmail.com>
Date: Mon, 25 Apr 2022 06:19:32 -0400
Subject: [PATCH] disable more optimization guides features by default

---
 .../download/background_download_service_factory.cc       | 3 ++-
 .../model_execution/optimization_guide_global_state.cc    | 7 +++++--
 .../core/optimization_guide_features.cc                   | 8 ++++++++
 .../optimization_guide/core/optimization_guide_features.h | 6 ++++++
 4 files changed, 21 insertions(+), 3 deletions(-)

diff --git a/chrome/browser/download/background_download_service_factory.cc b/chrome/browser/download/background_download_service_factory.cc
index bde438ed438c6..71911553c4c65 100644
--- a/chrome/browser/download/background_download_service_factory.cc
+++ b/chrome/browser/download/background_download_service_factory.cc
@@ -179,7 +179,8 @@ BackgroundDownloadServiceFactory::BuildServiceInstanceFor(
   }
 #endif  // BUILDFLAG(IS_CHROMEOS)
 
-  if (!key->IsOffTheRecord()) {
+  if (optimization_guide::features::IsModelDownloadingEnabled() &&
+        !key->IsOffTheRecord()) {
     clients->insert(std::make_pair(
         download::DownloadClient::OPTIMIZATION_GUIDE_PREDICTION_MODELS,
         std::make_unique<download::DeferredClientWrapper>(
diff --git a/chrome/browser/optimization_guide/model_execution/optimization_guide_global_state.cc b/chrome/browser/optimization_guide/model_execution/optimization_guide_global_state.cc
index 64f7868b75e1d..3155f317a51d9 100644
--- a/chrome/browser/optimization_guide/model_execution/optimization_guide_global_state.cc
+++ b/chrome/browser/optimization_guide/model_execution/optimization_guide_global_state.cc
@@ -199,8 +199,11 @@ OptimizationGuideGlobalState::OptimizationGuideGlobalState()
 #endif  // BUILDFLAG(USE_ON_DEVICE_MODEL_SERVICE)
 {
   prediction_model_store_.Initialize(GetBaseStoreDir());
-  prediction_manager_.MaybeInitializeModelDownloads(
-      profile_download_service_tracker_, g_browser_process->local_state());
+
+  if (optimization_guide::features::IsModelDownloadingEnabled()) {
+    prediction_manager_.MaybeInitializeModelDownloads(
+        profile_download_service_tracker_, g_browser_process->local_state());
+  }
 
 #if BUILDFLAG(USE_ON_DEVICE_MODEL_SERVICE)
   // Register an observer on the component state manager after it is created but
diff --git a/components/optimization_guide/core/optimization_guide_features.cc b/components/optimization_guide/core/optimization_guide_features.cc
index 2c2fc99c07899..68dbd80fb0761 100644
--- a/components/optimization_guide/core/optimization_guide_features.cc
+++ b/components/optimization_guide/core/optimization_guide_features.cc
@@ -54,6 +54,10 @@ BASE_FEATURE(kOptimizationHints, base::FEATURE_DISABLED_BY_DEFAULT);
 // Enables the prediction of optimization targets.
 BASE_FEATURE(kOptimizationTargetPrediction, base::FEATURE_ENABLED_BY_DEFAULT);
 
+// Enables the downloading of models. Restored downstream.
+BASE_FEATURE(kOptimizationGuideModelDownloading,
+             base::FEATURE_DISABLED_BY_DEFAULT);
+
 // Enables push notification of hints.
 BASE_FEATURE(kPushNotifications,
              "OptimizationGuidePushNotifications",
@@ -356,6 +360,10 @@ base::TimeDelta ModelExecutionWatchdogDefaultTimeout() {
       ));
 }
 
+bool IsModelDownloadingEnabled() {
+  return base::FeatureList::IsEnabled(kOptimizationGuideModelDownloading);
+}
+
 bool ShouldMetadataValidationFetchHostKeyed() {
   DCHECK(base::FeatureList::IsEnabled(kOptimizationGuideMetadataValidation));
   return GetFieldTrialParamByFeatureAsBool(kOptimizationGuideMetadataValidation,
diff --git a/components/optimization_guide/core/optimization_guide_features.h b/components/optimization_guide/core/optimization_guide_features.h
index dfe69db87fcd8..4a35585992b17 100644
--- a/components/optimization_guide/core/optimization_guide_features.h
+++ b/components/optimization_guide/core/optimization_guide_features.h
@@ -39,6 +39,8 @@ BASE_DECLARE_FEATURE(kOptimizationGuideFetchingForSRP);
 COMPONENT_EXPORT(OPTIMIZATION_GUIDE_FEATURES)
 BASE_DECLARE_FEATURE(kOptimizationTargetPrediction);
 COMPONENT_EXPORT(OPTIMIZATION_GUIDE_FEATURES)
+BASE_DECLARE_FEATURE(kOptimizationGuideModelDownloading);
+COMPONENT_EXPORT(OPTIMIZATION_GUIDE_FEATURES)
 BASE_DECLARE_FEATURE(kPageTextExtraction);
 COMPONENT_EXPORT(OPTIMIZATION_GUIDE_FEATURES)
 BASE_DECLARE_FEATURE(kPushNotifications);
@@ -228,6 +230,10 @@ bool IsModelExecutionWatchdogEnabled();
 COMPONENT_EXPORT(OPTIMIZATION_GUIDE_FEATURES)
 base::TimeDelta ModelExecutionWatchdogDefaultTimeout();
 
+// Whether the ability to download models is enabled.
+COMPONENT_EXPORT(OPTIMIZATION_GUIDE_FEATURES)
+bool IsModelDownloadingEnabled();
+
 // Returns whether the page entities model should be executed on page content
 // for a user using |locale| as their browser language.
 COMPONENT_EXPORT(OPTIMIZATION_GUIDE_FEATURES)
