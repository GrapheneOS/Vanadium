From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: =?UTF-8?q?Jacobo=20Aragunde=20P=C3=A9rez?= <jaragunde@igalia.com>
Date: Wed, 17 Apr 2024 14:29:07 +0000
Subject: [PATCH] Use raw strings for regexp code in resource_utils.py

Starting with Python 3.12, use of unescaped backslash in strings is
reported as a SyntaxWarning, and may become an error at a later time.
Backslashes are commonly found in regexp code.

Using raw strings fixes the syntax problem and it's recommended "for
all but the simplest expressions". Newer code is already doing that.

Bug: chromium:40283283
Change-Id: Ifacf6491d277fc67420d869b7640d8210b0cab40
Reviewed-on: https://chromium-review.googlesource.com/c/chromium/src/+/5458533
Reviewed-by: Mohamed Heikal <mheikal@chromium.org>
Reviewed-by: Andrew Grieve <agrieve@chromium.org>
Commit-Queue: Andrew Grieve <agrieve@chromium.org>
Cr-Commit-Position: refs/heads/main@{#1288690}
---
 build/android/gyp/util/resource_utils.py | 11 ++++++-----
 1 file changed, 6 insertions(+), 5 deletions(-)

diff --git a/build/android/gyp/util/resource_utils.py b/build/android/gyp/util/resource_utils.py
index 223c747baaba2..927b47545fc6f 100644
--- a/build/android/gyp/util/resource_utils.py
+++ b/build/android/gyp/util/resource_utils.py
@@ -599,7 +599,7 @@ def CreateRJavaFiles(srcjar_dir,
   else:
     # Create a unique name using srcjar_out. Underscores are added to ensure
     # no reserved keywords are used for directory names.
-    root_r_java_package = re.sub('[^\w\.]', '', srcjar_out.replace('/', '._'))
+    root_r_java_package = re.sub(r'[^\w\.]', '', srcjar_out.replace('/', '._'))
 
   root_r_java_dir = os.path.join(srcjar_dir, *root_r_java_package.split('.'))
   build_utils.MakeDirectory(root_r_java_dir)
@@ -966,12 +966,12 @@ def ParseAndroidResourceStringsFromXml(xml_data):
   result = {}
 
   # Find <resources> start tag and extract namespaces from it.
-  m = re.search('<resources([^>]*)>', xml_data, re.MULTILINE)
+  m = re.search(r'<resources([^>]*)>', xml_data, re.MULTILINE)
   if not m:
     raise Exception('<resources> start tag expected: ' + xml_data)
   input_data = xml_data[m.end():]
   resource_attrs = m.group(1)
-  re_namespace = re.compile('\s*(xmlns:(\w+)="([^"]+)")')
+  re_namespace = re.compile(r'\s*(xmlns:(\w+)="([^"]+)")')
   namespaces = {}
   while resource_attrs:
     m = re_namespace.match(resource_attrs)
@@ -981,8 +981,9 @@ def ParseAndroidResourceStringsFromXml(xml_data):
     resource_attrs = resource_attrs[m.end(1):]
 
   # Find each string element now.
-  re_string_element_start = re.compile('<string ([^>]* )?name="([^">]+)"[^>]*>')
-  re_string_element_end = re.compile('</string>')
+  re_string_element_start = re.compile(
+      r'<string ([^>]* )?name="([^">]+)"[^>]*>')
+  re_string_element_end = re.compile(r'</string>')
   while input_data:
     m = re_string_element_start.search(input_data)
     if not m:
