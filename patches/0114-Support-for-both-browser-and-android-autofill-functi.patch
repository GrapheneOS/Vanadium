From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: fgei <fgei@gmail.com>
Date: Tue, 21 Feb 2023 01:48:15 +0000
Subject: [PATCH] Support for both browser and android autofill functionality

---
 .../ui/autofill/chrome_autofill_client.cc     | 14 +++++
 .../ui/autofill/chrome_autofill_client.h      |  6 +++
 .../browser/android_autofill_client.cc        | 12 +++++
 .../browser/android_autofill_client.h         |  6 +++
 .../content/browser/content_autofill_client.h | 12 +++++
 .../browser/content_autofill_driver.cc        | 53 +++++++++++++++++++
 .../content/browser/content_autofill_driver.h |  4 ++
 .../content_autofill_driver_factory.cc        |  1 +
 .../autofill/core/browser/autofill_driver.h   |  6 +++
 .../core/browser/test_autofill_driver.cc      |  8 +++
 .../core/browser/test_autofill_driver.h       |  3 ++
 11 files changed, 125 insertions(+)

diff --git a/chrome/browser/ui/autofill/chrome_autofill_client.cc b/chrome/browser/ui/autofill/chrome_autofill_client.cc
index 31c18bd793885..c270bf816f25d 100644
--- a/chrome/browser/ui/autofill/chrome_autofill_client.cc
+++ b/chrome/browser/ui/autofill/chrome_autofill_client.cc
@@ -61,6 +61,9 @@
 #include "chrome/browser/web_data_service_factory.h"
 #include "chrome/common/channel_info.h"
 #include "chrome/common/url_constants.h"
+#if BUILDFLAG(IS_ANDROID)
+#include "components/android_autofill/browser/android_autofill_manager.h"
+#endif // BUILDFLAG(IS_ANDROID)
 #include "components/autofill/content/browser/autofill_log_router_factory.h"
 #include "components/autofill/content/browser/content_autofill_driver.h"
 #include "components/autofill/content/browser/content_autofill_driver_factory.h"
@@ -1453,4 +1456,15 @@ void ChromeAutofillClient::InitAgent(
   }
 }
 
+std::unique_ptr<AutofillManager> ChromeAutofillClient::CreateSecondaryManager(
+    base::PassKey<ContentAutofillDriver> pass_key,
+    ContentAutofillDriver& driver) {
+  return std::make_unique<AndroidAutofillManager>(&driver, this);
+}
+
+void ChromeAutofillClient::InitSecondaryAgent(
+    base::PassKey<ContentAutofillDriverFactory> pass_key,
+    const mojo::AssociatedRemote<mojom::AutofillAgent>& agent) {
+}
+
 }  // namespace autofill
diff --git a/chrome/browser/ui/autofill/chrome_autofill_client.h b/chrome/browser/ui/autofill/chrome_autofill_client.h
index 598c40b4eb6dc..c33813b569997 100644
--- a/chrome/browser/ui/autofill/chrome_autofill_client.h
+++ b/chrome/browser/ui/autofill/chrome_autofill_client.h
@@ -296,6 +296,12 @@ class ChromeAutofillClient : public ContentAutofillClient,
   void InitAgent(
       base::PassKey<ContentAutofillDriverFactory> pass_key,
       const mojo::AssociatedRemote<mojom::AutofillAgent>& agent) override;
+  std::unique_ptr<AutofillManager> CreateSecondaryManager(
+      base::PassKey<ContentAutofillDriver> pass_key,
+      ContentAutofillDriver& driver) override;
+  void InitSecondaryAgent(
+      base::PassKey<ContentAutofillDriverFactory> pass_key,
+      const mojo::AssociatedRemote<mojom::AutofillAgent>& agent) override;
 
  protected:
   explicit ChromeAutofillClient(content::WebContents* web_contents);
diff --git a/components/android_autofill/browser/android_autofill_client.cc b/components/android_autofill/browser/android_autofill_client.cc
index 557ed85cd56d9..55ccc058fd391 100644
--- a/components/android_autofill/browser/android_autofill_client.cc
+++ b/components/android_autofill/browser/android_autofill_client.cc
@@ -410,4 +410,16 @@ void AndroidAutofillClient::InitAgent(
     const mojo::AssociatedRemote<autofill::mojom::AutofillAgent>& agent) {
 }
 
+std::unique_ptr<autofill::AutofillManager> AndroidAutofillClient::CreateSecondaryManager(
+    base::PassKey<autofill::ContentAutofillDriver> pass_key,
+    autofill::ContentAutofillDriver& driver) {
+  return 0;
+}
+
+void AndroidAutofillClient::InitSecondaryAgent(
+    base::PassKey<autofill::ContentAutofillDriverFactory> pass_key,
+    const mojo::AssociatedRemote<autofill::mojom::AutofillAgent>& agent) {
+  // empty block, cannot use `NOTREACHED();`, this is also called in webview
+}
+
 }  // namespace android_autofill
diff --git a/components/android_autofill/browser/android_autofill_client.h b/components/android_autofill/browser/android_autofill_client.h
index 89e84922e6adc..5b2e8150c5d7d 100644
--- a/components/android_autofill/browser/android_autofill_client.h
+++ b/components/android_autofill/browser/android_autofill_client.h
@@ -161,6 +161,12 @@ class AndroidAutofillClient : public autofill::ContentAutofillClient {
   void InitAgent(base::PassKey<autofill::ContentAutofillDriverFactory> pass_key,
                  const mojo::AssociatedRemote<autofill::mojom::AutofillAgent>&
                      agent) override;
+  std::unique_ptr<autofill::AutofillManager> CreateSecondaryManager(
+      base::PassKey<autofill::ContentAutofillDriver> pass_key,
+      autofill::ContentAutofillDriver& driver) override;
+  void InitSecondaryAgent(
+      base::PassKey<autofill::ContentAutofillDriverFactory> pass_key,
+      const mojo::AssociatedRemote<autofill::mojom::AutofillAgent>& agent) override;
 
  private:
   friend class content::WebContentsUserData<AndroidAutofillClient>;
diff --git a/components/autofill/content/browser/content_autofill_client.h b/components/autofill/content/browser/content_autofill_client.h
index 19e42727f1969..166ddd51f6c99 100644
--- a/components/autofill/content/browser/content_autofill_client.h
+++ b/components/autofill/content/browser/content_autofill_client.h
@@ -41,6 +41,18 @@ class ContentAutofillClient
       base::PassKey<ContentAutofillDriverFactory> pass_key,
       const mojo::AssociatedRemote<mojom::AutofillAgent>& agent) = 0;
 
+  // Called by ContentAutofillDriver's constructor to inject embedder-specific
+  // behaviour. Implementations should not call into `driver`.
+  virtual std::unique_ptr<AutofillManager> CreateSecondaryManager(
+      base::PassKey<ContentAutofillDriver> pass_key,
+      ContentAutofillDriver& driver) = 0;
+
+  // Called by ContentAutofillDriverFactory to tweak the AutofillAgent in to the
+  // embedder's needs.
+  virtual void InitSecondaryAgent(
+      base::PassKey<ContentAutofillDriverFactory> pass_key,
+      const mojo::AssociatedRemote<mojom::AutofillAgent>& agent) = 0;
+
  private:
   friend class content::WebContentsUserData<ContentAutofillClient>;
 
diff --git a/components/autofill/content/browser/content_autofill_driver.cc b/components/autofill/content/browser/content_autofill_driver.cc
index 71c12c2949d2f..c38a184961428 100644
--- a/components/autofill/content/browser/content_autofill_driver.cc
+++ b/components/autofill/content/browser/content_autofill_driver.cc
@@ -85,6 +85,7 @@ ContentAutofillDriver::ContentAutofillDriver(
     ContentAutofillDriverFactory* owner)
     : render_frame_host_(*render_frame_host), owner_(*owner) {
   autofill_manager_ = owner_->client().CreateManager(/*pass_key=*/{}, *this);
+  secondary_autofill_manager_ = owner_->client().CreateSecondaryManager(/*pass_key=*/{}, *this);
 }
 
 ContentAutofillDriver::~ContentAutofillDriver() {
@@ -160,6 +161,18 @@ AutofillManager& ContentAutofillDriver::GetAutofillManager() {
   return *autofill_manager_;
 }
 
+AutofillManager& ContentAutofillDriver::GetSecondaryAutofillManager() {
+  return *secondary_autofill_manager_;
+}
+
+bool ContentAutofillDriver::HasSecondaryAutofillManager() {
+  if (secondary_autofill_manager_) {
+    return true;
+  }
+
+  return false;
+}
+
 std::optional<LocalFrameToken> ContentAutofillDriver::Resolve(
     FrameToken query) {
   if (absl::holds_alternative<LocalFrameToken>(query)) {
@@ -423,6 +436,10 @@ void ContentAutofillDriver::FormsSeen(
                         const std::vector<FormGlobalId>& removed_forms) {
                        target->GetAutofillManager().OnFormsSeen(
                            WithNewVersion(updated_forms), removed_forms);
+                       if (target->HasSecondaryAutofillManager()) {
+                         target->GetSecondaryAutofillManager().OnFormsSeen(
+                             WithNewVersion(updated_forms), removed_forms);
+                       }
                      });
 }
 
@@ -440,6 +457,10 @@ void ContentAutofillDriver::FormSubmitted(
          bool known_success, mojom::SubmissionSource submission_source) {
         target->GetAutofillManager().OnFormSubmitted(
             WithNewVersion(form), known_success, submission_source);
+        if (target->HasSecondaryAutofillManager()) {
+          target->GetSecondaryAutofillManager().OnFormSubmitted(
+              WithNewVersion(form), known_success, submission_source);
+        }
       });
 }
 
@@ -461,6 +482,10 @@ void ContentAutofillDriver::TextFieldDidChange(const FormData& raw_form,
          base::TimeTicks timestamp) {
         target->GetAutofillManager().OnTextFieldDidChange(
             WithNewVersion(form), field, bounding_box, timestamp);
+        if (target->HasSecondaryAutofillManager()) {
+          target->GetSecondaryAutofillManager().OnTextFieldDidChange(
+            WithNewVersion(form), field, bounding_box, timestamp);
+        }
       });
 }
 
@@ -480,6 +505,10 @@ void ContentAutofillDriver::TextFieldDidScroll(const FormData& raw_form,
          const FormFieldData& field, const gfx::RectF& bounding_box) {
         target->GetAutofillManager().OnTextFieldDidScroll(WithNewVersion(form),
                                                           field, bounding_box);
+        if (target->HasSecondaryAutofillManager()) {
+          target->GetSecondaryAutofillManager().OnTextFieldDidScroll(WithNewVersion(form),
+                                                            field, bounding_box);
+        }
       });
 }
 
@@ -500,6 +529,10 @@ void ContentAutofillDriver::SelectControlDidChange(
          const FormFieldData& field, const gfx::RectF& bounding_box) {
         target->GetAutofillManager().OnSelectControlDidChange(
             WithNewVersion(form), field, bounding_box);
+        if (target->HasSecondaryAutofillManager()) {
+          target->GetSecondaryAutofillManager().OnSelectControlDidChange(
+            WithNewVersion(form), field, bounding_box);
+        }
       });
 }
 
@@ -522,6 +555,10 @@ void ContentAutofillDriver::AskForValuesToFill(
          AutofillSuggestionTriggerSource trigger_source) {
         target->GetAutofillManager().OnAskForValuesToFill(
             WithNewVersion(form), field, bounding_box, trigger_source);
+        if (target->HasSecondaryAutofillManager()) {
+          target->GetSecondaryAutofillManager().OnAskForValuesToFill(
+            WithNewVersion(form), field, bounding_box, trigger_source);
+        }
       });
 }
 
@@ -533,6 +570,9 @@ void ContentAutofillDriver::HidePopup() {
     DCHECK(!target->IsPrerendering())
         << "We should never affect UI while prerendering";
     target->GetAutofillManager().OnHidePopup();
+    if (target->HasSecondaryAutofillManager()) {
+      target->GetSecondaryAutofillManager().OnHidePopup();
+    }
   });
 }
 
@@ -544,6 +584,9 @@ void ContentAutofillDriver::FocusNoLongerOnForm(bool had_interacted_form) {
       this, had_interacted_form,
       [](autofill::AutofillDriver* target, bool had_interacted_form) {
         target->GetAutofillManager().OnFocusNoLongerOnForm(had_interacted_form);
+        if (target->HasSecondaryAutofillManager()) {
+          target->GetSecondaryAutofillManager().OnFocusNoLongerOnForm(had_interacted_form);
+        }
       });
 }
 
@@ -566,6 +609,9 @@ void ContentAutofillDriver::FocusOnFormField(const FormData& raw_form,
       },
       [](autofill::AutofillDriver* target) {
         target->GetAutofillManager().OnFocusNoLongerOnForm(true);
+        if (target->HasSecondaryAutofillManager()) {
+          target->GetSecondaryAutofillManager().OnFocusNoLongerOnForm(true);
+        }
       });
 }
 
@@ -580,6 +626,10 @@ void ContentAutofillDriver::DidFillAutofillFormData(const FormData& raw_form,
          base::TimeTicks timestamp) {
         target->GetAutofillManager().OnDidFillAutofillFormData(
             WithNewVersion(form), timestamp);
+        if (target->HasSecondaryAutofillManager()) {
+          target->GetSecondaryAutofillManager().OnDidFillAutofillFormData(
+            WithNewVersion(form), timestamp);
+        }
       });
 }
 
@@ -641,6 +691,9 @@ void ContentAutofillDriver::Reset() {
   owner_->router().UnregisterDriver(this,
                                     /*driver_is_dying=*/false);
   autofill_manager_->Reset();
+  if (secondary_autofill_manager_) {
+    secondary_autofill_manager_->Reset();
+  }
 }
 
 const mojo::AssociatedRemote<mojom::AutofillAgent>&
diff --git a/components/autofill/content/browser/content_autofill_driver.h b/components/autofill/content/browser/content_autofill_driver.h
index 736c27911e20b..c37096948c0fb 100644
--- a/components/autofill/content/browser/content_autofill_driver.h
+++ b/components/autofill/content/browser/content_autofill_driver.h
@@ -156,6 +156,8 @@ class ContentAutofillDriver : public AutofillDriver,
   std::optional<LocalFrameToken> Resolve(FrameToken query) override;
   ContentAutofillDriver* GetParent() override;
   AutofillManager& GetAutofillManager() override;
+  AutofillManager& GetSecondaryAutofillManager() override;
+  bool HasSecondaryAutofillManager() override;
   bool IsInActiveFrame() const override;
   bool IsInAnyMainFrame() const override;
   bool IsPrerendering() const override;
@@ -331,6 +333,8 @@ class ContentAutofillDriver : public AutofillDriver,
   mojo::AssociatedRemote<mojom::AutofillAgent> autofill_agent_;
 
   std::unique_ptr<AutofillManager> autofill_manager_ = nullptr;
+
+  std::unique_ptr<AutofillManager> secondary_autofill_manager_ = nullptr;
 };
 
 }  // namespace autofill
diff --git a/components/autofill/content/browser/content_autofill_driver_factory.cc b/components/autofill/content/browser/content_autofill_driver_factory.cc
index 0dd163004b217..d3e7cf69c283a 100644
--- a/components/autofill/content/browser/content_autofill_driver_factory.cc
+++ b/components/autofill/content/browser/content_autofill_driver_factory.cc
@@ -101,6 +101,7 @@ ContentAutofillDriver* ContentAutofillDriverFactory::DriverForFrame(
       DCHECK_EQ(driver_map_.find(render_frame_host)->second.get(),
                 driver.get());
       client().InitAgent(/*pass_key=*/{}, driver->GetAutofillAgent());
+      client().InitSecondaryAgent(/*pass_key=*/{}, driver->GetAutofillAgent());
     } else {
       driver_map_.erase(iter);
       DCHECK_EQ(driver_map_.count(render_frame_host), 0u);
diff --git a/components/autofill/core/browser/autofill_driver.h b/components/autofill/core/browser/autofill_driver.h
index f32d4340b5dfe..03efebeaa21dd 100644
--- a/components/autofill/core/browser/autofill_driver.h
+++ b/components/autofill/core/browser/autofill_driver.h
@@ -70,6 +70,12 @@ class AutofillDriver {
   // Returns the AutofillManager owned by the AutofillDriver.
   virtual AutofillManager& GetAutofillManager() = 0;
 
+  // Returns the secondary AutofillManager owned by the AutofillDriver.
+  virtual AutofillManager& GetSecondaryAutofillManager() = 0;
+
+  // Returns if there is a secondary AutofillManager owned by the AutofillDriver.
+  virtual bool HasSecondaryAutofillManager() = 0;
+
   // Returns whether the AutofillDriver instance is associated with an active
   // frame in the MPArch sense.
   virtual bool IsInActiveFrame() const = 0;
diff --git a/components/autofill/core/browser/test_autofill_driver.cc b/components/autofill/core/browser/test_autofill_driver.cc
index 0d07793657acc..10d9e024b4c4b 100644
--- a/components/autofill/core/browser/test_autofill_driver.cc
+++ b/components/autofill/core/browser/test_autofill_driver.cc
@@ -13,4 +13,12 @@ AutofillManager& TestAutofillDriver::GetAutofillManager() {
   return *autofill_manager_;
 }
 
+AutofillManager& TestAutofillDriver::GetSecondaryAutofillManager() {
+  return *secondary_autofill_manager_;
+}
+
+bool TestAutofillDriver::HasSecondaryAutofillManager() {
+  return false;
+}
+
 }  // namespace autofill
diff --git a/components/autofill/core/browser/test_autofill_driver.h b/components/autofill/core/browser/test_autofill_driver.h
index 4980ef107698b..15af50ef750a5 100644
--- a/components/autofill/core/browser/test_autofill_driver.h
+++ b/components/autofill/core/browser/test_autofill_driver.h
@@ -191,6 +191,8 @@ class TestAutofillDriver : public TestAutofillDriverTemplate<AutofillDriver> {
 
   // AutofillDriver
   AutofillManager& GetAutofillManager() override;
+  AutofillManager& GetSecondaryAutofillManager() override;
+  bool HasSecondaryAutofillManager() override;
 
   void set_autofill_manager(std::unique_ptr<AutofillManager> autofill_manager) {
     autofill_manager_ = std::move(autofill_manager);
@@ -198,6 +200,7 @@ class TestAutofillDriver : public TestAutofillDriverTemplate<AutofillDriver> {
 
  private:
   std::unique_ptr<AutofillManager> autofill_manager_ = nullptr;
+  std::unique_ptr<AutofillManager> secondary_autofill_manager_ = nullptr;
 };
 
 }  // namespace autofill
