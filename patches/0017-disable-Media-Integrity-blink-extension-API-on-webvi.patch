From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: quh4gko8 <88831734+quh4gko8@users.noreply.github.com>
Date: Thu, 18 Jul 2024 06:03:46 +0000
Subject: [PATCH] disable Media Integrity blink extension API on webview by
 default

Since 141.0.7358.0:

Reverts
https://chromium-review.googlesource.com/c/chromium/src/+/6851563, which
removes the Media Integrity blink extension API feature flag.
---
 ...ontent_browser_client_receiver_bindings.cc |  9 +-
 android_webview/common/aw_feature_map.cc      |  1 +
 android_webview/common/aw_features.cc         |  5 ++
 android_webview/common/aw_features.h          |  1 +
 .../common/ProductionSupportedFlagList.java   |  4 +
 .../test/AwMediaIntegrityApiTest.java         | 89 +++++++++++++++++++
 .../renderer/aw_content_renderer_client.cc    | 11 ++-
 7 files changed, 114 insertions(+), 6 deletions(-)

diff --git a/android_webview/browser/aw_content_browser_client_receiver_bindings.cc b/android_webview/browser/aw_content_browser_client_receiver_bindings.cc
index 9ef39f6192263..e1ef09e03b5fe 100644
--- a/android_webview/browser/aw_content_browser_client_receiver_bindings.cc
+++ b/android_webview/browser/aw_content_browser_client_receiver_bindings.cc
@@ -269,8 +269,13 @@ void AwContentBrowserClient::RegisterBrowserInterfaceBindersForFrame(
   map->Add<spellcheck::mojom::SpellCheckHost>(
       create_spellcheck_host, content::GetUIThreadTaskRunner({}));
 #endif
-  map->Add<blink::mojom::WebViewMediaIntegrityService>(
-      &BindMediaIntegrityServiceReceiver);
+
+  if (base::FeatureList::IsEnabled(
+          features::kWebViewMediaIntegrityApiBlinkExtension)) {
+    map->Add<blink::mojom::WebViewMediaIntegrityService>(
+        &BindMediaIntegrityServiceReceiver);
+  }
+
   if (base::FeatureList::IsEnabled(::features::kWebPayments)) {
     map->Add<payments::mojom::PaymentRequest>(
         &ForwardToJavaFrame<payments::mojom::PaymentRequest>);
diff --git a/android_webview/common/aw_feature_map.cc b/android_webview/common/aw_feature_map.cc
index 5c632c3e02773..9c6e4475b2264 100644
--- a/android_webview/common/aw_feature_map.cc
+++ b/android_webview/common/aw_feature_map.cc
@@ -49,6 +49,7 @@ const base::Feature* const kFeaturesExposedToJava[] = {
     &features::kWebViewHyperlinkContextMenu,
     &features::kWebViewInvokeZoomPickerOnGSU,
     &features::kWebViewLazyFetchHandWritingIcon,
+    &features::kWebViewMediaIntegrityApiBlinkExtension,
     &features::kWebViewMixedContentAutoupgrades,
     &features::kWebViewMoveWorkToProviderInit,
     &features::kWebViewMuteAudio,
diff --git a/android_webview/common/aw_features.cc b/android_webview/common/aw_features.cc
index 8ff895e93f3ac..6ac38ececa474 100644
--- a/android_webview/common/aw_features.cc
+++ b/android_webview/common/aw_features.cc
@@ -58,6 +58,11 @@ const base::FeatureParam<int> kWebViewIpProtectionExclusionCriteria{
 BASE_FEATURE(kWebViewLazyFetchHandWritingIcon,
              base::FEATURE_ENABLED_BY_DEFAULT);
 
+// Enable the WebView Media Integrity API as a Blink extension.
+// This feature requires `kWebViewMediaIntegrityApi` to be disabled.
+BASE_FEATURE(kWebViewMediaIntegrityApiBlinkExtension,
+             base::FEATURE_DISABLED_BY_DEFAULT);
+
 // When enabled, passive mixed content (Audio/Video/Image subresources loaded
 // over HTTP on HTTPS sites) will be autoupgraded to HTTPS, and the load will be
 // blocked if the resource fails to load over HTTPS. This only affects apps that
diff --git a/android_webview/common/aw_features.h b/android_webview/common/aw_features.h
index c7623a8b0453a..6b86cce9daa01 100644
--- a/android_webview/common/aw_features.h
+++ b/android_webview/common/aw_features.h
@@ -26,6 +26,7 @@ BASE_DECLARE_FEATURE(kWebViewInvokeZoomPickerOnGSU);
 // defined in //services/network.
 extern const base::FeatureParam<int> kWebViewIpProtectionExclusionCriteria;
 BASE_DECLARE_FEATURE(kWebViewLazyFetchHandWritingIcon);
+BASE_DECLARE_FEATURE(kWebViewMediaIntegrityApiBlinkExtension);
 BASE_DECLARE_FEATURE(kWebViewMixedContentAutoupgrades);
 BASE_DECLARE_FEATURE(kWebViewMuteAudio);
 BASE_DECLARE_FEATURE(kWebViewRenderDocument);
diff --git a/android_webview/java/src/org/chromium/android_webview/common/ProductionSupportedFlagList.java b/android_webview/java/src/org/chromium/android_webview/common/ProductionSupportedFlagList.java
index eae27345bdae5..078e48a2cb1ea 100644
--- a/android_webview/java/src/org/chromium/android_webview/common/ProductionSupportedFlagList.java
+++ b/android_webview/java/src/org/chromium/android_webview/common/ProductionSupportedFlagList.java
@@ -672,6 +672,10 @@ public final class ProductionSupportedFlagList {
         Flag.baseFeature("V8ScavengerHigherCapacity"),
         Flag.baseFeature("V8IncrementalMarkingStartUserVisible"),
         Flag.baseFeature("V8ExternalMemoryAccountedInGlobalLimit"),
+        Flag.baseFeature(
+                AwFeatures.WEBVIEW_MEDIA_INTEGRITY_API_BLINK_EXTENSION,
+                "Enable the WebView Media Integrity API as a Blink extension. Only works if"
+                        + " WebViewMediaIntegrityApi is disabled."),
         Flag.baseFeature(
                 "PMProcessPriorityPolicy",
                 "Controls whether the priority of renderers is controlled by the performance "
diff --git a/android_webview/javatests/src/org/chromium/android_webview/test/AwMediaIntegrityApiTest.java b/android_webview/javatests/src/org/chromium/android_webview/test/AwMediaIntegrityApiTest.java
index 24761904f49d5..6c14f23d53801 100644
--- a/android_webview/javatests/src/org/chromium/android_webview/test/AwMediaIntegrityApiTest.java
+++ b/android_webview/javatests/src/org/chromium/android_webview/test/AwMediaIntegrityApiTest.java
@@ -21,6 +21,7 @@ import org.junit.runners.Parameterized.UseParametersRunnerFactory;
 import org.chromium.android_webview.AwContents;
 import org.chromium.android_webview.JsReplyProxy;
 import org.chromium.android_webview.WebMessageListener;
+import org.chromium.android_webview.common.AwFeatures;
 import org.chromium.android_webview.common.MediaIntegrityApiStatus;
 import org.chromium.android_webview.common.MediaIntegrityErrorCode;
 import org.chromium.android_webview.common.MediaIntegrityErrorWrapper;
@@ -32,6 +33,7 @@ import org.chromium.android_webview.test.AwActivityTestRule.TestDependencyFactor
 import org.chromium.base.ThreadUtils;
 import org.chromium.base.test.util.Batch;
 import org.chromium.base.test.util.CallbackHelper;
+import org.chromium.base.test.util.CommandLineFlags;
 import org.chromium.content_public.browser.MessagePayload;
 import org.chromium.content_public.browser.MessagePort;
 import org.chromium.net.test.util.TestWebServer;
@@ -111,6 +113,9 @@ public class AwMediaIntegrityApiTest extends AwParameterizedTest {
 
     @Test
     @MediumTest
+    @CommandLineFlags.Add({
+        "enable-features=" + AwFeatures.WEBVIEW_MEDIA_INTEGRITY_API_BLINK_EXTENSION
+    })
     public void testApiSurfaceExposed() throws Exception {
         // Check the method name is exposed
         assertJsTruthy("android.webview.getExperimentalMediaIntegrityTokenProvider");
@@ -131,6 +136,18 @@ public class AwMediaIntegrityApiTest extends AwParameterizedTest {
 
     @Test
     @MediumTest
+    @CommandLineFlags.Add({
+        "disable-features=" + AwFeatures.WEBVIEW_MEDIA_INTEGRITY_API_BLINK_EXTENSION
+    })
+    public void testApiSurfaceNotExposedWhenFeatureDisabled() throws Exception {
+        assertJsTruthy("!('android' in window)");
+    }
+
+    @Test
+    @MediumTest
+    @CommandLineFlags.Add({
+        "enable-features=" + AwFeatures.WEBVIEW_MEDIA_INTEGRITY_API_BLINK_EXTENSION
+    })
     public void testProviderGetterNotExposedForDataUris() throws Throwable {
         mRule.loadDataSync(
                 mAwContents, mContentsClient.getOnPageFinishedHelper(), "", "text/html", false);
@@ -139,6 +156,9 @@ public class AwMediaIntegrityApiTest extends AwParameterizedTest {
 
     @Test
     @MediumTest
+    @CommandLineFlags.Add({
+        "enable-features=" + AwFeatures.WEBVIEW_MEDIA_INTEGRITY_API_BLINK_EXTENSION
+    })
     public void testProviderGetterExposedButRejectedForDataUrisWithHttpsBaseUrls()
             throws Throwable {
         // An HTTPS base URL has a secure context, unlike a plain data URL. This exposes the API,
@@ -160,6 +180,9 @@ public class AwMediaIntegrityApiTest extends AwParameterizedTest {
 
     @Test
     @MediumTest
+    @CommandLineFlags.Add({
+        "enable-features=" + AwFeatures.WEBVIEW_MEDIA_INTEGRITY_API_BLINK_EXTENSION
+    })
     public void testProviderGetterNotExposedForAboutBlank() throws Throwable {
         mRule.loadUrlSync(mAwContents, mContentsClient.getOnPageFinishedHelper(), "about:blank");
         assertNotExposed();
@@ -167,6 +190,9 @@ public class AwMediaIntegrityApiTest extends AwParameterizedTest {
 
     @Test
     @MediumTest
+    @CommandLineFlags.Add({
+        "enable-features=" + AwFeatures.WEBVIEW_MEDIA_INTEGRITY_API_BLINK_EXTENSION
+    })
     public void testProviderGetterNotExposedForPlaintextHttp() throws Throwable {
         mRule.loadDataWithBaseUrlSync(
                 mAwContents,
@@ -181,6 +207,9 @@ public class AwMediaIntegrityApiTest extends AwParameterizedTest {
 
     @Test
     @MediumTest
+    @CommandLineFlags.Add({
+        "enable-features=" + AwFeatures.WEBVIEW_MEDIA_INTEGRITY_API_BLINK_EXTENSION
+    })
     public void testProviderGetterUseableForLocalhostHttp() throws Throwable {
         try (TestWebServer server = TestWebServer.start()) {
             String url = server.setEmptyResponse("");
@@ -213,6 +242,9 @@ public class AwMediaIntegrityApiTest extends AwParameterizedTest {
 
     @Test
     @MediumTest
+    @CommandLineFlags.Add({
+        "enable-features=" + AwFeatures.WEBVIEW_MEDIA_INTEGRITY_API_BLINK_EXTENSION
+    })
     public void testProviderGetterExposedButRejectedForFileUris() throws Throwable {
         mRule.loadUrlSync(
                 mAwContents,
@@ -227,6 +259,9 @@ public class AwMediaIntegrityApiTest extends AwParameterizedTest {
 
     @Test
     @MediumTest
+    @CommandLineFlags.Add({
+        "enable-features=" + AwFeatures.WEBVIEW_MEDIA_INTEGRITY_API_BLINK_EXTENSION
+    })
     public void testProviderGetterExposedButRejectedForContentUris() throws Throwable {
         final String testHtmlContentPath = "hello.html";
         final String testHtmlContent =
@@ -247,6 +282,9 @@ public class AwMediaIntegrityApiTest extends AwParameterizedTest {
 
     @Test
     @MediumTest
+    @CommandLineFlags.Add({
+        "enable-features=" + AwFeatures.WEBVIEW_MEDIA_INTEGRITY_API_BLINK_EXTENSION
+    })
     public void testTokenProviderIsNotConstructable() throws Exception {
         // Try to construct a new token provider and turn the error into a string.
         String script =
@@ -271,6 +309,9 @@ public class AwMediaIntegrityApiTest extends AwParameterizedTest {
 
     @Test
     @MediumTest
+    @CommandLineFlags.Add({
+        "enable-features=" + AwFeatures.WEBVIEW_MEDIA_INTEGRITY_API_BLINK_EXTENSION
+    })
     public void testAbleToGetTokenProviderAndToken() throws Exception {
         String mockToken = "abc123def456";
         MockTokenProvider mockTokenProvider = new MockTokenProvider();
@@ -299,6 +340,9 @@ public class AwMediaIntegrityApiTest extends AwParameterizedTest {
 
     @Test
     @MediumTest
+    @CommandLineFlags.Add({
+        "enable-features=" + AwFeatures.WEBVIEW_MEDIA_INTEGRITY_API_BLINK_EXTENSION
+    })
     public void testErrorWhenAppDisablesApiGlobally() throws Exception {
         mAwContents
                 .getSettings()
@@ -315,6 +359,9 @@ public class AwMediaIntegrityApiTest extends AwParameterizedTest {
 
     @Test
     @MediumTest
+    @CommandLineFlags.Add({
+        "enable-features=" + AwFeatures.WEBVIEW_MEDIA_INTEGRITY_API_BLINK_EXTENSION
+    })
     public void testErrorWhenAppDisabledApiForUrl() throws Exception {
         String testScript =
                 getTestScript(CLOUD_PROJECT_NUMBER, asStringConstant(CONTENT_BINDING_HASH));
@@ -336,6 +383,9 @@ public class AwMediaIntegrityApiTest extends AwParameterizedTest {
 
     @Test
     @MediumTest
+    @CommandLineFlags.Add({
+        "enable-features=" + AwFeatures.WEBVIEW_MEDIA_INTEGRITY_API_BLINK_EXTENSION
+    })
     public void testErrorWhenApiDisabledForSourceButEnabledForTopLevel() throws Exception {
         final String result;
         try (final TestWebServer topLevelServer = TestWebServer.startSsl();
@@ -365,6 +415,9 @@ public class AwMediaIntegrityApiTest extends AwParameterizedTest {
 
     @Test
     @MediumTest
+    @CommandLineFlags.Add({
+        "enable-features=" + AwFeatures.WEBVIEW_MEDIA_INTEGRITY_API_BLINK_EXTENSION
+    })
     public void testGetTokenWhenApiEnabledForSourceButDisabledForTopLevel() throws Exception {
         final String mockToken = "abc123def456";
         final MockTokenProvider mockTokenProvider = new MockTokenProvider();
@@ -398,6 +451,9 @@ public class AwMediaIntegrityApiTest extends AwParameterizedTest {
 
     @Test
     @MediumTest
+    @CommandLineFlags.Add({
+        "enable-features=" + AwFeatures.WEBVIEW_MEDIA_INTEGRITY_API_BLINK_EXTENSION
+    })
     public void testCloudProjectNumberAccessibleOnTokenProvider() throws Exception {
         MockTokenProvider mockTokenProvider = new MockTokenProvider();
         mPlatformBridge.addProviderResponse(
@@ -426,6 +482,9 @@ public class AwMediaIntegrityApiTest extends AwParameterizedTest {
 
     @Test
     @MediumTest
+    @CommandLineFlags.Add({
+        "enable-features=" + AwFeatures.WEBVIEW_MEDIA_INTEGRITY_API_BLINK_EXTENSION
+    })
     public void testTokenProviderReusedWhenUsingSamePartition() throws Exception {
         String mockToken = "abc123def456";
 
@@ -449,6 +508,9 @@ public class AwMediaIntegrityApiTest extends AwParameterizedTest {
 
     @Test
     @MediumTest
+    @CommandLineFlags.Add({
+        "enable-features=" + AwFeatures.WEBVIEW_MEDIA_INTEGRITY_API_BLINK_EXTENSION
+    })
     public void testTokenProviderNotReusedAfterApiModeChange() throws Exception {
         String mockToken = "abc123def456";
 
@@ -500,6 +562,9 @@ public class AwMediaIntegrityApiTest extends AwParameterizedTest {
 
     @Test
     @MediumTest
+    @CommandLineFlags.Add({
+        "enable-features=" + AwFeatures.WEBVIEW_MEDIA_INTEGRITY_API_BLINK_EXTENSION
+    })
     public void testTokenProviderNotReusedAcrossDistinctOrigins() throws Exception {
         String mockTokenTestServer1 = "abc123def456";
         String mockTokenTestServer2 = "555555555";
@@ -561,6 +626,9 @@ public class AwMediaIntegrityApiTest extends AwParameterizedTest {
 
     @Test
     @MediumTest
+    @CommandLineFlags.Add({
+        "enable-features=" + AwFeatures.WEBVIEW_MEDIA_INTEGRITY_API_BLINK_EXTENSION
+    })
     public void testTokenProviderNotReusedAcrossDistinctPartyIFrames() throws Exception {
         String mockTokenA = "abc123def456";
         String mockTokenB = "555555555";
@@ -615,6 +683,9 @@ public class AwMediaIntegrityApiTest extends AwParameterizedTest {
 
     @Test
     @MediumTest
+    @CommandLineFlags.Add({
+        "enable-features=" + AwFeatures.WEBVIEW_MEDIA_INTEGRITY_API_BLINK_EXTENSION
+    })
     public void testTokenProviderNotReusedIfInvalid() throws Exception {
 
         MockTokenProvider mockTokenProvider1 = new MockTokenProvider();
@@ -649,6 +720,9 @@ public class AwMediaIntegrityApiTest extends AwParameterizedTest {
 
     @Test
     @MediumTest
+    @CommandLineFlags.Add({
+        "enable-features=" + AwFeatures.WEBVIEW_MEDIA_INTEGRITY_API_BLINK_EXTENSION
+    })
     public void testTokenRequestAcceptsEmptyString() throws Exception {
         String mockToken = "abc123def456";
 
@@ -667,6 +741,9 @@ public class AwMediaIntegrityApiTest extends AwParameterizedTest {
 
     @Test
     @MediumTest
+    @CommandLineFlags.Add({
+        "enable-features=" + AwFeatures.WEBVIEW_MEDIA_INTEGRITY_API_BLINK_EXTENSION
+    })
     public void testTokenRequestAcceptsNull() throws Exception {
         String mockToken = "abc123def456";
 
@@ -685,6 +762,9 @@ public class AwMediaIntegrityApiTest extends AwParameterizedTest {
 
     @Test
     @MediumTest
+    @CommandLineFlags.Add({
+        "enable-features=" + AwFeatures.WEBVIEW_MEDIA_INTEGRITY_API_BLINK_EXTENSION
+    })
     public void testTokenRequestAcceptsMissingParameterAsNull() throws Exception {
         String mockToken = "abc123def456";
 
@@ -703,6 +783,9 @@ public class AwMediaIntegrityApiTest extends AwParameterizedTest {
 
     @Test
     @MediumTest
+    @CommandLineFlags.Add({
+        "enable-features=" + AwFeatures.WEBVIEW_MEDIA_INTEGRITY_API_BLINK_EXTENSION
+    })
     public void testInvalidCloudProjectNumbersAreRejected() throws Exception {
         // Only numbers up to 2^53-1 can be represented correctly in JavaScript.
         // Test that numbers larger than this are rejected.
@@ -723,6 +806,9 @@ public class AwMediaIntegrityApiTest extends AwParameterizedTest {
 
     @Test
     @MediumTest
+    @CommandLineFlags.Add({
+        "enable-features=" + AwFeatures.WEBVIEW_MEDIA_INTEGRITY_API_BLINK_EXTENSION
+    })
     public void testErrorsMappedGetTokenProvider() throws Exception {
         mPlatformBridge.addProviderError(
                 CLOUD_PROJECT_NUMBER,
@@ -767,6 +853,9 @@ public class AwMediaIntegrityApiTest extends AwParameterizedTest {
 
     @Test
     @MediumTest
+    @CommandLineFlags.Add({
+        "enable-features=" + AwFeatures.WEBVIEW_MEDIA_INTEGRITY_API_BLINK_EXTENSION
+    })
     public void testErrorsMappedRequestToken() throws Exception {
         MockTokenProvider mockTokenProvider = new MockTokenProvider();
         mPlatformBridge.addProviderResponse(
diff --git a/android_webview/renderer/aw_content_renderer_client.cc b/android_webview/renderer/aw_content_renderer_client.cc
index c969ffc8eb1ac..8e778f5345c91 100644
--- a/android_webview/renderer/aw_content_renderer_client.cc
+++ b/android_webview/renderer/aw_content_renderer_client.cc
@@ -208,10 +208,13 @@ void AwContentRendererClient::
     blink::WebRuntimeFeatures::EnableSharedAutofill(true);
   }
 
-  // Enable the overall android.webview namespace.
-  blink::WebRuntimeFeatures::EnableBlinkExtensionWebView(true);
-  // Enable the android.webview.getExperimentalMediaIntegrityProvider API.
-  blink::WebRuntimeFeatures::EnableBlinkExtensionWebViewMediaIntegrity(true);
+  if (base::FeatureList::IsEnabled(
+          features::kWebViewMediaIntegrityApiBlinkExtension)) {
+    // Enable the overall android.webview namespace.
+    blink::WebRuntimeFeatures::EnableBlinkExtensionWebView(true);
+    // Enable the android.webview.getExperimentalMediaIntegrityProvider API.
+    blink::WebRuntimeFeatures::EnableBlinkExtensionWebViewMediaIntegrity(true);
+  }
 }
 
 void AwContentRendererClient::WebViewCreated(
