From 6c407f9ee3fed64f94032bff9ae32916132c5b66 Mon Sep 17 00:00:00 2001
From: Ari Chivukula <arichiv@chromium.org>
Date: Thu, 11 Aug 2022 00:39:04 +0000
Subject: [PATCH] [Cross-Origin Favicons] (3) Stop cross-origin cache hits

Currently, if a.com is loaded and has a favicon at a.com/icon.png and
then b.com is loaded and has the exact same favicon, the cache entry is
shared which permits b.com to notice that a.com was visited. The end
goal of this task is to prevent cross-origin cache leaks.

This CL integrates the new variant of GetFaviconIDForFaviconURL into
UpdateFaviconMappingsAndFetch so that we filter the results per-pageurl
based on the origin. This should fully resolve the task, although the db
itself isn't fully partitioned.

This CL is part of a series:
(1) Cache browser test
(2) Add new cache check function
(3) Stop cross-origin cache hits

Bug: 1300214
Change-Id: I9bf04982abea136a00e2b5252726a1cdef8e8550
Reviewed-on: https://chromium-review.googlesource.com/c/chromium/src/+/3822882
Reviewed-by: Scott Violet <sky@chromium.org>
Auto-Submit: Ari Chivukula <arichiv@chromium.org>
Commit-Queue: Ari Chivukula <arichiv@chromium.org>
Cr-Commit-Position: refs/heads/main@{#1033798}
---
 .../content_favicon_driver_browsertest.cc     | 10 +++----
 components/favicon/core/favicon_backend.cc    | 24 +++++++++++----
 .../favicon/core/favicon_backend_unittest.cc  | 29 ++++++++++++++++++-
 3 files changed, 50 insertions(+), 13 deletions(-)

diff --git a/chrome/browser/favicon/content_favicon_driver_browsertest.cc b/chrome/browser/favicon/content_favicon_driver_browsertest.cc
index d1abc154f787b..9ac168b98ae81 100644
--- a/chrome/browser/favicon/content_favicon_driver_browsertest.cc
+++ b/chrome/browser/favicon/content_favicon_driver_browsertest.cc
@@ -1115,7 +1115,6 @@ IN_PROC_BROWSER_TEST_F(ContentFaviconDriverTest,
   url_loader_interceptor.Reset();
 }
 
-// TODO(crbug.com/1300214): Different origins should not share the same cache.
 // Test that different origins share the underlying favicon cache over http.
 IN_PROC_BROWSER_TEST_F(ContentFaviconDriverTest, CrossOriginCacheHTTP) {
   ASSERT_TRUE(embedded_test_server()->Start());
@@ -1140,7 +1139,7 @@ IN_PROC_BROWSER_TEST_F(ContentFaviconDriverTest, CrossOriginCacheHTTP) {
             url_loader_interceptor.destination(icon_url));
   url_loader_interceptor.Reset();
 
-  // Initial visit to b.com should reuse the existing cache.
+  // Initial visit to b.com shouldn't reuse the existing cache.
   {
     PendingTaskWaiter waiter(web_contents());
     ui_test_utils::NavigateToURLWithDisposition(
@@ -1148,11 +1147,10 @@ IN_PROC_BROWSER_TEST_F(ContentFaviconDriverTest, CrossOriginCacheHTTP) {
         ui_test_utils::BROWSER_TEST_WAIT_FOR_LOAD_STOP);
     waiter.Wait();
   }
-  EXPECT_FALSE(url_loader_interceptor.was_loaded(icon_url));
+  EXPECT_TRUE(url_loader_interceptor.was_loaded(icon_url));
   EXPECT_FALSE(url_loader_interceptor.did_bypass_cache(icon_url));
 }
 
-// TODO(crbug.com/1300214): Different origins should not share the same cache.
 // Test that different origins share the underlying favicon cache over https.
 IN_PROC_BROWSER_TEST_F(ContentFaviconDriverTest, CrossOriginCacheHTTPS) {
   net::EmbeddedTestServer ssl_server(net::EmbeddedTestServer::TYPE_HTTPS);
@@ -1179,7 +1177,7 @@ IN_PROC_BROWSER_TEST_F(ContentFaviconDriverTest, CrossOriginCacheHTTPS) {
             url_loader_interceptor.destination(icon_url));
   url_loader_interceptor.Reset();
 
-  // Initial visit to b.com should reuse the existing cache.
+  // Initial visit to b.com shouldn't reuse the existing cache.
   {
     PendingTaskWaiter waiter(web_contents());
     ui_test_utils::NavigateToURLWithDisposition(
@@ -1187,6 +1185,6 @@ IN_PROC_BROWSER_TEST_F(ContentFaviconDriverTest, CrossOriginCacheHTTPS) {
         ui_test_utils::BROWSER_TEST_WAIT_FOR_LOAD_STOP);
     waiter.Wait();
   }
-  EXPECT_FALSE(url_loader_interceptor.was_loaded(icon_url));
+  EXPECT_TRUE(url_loader_interceptor.was_loaded(icon_url));
   EXPECT_FALSE(url_loader_interceptor.did_bypass_cache(icon_url));
 }
diff --git a/components/favicon/core/favicon_backend.cc b/components/favicon/core/favicon_backend.cc
index 118132b66b575..5e8dec2adc2b1 100644
--- a/components/favicon/core/favicon_backend.cc
+++ b/components/favicon/core/favicon_backend.cc
@@ -17,6 +17,7 @@
 #include "components/favicon_base/select_favicon_frames.h"
 #include "third_party/skia/include/core/SkBitmap.h"
 #include "ui/gfx/codec/png_codec.h"
+#include "url/origin.h"
 
 namespace favicon {
 
@@ -211,20 +212,31 @@ UpdateFaviconMappingsResult FaviconBackend::UpdateFaviconMappingsAndFetch(
     favicon_base::IconType icon_type,
     const std::vector<int>& desired_sizes) {
   UpdateFaviconMappingsResult result;
-  const favicon_base::FaviconID favicon_id =
-      db_->GetFaviconIDForFaviconURL(icon_url, icon_type);
+  const auto favicon_id = db_->GetFaviconIDForFaviconURL(icon_url, icon_type);
   if (!favicon_id)
     return result;
+  bool per_origin_favicon_id_found = false;
 
   for (const GURL& page_url : page_urls) {
-    bool mappings_updated =
-        SetFaviconMappingsForPageAndRedirects(page_url, icon_type, favicon_id);
+    // We check per-origin so that we don't cross-origin load from the cache.
+    // See crbug.com/1300214 for more context.
+    const auto per_origin_favicon_id = db_->GetFaviconIDForFaviconURL(
+        icon_url, icon_type, url::Origin::Create(page_url));
+    if (!per_origin_favicon_id)
+      continue;
+    per_origin_favicon_id_found = true;
+    bool mappings_updated = SetFaviconMappingsForPageAndRedirects(
+        page_url, icon_type, per_origin_favicon_id);
     if (mappings_updated)
       result.updated_page_urls.insert(page_url);
   }
 
-  result.bitmap_results =
-      GetFaviconBitmapResultsForBestMatch({favicon_id}, desired_sizes);
+  // We add the favicon if at least one origin saw it *or* if this was loaded
+  // without linking the favicon to any page url (used by history service).
+  if (per_origin_favicon_id_found || page_urls.empty()) {
+    result.bitmap_results =
+        GetFaviconBitmapResultsForBestMatch({favicon_id}, desired_sizes);
+  }
   return result;
 }
 
diff --git a/components/favicon/core/favicon_backend_unittest.cc b/components/favicon/core/favicon_backend_unittest.cc
index 2469e0396c90d..dced788364681 100644
--- a/components/favicon/core/favicon_backend_unittest.cc
+++ b/components/favicon/core/favicon_backend_unittest.cc
@@ -378,7 +378,7 @@ TEST_F(FaviconBackendTest, SetFaviconsSameFaviconURLForTwoPages) {
   GURL icon_url("http://www.google.com/favicon.ico");
   GURL icon_url_new("http://www.google.com/favicon2.ico");
   GURL page_url1("http://www.google.com");
-  GURL page_url2("http://www.google.ca");
+  GURL page_url2("http://www.google.com/page");
   std::vector<SkBitmap> bitmaps;
   bitmaps.push_back(CreateBitmap(SK_ColorBLUE, kSmallEdgeSize));
   bitmaps.push_back(CreateBitmap(SK_ColorRED, kLargeEdgeSize));
@@ -1270,4 +1270,31 @@ TEST_F(FaviconBackendTest, GetFaviconsForUrlExpired) {
   EXPECT_TRUE(bitmap_results_out[0].expired);
 }
 
+// Test that a favicon isn't loaded cross-origin.
+TEST_F(FaviconBackendTest, FaviconCacheWillNotLoadCrossOrigin) {
+  GURL icon_url("http://www.google.com/favicon.ico");
+  GURL page_url1("http://www.google.com");
+  GURL page_url2("http://www.google.ca");
+  std::vector<SkBitmap> bitmaps;
+  bitmaps.push_back(CreateBitmap(SK_ColorBLUE, kSmallEdgeSize));
+  bitmaps.push_back(CreateBitmap(SK_ColorRED, kLargeEdgeSize));
+
+  // Store `icon_url` for `page_url1`, but just attempt load for `page_url2`.
+  SetFavicons({page_url1}, IconType::kFavicon, icon_url, bitmaps);
+  backend_->UpdateFaviconMappingsAndFetch(
+      {page_url2}, icon_url, IconType::kFavicon, GetEdgeSizesSmallAndLarge());
+
+  // Check that the same FaviconID is mapped just to `page_url1`.
+  std::vector<IconMapping> icon_mappings;
+  EXPECT_TRUE(
+      backend_->db()->GetIconMappingsForPageURL(page_url1, &icon_mappings));
+  EXPECT_EQ(1u, icon_mappings.size());
+  favicon_base::FaviconID favicon_id = icon_mappings[0].icon_id;
+  EXPECT_NE(0, favicon_id);
+
+  icon_mappings.clear();
+  EXPECT_FALSE(
+      backend_->db()->GetIconMappingsForPageURL(page_url2, &icon_mappings));
+}
+
 }  // namespace favicon
